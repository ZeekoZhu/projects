/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a project version.
    /// </summary>
    [DataContract(Name = "varVersion")]
    public partial class ModelVersion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelVersion" /> class.
        /// </summary>
        /// <param name="archived">Indicates that the version is archived. Optional when creating or updating a version..</param>
        /// <param name="description">The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes..</param>
        /// <param name="expand">Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing approvers for this version.  Optional for create and update..</param>
        /// <param name="issuesStatusForFixVersion">issuesStatusForFixVersion.</param>
        /// <param name="moveUnfixedIssuesTo">The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version..</param>
        /// <param name="name">The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters..</param>
        /// <param name="project">Deprecated. Use &#x60;projectId&#x60;..</param>
        /// <param name="projectId">The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version..</param>
        /// <param name="releaseDate">The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version..</param>
        /// <param name="released">Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version..</param>
        /// <param name="startDate">The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version..</param>
        public ModelVersion(bool archived = default(bool), string description = default(string), string expand = default(string), VersionIssuesStatusForFixVersion issuesStatusForFixVersion = default(VersionIssuesStatusForFixVersion), string moveUnfixedIssuesTo = default(string), string name = default(string), string project = default(string), long projectId = default(long), DateOnly releaseDate = default(DateOnly), bool released = default(bool), DateOnly startDate = default(DateOnly))
        {
            this.Archived = archived;
            this.Description = description;
            this.Expand = expand;
            this.IssuesStatusForFixVersion = issuesStatusForFixVersion;
            this.MoveUnfixedIssuesTo = moveUnfixedIssuesTo;
            this.Name = name;
            this.Project = project;
            this.ProjectId = projectId;
            this.ReleaseDate = releaseDate;
            this.Released = released;
            this.StartDate = startDate;
        }

        /// <summary>
        /// If the expand option &#x60;approvers&#x60; is used, returns a list containing the approvers for this version.
        /// </summary>
        /// <value>If the expand option &#x60;approvers&#x60; is used, returns a list containing the approvers for this version.</value>
        [DataMember(Name = "approvers", EmitDefaultValue = false)]
        public List<VersionApprover> Approvers { get; private set; }

        /// <summary>
        /// Returns false as Approvers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApprovers()
        {
            return false;
        }
        /// <summary>
        /// Indicates that the version is archived. Optional when creating or updating a version.
        /// </summary>
        /// <value>Indicates that the version is archived. Optional when creating or updating a version.</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.
        /// </summary>
        /// <value>The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// If the expand option &#x60;driver&#x60; is used, returns the Atlassian account ID of the driver.
        /// </summary>
        /// <value>If the expand option &#x60;driver&#x60; is used, returns the Atlassian account ID of the driver.</value>
        [DataMember(Name = "driver", EmitDefaultValue = false)]
        public string Driver { get; private set; }

        /// <summary>
        /// Returns false as Driver should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDriver()
        {
            return false;
        }
        /// <summary>
        /// Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing approvers for this version.  Optional for create and update.
        /// </summary>
        /// <value>Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing approvers for this version.  Optional for create and update.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the version.
        /// </summary>
        /// <value>The ID of the version.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IssuesStatusForFixVersion
        /// </summary>
        [DataMember(Name = "issuesStatusForFixVersion", EmitDefaultValue = false)]
        public VersionIssuesStatusForFixVersion IssuesStatusForFixVersion { get; set; }

        /// <summary>
        /// The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        /// <value>The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.</value>
        [DataMember(Name = "moveUnfixedIssuesTo", EmitDefaultValue = false)]
        public string MoveUnfixedIssuesTo { get; set; }

        /// <summary>
        /// The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
        /// </summary>
        /// <value>The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version.
        /// </summary>
        /// <value>If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version.</value>
        [DataMember(Name = "operations", EmitDefaultValue = false)]
        public List<SimpleLink> Operations { get; private set; }

        /// <summary>
        /// Returns false as Operations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOperations()
        {
            return false;
        }
        /// <summary>
        /// Indicates that the version is overdue.
        /// </summary>
        /// <value>Indicates that the version is overdue.</value>
        [DataMember(Name = "overdue", EmitDefaultValue = true)]
        public bool Overdue { get; private set; }

        /// <summary>
        /// Returns false as Overdue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOverdue()
        {
            return false;
        }
        /// <summary>
        /// Deprecated. Use &#x60;projectId&#x60;.
        /// </summary>
        /// <value>Deprecated. Use &#x60;projectId&#x60;.</value>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public string Project { get; set; }

        /// <summary>
        /// The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
        /// </summary>
        /// <value>The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        /// <value>The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.</value>
        [DataMember(Name = "releaseDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly ReleaseDate { get; set; }

        /// <summary>
        /// Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        /// <value>Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.</value>
        [DataMember(Name = "released", EmitDefaultValue = true)]
        public bool Released { get; set; }

        /// <summary>
        /// The URL of the version.
        /// </summary>
        /// <value>The URL of the version.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        /// <value>The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly StartDate { get; set; }

        /// <summary>
        /// The date on which work on this version is expected to finish, expressed in the instance&#39;s *Day/Month/Year Format* date format.
        /// </summary>
        /// <value>The date on which work on this version is expected to finish, expressed in the instance&#39;s *Day/Month/Year Format* date format.</value>
        [DataMember(Name = "userReleaseDate", EmitDefaultValue = false)]
        public string UserReleaseDate { get; private set; }

        /// <summary>
        /// Returns false as UserReleaseDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUserReleaseDate()
        {
            return false;
        }
        /// <summary>
        /// The date on which work on this version is expected to start, expressed in the instance&#39;s *Day/Month/Year Format* date format.
        /// </summary>
        /// <value>The date on which work on this version is expected to start, expressed in the instance&#39;s *Day/Month/Year Format* date format.</value>
        [DataMember(Name = "userStartDate", EmitDefaultValue = false)]
        public string UserStartDate { get; private set; }

        /// <summary>
        /// Returns false as UserStartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUserStartDate()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelVersion {\n");
            sb.Append("  Approvers: ").Append(Approvers).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssuesStatusForFixVersion: ").Append(IssuesStatusForFixVersion).Append("\n");
            sb.Append("  MoveUnfixedIssuesTo: ").Append(MoveUnfixedIssuesTo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Overdue: ").Append(Overdue).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Released: ").Append(Released).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  UserReleaseDate: ").Append(UserReleaseDate).Append("\n");
            sb.Append("  UserStartDate: ").Append(UserStartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
