/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a notification associated with an event.
    /// </summary>
    [DataContract(Name = "EventNotification")]
    public partial class EventNotification : IValidatableObject
    {
        /// <summary>
        /// Identifies the recipients of the notification.
        /// </summary>
        /// <value>Identifies the recipients of the notification.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NotificationTypeEnum
        {
            /// <summary>
            /// Enum CurrentAssignee for value: CurrentAssignee
            /// </summary>
            [EnumMember(Value = "CurrentAssignee")]
            CurrentAssignee = 1,

            /// <summary>
            /// Enum Reporter for value: Reporter
            /// </summary>
            [EnumMember(Value = "Reporter")]
            Reporter = 2,

            /// <summary>
            /// Enum CurrentUser for value: CurrentUser
            /// </summary>
            [EnumMember(Value = "CurrentUser")]
            CurrentUser = 3,

            /// <summary>
            /// Enum ProjectLead for value: ProjectLead
            /// </summary>
            [EnumMember(Value = "ProjectLead")]
            ProjectLead = 4,

            /// <summary>
            /// Enum ComponentLead for value: ComponentLead
            /// </summary>
            [EnumMember(Value = "ComponentLead")]
            ComponentLead = 5,

            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 6,

            /// <summary>
            /// Enum Group for value: Group
            /// </summary>
            [EnumMember(Value = "Group")]
            Group = 7,

            /// <summary>
            /// Enum ProjectRole for value: ProjectRole
            /// </summary>
            [EnumMember(Value = "ProjectRole")]
            ProjectRole = 8,

            /// <summary>
            /// Enum EmailAddress for value: EmailAddress
            /// </summary>
            [EnumMember(Value = "EmailAddress")]
            EmailAddress = 9,

            /// <summary>
            /// Enum AllWatchers for value: AllWatchers
            /// </summary>
            [EnumMember(Value = "AllWatchers")]
            AllWatchers = 10,

            /// <summary>
            /// Enum UserCustomField for value: UserCustomField
            /// </summary>
            [EnumMember(Value = "UserCustomField")]
            UserCustomField = 11,

            /// <summary>
            /// Enum GroupCustomField for value: GroupCustomField
            /// </summary>
            [EnumMember(Value = "GroupCustomField")]
            GroupCustomField = 12
        }


        /// <summary>
        /// Identifies the recipients of the notification.
        /// </summary>
        /// <value>Identifies the recipients of the notification.</value>
        [DataMember(Name = "notificationType", EmitDefaultValue = false)]
        public NotificationTypeEnum? NotificationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventNotification" /> class.
        /// </summary>
        /// <param name="emailAddress">The email address..</param>
        /// <param name="expand">Expand options that include additional event notification details in the response..</param>
        /// <param name="field">The custom user or group field..</param>
        /// <param name="group">The specified group..</param>
        /// <param name="id">The ID of the notification..</param>
        /// <param name="notificationType">Identifies the recipients of the notification..</param>
        /// <param name="varParameter">As a group&#39;s name can change, use of &#x60;recipient&#x60; is recommended. The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60; The &#x60;parameter&#x60; is the user account ID.  *  &#x60;Group&#x60; The &#x60;parameter&#x60; is the group name.  *  &#x60;ProjectRole&#x60; The &#x60;parameter&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field..</param>
        /// <param name="projectRole">The specified project role..</param>
        /// <param name="recipient">The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by the &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60;, &#x60;recipient&#x60; is the user account ID.  *  &#x60;Group&#x60;, &#x60;recipient&#x60; is the group ID.  *  &#x60;ProjectRole&#x60;, &#x60;recipient&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field..</param>
        /// <param name="user">The specified user..</param>
        public EventNotification(string emailAddress = default(string), string expand = default(string), FieldDetails field = default(FieldDetails), GroupName group = default(GroupName), long id = default(long), NotificationTypeEnum? notificationType = default(NotificationTypeEnum?), string varParameter = default(string), ProjectRole projectRole = default(ProjectRole), string recipient = default(string), UserDetails user = default(UserDetails))
        {
            this.EmailAddress = emailAddress;
            this.Expand = expand;
            this.Field = field;
            this.Group = group;
            this.Id = id;
            this.NotificationType = notificationType;
            this.VarParameter = varParameter;
            this.ProjectRole = projectRole;
            this.Recipient = recipient;
            this.User = user;
        }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name = "emailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Expand options that include additional event notification details in the response.
        /// </summary>
        /// <value>Expand options that include additional event notification details in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; set; }

        /// <summary>
        /// The custom user or group field.
        /// </summary>
        /// <value>The custom user or group field.</value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public FieldDetails Field { get; set; }

        /// <summary>
        /// The specified group.
        /// </summary>
        /// <value>The specified group.</value>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The ID of the notification.
        /// </summary>
        /// <value>The ID of the notification.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// As a group&#39;s name can change, use of &#x60;recipient&#x60; is recommended. The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60; The &#x60;parameter&#x60; is the user account ID.  *  &#x60;Group&#x60; The &#x60;parameter&#x60; is the group name.  *  &#x60;ProjectRole&#x60; The &#x60;parameter&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.
        /// </summary>
        /// <value>As a group&#39;s name can change, use of &#x60;recipient&#x60; is recommended. The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60; The &#x60;parameter&#x60; is the user account ID.  *  &#x60;Group&#x60; The &#x60;parameter&#x60; is the group name.  *  &#x60;ProjectRole&#x60; The &#x60;parameter&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.</value>
        [DataMember(Name = "parameter", EmitDefaultValue = false)]
        public string VarParameter { get; set; }

        /// <summary>
        /// The specified project role.
        /// </summary>
        /// <value>The specified project role.</value>
        [DataMember(Name = "projectRole", EmitDefaultValue = false)]
        public ProjectRole ProjectRole { get; set; }

        /// <summary>
        /// The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by the &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60;, &#x60;recipient&#x60; is the user account ID.  *  &#x60;Group&#x60;, &#x60;recipient&#x60; is the group ID.  *  &#x60;ProjectRole&#x60;, &#x60;recipient&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.
        /// </summary>
        /// <value>The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by the &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60;, &#x60;recipient&#x60; is the user account ID.  *  &#x60;Group&#x60;, &#x60;recipient&#x60; is the group ID.  *  &#x60;ProjectRole&#x60;, &#x60;recipient&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.</value>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// The specified user.
        /// </summary>
        /// <value>The specified user.</value>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public UserDetails User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventNotification {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  VarParameter: ").Append(VarParameter).Append("\n");
            sb.Append("  ProjectRole: ").Append(ProjectRole).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
