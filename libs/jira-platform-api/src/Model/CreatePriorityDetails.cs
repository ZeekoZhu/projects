/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of an issue priority.
    /// </summary>
    [DataContract(Name = "CreatePriorityDetails")]
    public partial class CreatePriorityDetails : IValidatableObject
    {
        /// <summary>
        /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
        /// </summary>
        /// <value>The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IconUrlEnum
        {
            /// <summary>
            /// Enum BlockerPng for value: /images/icons/priorities/blocker.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/blocker.png")]
            BlockerPng = 1,

            /// <summary>
            /// Enum CriticalPng for value: /images/icons/priorities/critical.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/critical.png")]
            CriticalPng = 2,

            /// <summary>
            /// Enum HighPng for value: /images/icons/priorities/high.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/high.png")]
            HighPng = 3,

            /// <summary>
            /// Enum HighestPng for value: /images/icons/priorities/highest.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/highest.png")]
            HighestPng = 4,

            /// <summary>
            /// Enum LowPng for value: /images/icons/priorities/low.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/low.png")]
            LowPng = 5,

            /// <summary>
            /// Enum LowestPng for value: /images/icons/priorities/lowest.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/lowest.png")]
            LowestPng = 6,

            /// <summary>
            /// Enum MajorPng for value: /images/icons/priorities/major.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/major.png")]
            MajorPng = 7,

            /// <summary>
            /// Enum MediumPng for value: /images/icons/priorities/medium.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/medium.png")]
            MediumPng = 8,

            /// <summary>
            /// Enum MinorPng for value: /images/icons/priorities/minor.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/minor.png")]
            MinorPng = 9,

            /// <summary>
            /// Enum TrivialPng for value: /images/icons/priorities/trivial.png
            /// </summary>
            [EnumMember(Value = "/images/icons/priorities/trivial.png")]
            TrivialPng = 10
        }


        /// <summary>
        /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
        /// </summary>
        /// <value>The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.</value>
        [DataMember(Name = "iconUrl", EmitDefaultValue = false)]
        public IconUrlEnum? IconUrl { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePriorityDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePriorityDetails()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePriorityDetails" /> class.
        /// </summary>
        /// <param name="description">The description of the priority..</param>
        /// <param name="iconUrl">The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used..</param>
        /// <param name="name">The name of the priority. Must be unique. (required).</param>
        /// <param name="statusColor">The status color of the priority in 3-digit or 6-digit hexadecimal format. (required).</param>
        public CreatePriorityDetails(string description = default(string), IconUrlEnum? iconUrl = default(IconUrlEnum?), string name = default(string), string statusColor = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreatePriorityDetails and cannot be null");
            }
            this.Name = name;
            // to ensure "statusColor" is required (not null)
            if (statusColor == null)
            {
                throw new ArgumentNullException("statusColor is a required property for CreatePriorityDetails and cannot be null");
            }
            this.StatusColor = statusColor;
            this.Description = description;
            this.IconUrl = iconUrl;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The description of the priority.
        /// </summary>
        /// <value>The description of the priority.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the priority. Must be unique.
        /// </summary>
        /// <value>The name of the priority. Must be unique.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The status color of the priority in 3-digit or 6-digit hexadecimal format.
        /// </summary>
        /// <value>The status color of the priority in 3-digit or 6-digit hexadecimal format.</value>
        [DataMember(Name = "statusColor", IsRequired = true, EmitDefaultValue = true)]
        public string StatusColor { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePriorityDetails {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StatusColor: ").Append(StatusColor).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 60.", new [] { "Name" });
            }

            yield break;
        }
    }

}
