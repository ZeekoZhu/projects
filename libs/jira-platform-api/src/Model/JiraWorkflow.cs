/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a workflow.
    /// </summary>
    [DataContract(Name = "JiraWorkflow")]
    public partial class JiraWorkflow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JiraWorkflow" /> class.
        /// </summary>
        /// <param name="description">The description of the workflow..</param>
        /// <param name="id">The ID of the workflow..</param>
        /// <param name="isEditable">Indicates if the workflow can be edited..</param>
        /// <param name="name">The name of the workflow..</param>
        /// <param name="scope">scope.</param>
        /// <param name="startPointLayout">startPointLayout.</param>
        /// <param name="statuses">The statuses referenced in this workflow..</param>
        /// <param name="taskId">If there is a current [asynchronous task](#async-operations) operation for this workflow..</param>
        /// <param name="transitions">The transitions of the workflow..</param>
        /// <param name="usages">Use the optional &#x60;workflows.usages&#x60; expand to get additional information about the projects and issue types associated with the requested workflows..</param>
        /// <param name="varVersion">varVersion.</param>
        public JiraWorkflow(string description = default(string), string id = default(string), bool isEditable = default(bool), string name = default(string), WorkflowScope scope = default(WorkflowScope), WorkflowLayout startPointLayout = default(WorkflowLayout), List<WorkflowReferenceStatus> statuses = default(List<WorkflowReferenceStatus>), string taskId = default(string), List<WorkflowTransitions> transitions = default(List<WorkflowTransitions>), List<ProjectIssueTypes> usages = default(List<ProjectIssueTypes>), DocumentVersion varVersion = default(DocumentVersion))
        {
            this.Description = description;
            this.Id = id;
            this.IsEditable = isEditable;
            this.Name = name;
            this.Scope = scope;
            this.StartPointLayout = startPointLayout;
            this.Statuses = statuses;
            this.TaskId = taskId;
            this.Transitions = transitions;
            this.Usages = usages;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        /// <value>The description of the workflow.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        /// <value>The ID of the workflow.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if the workflow can be edited.
        /// </summary>
        /// <value>Indicates if the workflow can be edited.</value>
        [DataMember(Name = "isEditable", EmitDefaultValue = true)]
        public bool IsEditable { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        /// <value>The name of the workflow.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public WorkflowScope Scope { get; set; }

        /// <summary>
        /// Gets or Sets StartPointLayout
        /// </summary>
        [DataMember(Name = "startPointLayout", EmitDefaultValue = true)]
        public WorkflowLayout StartPointLayout { get; set; }

        /// <summary>
        /// The statuses referenced in this workflow.
        /// </summary>
        /// <value>The statuses referenced in this workflow.</value>
        [DataMember(Name = "statuses", EmitDefaultValue = false)]
        public List<WorkflowReferenceStatus> Statuses { get; set; }

        /// <summary>
        /// If there is a current [asynchronous task](#async-operations) operation for this workflow.
        /// </summary>
        /// <value>If there is a current [asynchronous task](#async-operations) operation for this workflow.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = true)]
        public string TaskId { get; set; }

        /// <summary>
        /// The transitions of the workflow.
        /// </summary>
        /// <value>The transitions of the workflow.</value>
        [DataMember(Name = "transitions", EmitDefaultValue = false)]
        public List<WorkflowTransitions> Transitions { get; set; }

        /// <summary>
        /// Use the optional &#x60;workflows.usages&#x60; expand to get additional information about the projects and issue types associated with the requested workflows.
        /// </summary>
        /// <value>Use the optional &#x60;workflows.usages&#x60; expand to get additional information about the projects and issue types associated with the requested workflows.</value>
        [DataMember(Name = "usages", EmitDefaultValue = false)]
        public List<ProjectIssueTypes> Usages { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public DocumentVersion VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JiraWorkflow {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  StartPointLayout: ").Append(StartPointLayout).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("  Usages: ").Append(Usages).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
