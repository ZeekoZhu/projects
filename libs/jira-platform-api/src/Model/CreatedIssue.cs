/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a created issue or subtask.
    /// </summary>
    [DataContract(Name = "CreatedIssue")]
    public partial class CreatedIssue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatedIssue" /> class.
        /// </summary>
        /// <param name="transition">transition.</param>
        /// <param name="watchers">watchers.</param>
        public CreatedIssue(CreatedIssueTransition transition = default(CreatedIssueTransition), CreatedIssueWatchers watchers = default(CreatedIssueWatchers))
        {
            this.Transition = transition;
            this.Watchers = watchers;
        }

        /// <summary>
        /// The ID of the created issue or subtask.
        /// </summary>
        /// <value>The ID of the created issue or subtask.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The key of the created issue or subtask.
        /// </summary>
        /// <value>The key of the created issue or subtask.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; private set; }

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return false;
        }
        /// <summary>
        /// The URL of the created issue or subtask.
        /// </summary>
        /// <value>The URL of the created issue or subtask.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Transition
        /// </summary>
        [DataMember(Name = "transition", EmitDefaultValue = false)]
        public CreatedIssueTransition Transition { get; set; }

        /// <summary>
        /// Gets or Sets Watchers
        /// </summary>
        [DataMember(Name = "watchers", EmitDefaultValue = false)]
        public CreatedIssueWatchers Watchers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatedIssue {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Transition: ").Append(Transition).Append("\n");
            sb.Append("  Watchers: ").Append(Watchers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
