/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The project the item has scope in.
    /// </summary>
    [DataContract(Name = "Scope_project")]
    public partial class ScopeProject : IValidatableObject
    {
        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProjectTypeKeyEnum
        {
            /// <summary>
            /// Enum Software for value: software
            /// </summary>
            [EnumMember(Value = "software")]
            Software = 1,

            /// <summary>
            /// Enum ServiceDesk for value: service_desk
            /// </summary>
            [EnumMember(Value = "service_desk")]
            ServiceDesk = 2,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 3
        }


        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [DataMember(Name = "projectTypeKey", EmitDefaultValue = false)]
        public ProjectTypeKeyEnum? ProjectTypeKey { get; set; }

        /// <summary>
        /// Returns false as ProjectTypeKey should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProjectTypeKey()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeProject" /> class.
        /// </summary>
        /// <param name="avatarUrls">avatarUrls.</param>
        /// <param name="id">The ID of the project..</param>
        /// <param name="projectCategory">projectCategory.</param>
        public ScopeProject(ProjectAvatarUrls avatarUrls = default(ProjectAvatarUrls), string id = default(string), ProjectDetailsProjectCategory projectCategory = default(ProjectDetailsProjectCategory))
        {
            this.AvatarUrls = avatarUrls;
            this.Id = id;
            this.ProjectCategory = projectCategory;
        }

        /// <summary>
        /// Gets or Sets AvatarUrls
        /// </summary>
        [DataMember(Name = "avatarUrls", EmitDefaultValue = false)]
        public ProjectAvatarUrls AvatarUrls { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        /// <value>The ID of the project.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        /// <value>The key of the project.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; private set; }

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return false;
        }
        /// <summary>
        /// The name of the project.
        /// </summary>
        /// <value>The name of the project.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ProjectCategory
        /// </summary>
        [DataMember(Name = "projectCategory", EmitDefaultValue = false)]
        public ProjectDetailsProjectCategory ProjectCategory { get; set; }

        /// <summary>
        /// The URL of the project details.
        /// </summary>
        /// <value>The URL of the project details.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Whether or not the project is simplified.
        /// </summary>
        /// <value>Whether or not the project is simplified.</value>
        [DataMember(Name = "simplified", EmitDefaultValue = true)]
        public bool Simplified { get; private set; }

        /// <summary>
        /// Returns false as Simplified should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSimplified()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScopeProject {\n");
            sb.Append("  AvatarUrls: ").Append(AvatarUrls).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectCategory: ").Append(ProjectCategory).Append("\n");
            sb.Append("  ProjectTypeKey: ").Append(ProjectTypeKey).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Simplified: ").Append(Simplified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
