/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of workflow transition rules.
    /// </summary>
    [DataContract(Name = "WorkflowRulesSearchDetails")]
    public partial class WorkflowRulesSearchDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowRulesSearchDetails" /> class.
        /// </summary>
        /// <param name="invalidRules">List of workflow rule IDs that do not belong to the workflow or can not be found..</param>
        /// <param name="validRules">List of valid workflow transition rules..</param>
        /// <param name="workflowEntityId">The workflow ID..</param>
        public WorkflowRulesSearchDetails(List<Guid> invalidRules = default(List<Guid>), List<WorkflowTransitionRules> validRules = default(List<WorkflowTransitionRules>), Guid workflowEntityId = default(Guid))
        {
            this.InvalidRules = invalidRules;
            this.ValidRules = validRules;
            this.WorkflowEntityId = workflowEntityId;
        }

        /// <summary>
        /// List of workflow rule IDs that do not belong to the workflow or can not be found.
        /// </summary>
        /// <value>List of workflow rule IDs that do not belong to the workflow or can not be found.</value>
        [DataMember(Name = "invalidRules", EmitDefaultValue = false)]
        public List<Guid> InvalidRules { get; set; }

        /// <summary>
        /// List of valid workflow transition rules.
        /// </summary>
        /// <value>List of valid workflow transition rules.</value>
        [DataMember(Name = "validRules", EmitDefaultValue = false)]
        public List<WorkflowTransitionRules> ValidRules { get; set; }

        /// <summary>
        /// The workflow ID.
        /// </summary>
        /// <value>The workflow ID.</value>
        /// <example>a498d711-685d-428d-8c3e-bc03bb450ea7</example>
        [DataMember(Name = "workflowEntityId", EmitDefaultValue = false)]
        public Guid WorkflowEntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowRulesSearchDetails {\n");
            sb.Append("  InvalidRules: ").Append(InvalidRules).Append("\n");
            sb.Append("  ValidRules: ").Append(ValidRules).Append("\n");
            sb.Append("  WorkflowEntityId: ").Append(WorkflowEntityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
