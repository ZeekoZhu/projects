/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a notification scheme.
    /// </summary>
    [DataContract(Name = "NotificationScheme")]
    public partial class NotificationScheme : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationScheme" /> class.
        /// </summary>
        /// <param name="description">The description of the notification scheme..</param>
        /// <param name="expand">Expand options that include additional notification scheme details in the response..</param>
        /// <param name="id">The ID of the notification scheme..</param>
        /// <param name="name">The name of the notification scheme..</param>
        /// <param name="notificationSchemeEvents">The notification events and associated recipients..</param>
        /// <param name="projects">The list of project IDs associated with the notification scheme..</param>
        /// <param name="scope">The scope of the notification scheme..</param>
        /// <param name="self">self.</param>
        public NotificationScheme(string description = default(string), string expand = default(string), long id = default(long), string name = default(string), List<NotificationSchemeEvent> notificationSchemeEvents = default(List<NotificationSchemeEvent>), List<long> projects = default(List<long>), Scope scope = default(Scope), string self = default(string))
        {
            this.Description = description;
            this.Expand = expand;
            this.Id = id;
            this.Name = name;
            this.NotificationSchemeEvents = notificationSchemeEvents;
            this.Projects = projects;
            this.Scope = scope;
            this.Self = self;
        }

        /// <summary>
        /// The description of the notification scheme.
        /// </summary>
        /// <value>The description of the notification scheme.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Expand options that include additional notification scheme details in the response.
        /// </summary>
        /// <value>Expand options that include additional notification scheme details in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the notification scheme.
        /// </summary>
        /// <value>The ID of the notification scheme.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the notification scheme.
        /// </summary>
        /// <value>The name of the notification scheme.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The notification events and associated recipients.
        /// </summary>
        /// <value>The notification events and associated recipients.</value>
        [DataMember(Name = "notificationSchemeEvents", EmitDefaultValue = false)]
        public List<NotificationSchemeEvent> NotificationSchemeEvents { get; set; }

        /// <summary>
        /// The list of project IDs associated with the notification scheme.
        /// </summary>
        /// <value>The list of project IDs associated with the notification scheme.</value>
        [DataMember(Name = "projects", EmitDefaultValue = false)]
        public List<long> Projects { get; set; }

        /// <summary>
        /// The scope of the notification scheme.
        /// </summary>
        /// <value>The scope of the notification scheme.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public Scope Scope { get; set; }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationScheme {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationSchemeEvents: ").Append(NotificationSchemeEvents).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
