/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a permission and its availability to a user.
    /// </summary>
    [DataContract(Name = "UserPermission")]
    public partial class UserPermission : IValidatableObject
    {
        /// <summary>
        /// The type of the permission.
        /// </summary>
        /// <value>The type of the permission.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum GLOBAL for value: GLOBAL
            /// </summary>
            [EnumMember(Value = "GLOBAL")]
            GLOBAL = 1,

            /// <summary>
            /// Enum PROJECT for value: PROJECT
            /// </summary>
            [EnumMember(Value = "PROJECT")]
            PROJECT = 2
        }


        /// <summary>
        /// The type of the permission.
        /// </summary>
        /// <value>The type of the permission.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPermission" /> class.
        /// </summary>
        /// <param name="deprecatedKey">Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the &#x60;permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.&#x60;.</param>
        /// <param name="description">The description of the permission..</param>
        /// <param name="havePermission">Whether the permission is available to the user in the queried context..</param>
        /// <param name="id">The ID of the permission. Either &#x60;id&#x60; or &#x60;key&#x60; must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions..</param>
        /// <param name="key">The key of the permission. Either &#x60;id&#x60; or &#x60;key&#x60; must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions..</param>
        /// <param name="name">The name of the permission..</param>
        /// <param name="type">The type of the permission..</param>
        public UserPermission(bool deprecatedKey = default(bool), string description = default(string), bool havePermission = default(bool), string id = default(string), string key = default(string), string name = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.DeprecatedKey = deprecatedKey;
            this.Description = description;
            this.HavePermission = havePermission;
            this.Id = id;
            this.Key = key;
            this.Name = name;
            this.Type = type;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the &#x60;permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.&#x60;
        /// </summary>
        /// <value>Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the &#x60;permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.&#x60;</value>
        [DataMember(Name = "deprecatedKey", EmitDefaultValue = true)]
        public bool DeprecatedKey { get; set; }

        /// <summary>
        /// The description of the permission.
        /// </summary>
        /// <value>The description of the permission.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the permission is available to the user in the queried context.
        /// </summary>
        /// <value>Whether the permission is available to the user in the queried context.</value>
        [DataMember(Name = "havePermission", EmitDefaultValue = true)]
        public bool HavePermission { get; set; }

        /// <summary>
        /// The ID of the permission. Either &#x60;id&#x60; or &#x60;key&#x60; must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        /// </summary>
        /// <value>The ID of the permission. Either &#x60;id&#x60; or &#x60;key&#x60; must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the permission. Either &#x60;id&#x60; or &#x60;key&#x60; must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
        /// </summary>
        /// <value>The key of the permission. Either &#x60;id&#x60; or &#x60;key&#x60; must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the permission.
        /// </summary>
        /// <value>The name of the permission.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPermission {\n");
            sb.Append("  DeprecatedKey: ").Append(DeprecatedKey).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HavePermission: ").Append(HavePermission).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
