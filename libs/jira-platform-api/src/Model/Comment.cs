/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// A comment.
    /// </summary>
    [DataContract(Name = "Comment")]
    public partial class Comment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Comment" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="body">The comment text..</param>
        /// <param name="properties">A list of comment properties. Optional on create and update..</param>
        /// <param name="updateAuthor">updateAuthor.</param>
        /// <param name="visibility">The group or role to which this comment is visible. Optional on create and update..</param>
        public Comment(CommentAuthor author = default(CommentAuthor), string body = default(string), List<EntityProperty> properties = default(List<EntityProperty>), CommentUpdateAuthor updateAuthor = default(CommentUpdateAuthor), Visibility visibility = default(Visibility))
        {
            this.Author = author;
            this.Body = body;
            this.Properties = properties;
            this.UpdateAuthor = updateAuthor;
            this.Visibility = visibility;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public CommentAuthor Author { get; set; }

        /// <summary>
        /// The comment text.
        /// </summary>
        /// <value>The comment text.</value>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// The date and time at which the comment was created.
        /// </summary>
        /// <value>The date and time at which the comment was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; private set; }

        /// <summary>
        /// Returns false as Created should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreated()
        {
            return false;
        }
        /// <summary>
        /// The ID of the comment.
        /// </summary>
        /// <value>The ID of the comment.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
        /// </summary>
        /// <value>Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.</value>
        [DataMember(Name = "jsdAuthorCanSeeRequest", EmitDefaultValue = true)]
        public bool JsdAuthorCanSeeRequest { get; private set; }

        /// <summary>
        /// Returns false as JsdAuthorCanSeeRequest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJsdAuthorCanSeeRequest()
        {
            return false;
        }
        /// <summary>
        /// Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn&#39;t use Jira Service Desk or the project isn&#39;t a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
        /// </summary>
        /// <value>Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn&#39;t use Jira Service Desk or the project isn&#39;t a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.</value>
        [DataMember(Name = "jsdPublic", EmitDefaultValue = true)]
        public bool JsdPublic { get; private set; }

        /// <summary>
        /// Returns false as JsdPublic should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJsdPublic()
        {
            return false;
        }
        /// <summary>
        /// A list of comment properties. Optional on create and update.
        /// </summary>
        /// <value>A list of comment properties. Optional on create and update.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The rendered version of the comment.
        /// </summary>
        /// <value>The rendered version of the comment.</value>
        [DataMember(Name = "renderedBody", EmitDefaultValue = false)]
        public string RenderedBody { get; private set; }

        /// <summary>
        /// Returns false as RenderedBody should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRenderedBody()
        {
            return false;
        }
        /// <summary>
        /// The URL of the comment.
        /// </summary>
        /// <value>The URL of the comment.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdateAuthor
        /// </summary>
        [DataMember(Name = "updateAuthor", EmitDefaultValue = false)]
        public CommentUpdateAuthor UpdateAuthor { get; set; }

        /// <summary>
        /// The date and time at which the comment was updated last.
        /// </summary>
        /// <value>The date and time at which the comment was updated last.</value>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public DateTime Updated { get; private set; }

        /// <summary>
        /// Returns false as Updated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdated()
        {
            return false;
        }
        /// <summary>
        /// The group or role to which this comment is visible. Optional on create and update.
        /// </summary>
        /// <value>The group or role to which this comment is visible. Optional on create and update.</value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public Visibility Visibility { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Comment {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JsdAuthorCanSeeRequest: ").Append(JsdAuthorCanSeeRequest).Append("\n");
            sb.Append("  JsdPublic: ").Append(JsdPublic).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  RenderedBody: ").Append(RenderedBody).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  UpdateAuthor: ").Append(UpdateAuthor).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
