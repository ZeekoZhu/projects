/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// An issue suggested for use in the issue picker auto-completion.
    /// </summary>
    [DataContract(Name = "SuggestedIssue")]
    public partial class SuggestedIssue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuggestedIssue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public SuggestedIssue()
        {
        }

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        /// <value>The ID of the issue.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The URL of the issue type&#39;s avatar.
        /// </summary>
        /// <value>The URL of the issue type&#39;s avatar.</value>
        [DataMember(Name = "img", EmitDefaultValue = false)]
        public string Img { get; private set; }

        /// <summary>
        /// Returns false as Img should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImg()
        {
            return false;
        }
        /// <summary>
        /// The key of the issue.
        /// </summary>
        /// <value>The key of the issue.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; private set; }

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return false;
        }
        /// <summary>
        /// The key of the issue in HTML format.
        /// </summary>
        /// <value>The key of the issue in HTML format.</value>
        [DataMember(Name = "keyHtml", EmitDefaultValue = false)]
        public string KeyHtml { get; private set; }

        /// <summary>
        /// Returns false as KeyHtml should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKeyHtml()
        {
            return false;
        }
        /// <summary>
        /// The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
        /// </summary>
        /// <value>The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; private set; }

        /// <summary>
        /// Returns false as Summary should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSummary()
        {
            return false;
        }
        /// <summary>
        /// The phrase containing the query string, as plain text.
        /// </summary>
        /// <value>The phrase containing the query string, as plain text.</value>
        [DataMember(Name = "summaryText", EmitDefaultValue = false)]
        public string SummaryText { get; private set; }

        /// <summary>
        /// Returns false as SummaryText should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSummaryText()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SuggestedIssue {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Img: ").Append(Img).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  KeyHtml: ").Append(KeyHtml).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  SummaryText: ").Append(SummaryText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
