/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a workflow scheme.
    /// </summary>
    [DataContract(Name = "WorkflowScheme")]
    public partial class WorkflowScheme : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowScheme" /> class.
        /// </summary>
        /// <param name="defaultWorkflow">The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*..</param>
        /// <param name="description">The description of the workflow scheme..</param>
        /// <param name="issueTypeMappings">The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme..</param>
        /// <param name="lastModifiedUser">lastModifiedUser.</param>
        /// <param name="name">The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme..</param>
        /// <param name="updateDraftIfNeeded">Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;..</param>
        public WorkflowScheme(string defaultWorkflow = default(string), string description = default(string), Dictionary<string, string> issueTypeMappings = default(Dictionary<string, string>), WorkflowSchemeLastModifiedUser lastModifiedUser = default(WorkflowSchemeLastModifiedUser), string name = default(string), bool updateDraftIfNeeded = default(bool))
        {
            this.DefaultWorkflow = defaultWorkflow;
            this.Description = description;
            this.IssueTypeMappings = issueTypeMappings;
            this.LastModifiedUser = lastModifiedUser;
            this.Name = name;
            this.UpdateDraftIfNeeded = updateDraftIfNeeded;
        }

        /// <summary>
        /// The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
        /// </summary>
        /// <value>The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.</value>
        [DataMember(Name = "defaultWorkflow", EmitDefaultValue = false)]
        public string DefaultWorkflow { get; set; }

        /// <summary>
        /// The description of the workflow scheme.
        /// </summary>
        /// <value>The description of the workflow scheme.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the workflow scheme is a draft or not.
        /// </summary>
        /// <value>Whether the workflow scheme is a draft or not.</value>
        [DataMember(Name = "draft", EmitDefaultValue = true)]
        public bool Draft { get; private set; }

        /// <summary>
        /// Returns false as Draft should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDraft()
        {
            return false;
        }
        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        /// <value>The ID of the workflow scheme.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        /// <value>The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.</value>
        [DataMember(Name = "issueTypeMappings", EmitDefaultValue = false)]
        public Dictionary<string, string> IssueTypeMappings { get; set; }

        /// <summary>
        /// The issue types available in Jira.
        /// </summary>
        /// <value>The issue types available in Jira.</value>
        [DataMember(Name = "issueTypes", EmitDefaultValue = false)]
        public Dictionary<string, IssueTypeDetails> IssueTypes { get; private set; }

        /// <summary>
        /// Returns false as IssueTypes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIssueTypes()
        {
            return false;
        }
        /// <summary>
        /// The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
        /// </summary>
        /// <value>The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public string LastModified { get; private set; }

        /// <summary>
        /// Returns false as LastModified should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastModified()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LastModifiedUser
        /// </summary>
        [DataMember(Name = "lastModifiedUser", EmitDefaultValue = false)]
        public WorkflowSchemeLastModifiedUser LastModifiedUser { get; set; }

        /// <summary>
        /// The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
        /// </summary>
        /// <value>The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
        /// </summary>
        /// <value>For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.</value>
        [DataMember(Name = "originalDefaultWorkflow", EmitDefaultValue = false)]
        public string OriginalDefaultWorkflow { get; private set; }

        /// <summary>
        /// Returns false as OriginalDefaultWorkflow should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalDefaultWorkflow()
        {
            return false;
        }
        /// <summary>
        /// For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        /// <value>For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.</value>
        [DataMember(Name = "originalIssueTypeMappings", EmitDefaultValue = false)]
        public Dictionary<string, string> OriginalIssueTypeMappings { get; private set; }

        /// <summary>
        /// Returns false as OriginalIssueTypeMappings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalIssueTypeMappings()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name = "updateDraftIfNeeded", EmitDefaultValue = true)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowScheme {\n");
            sb.Append("  DefaultWorkflow: ").Append(DefaultWorkflow).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueTypeMappings: ").Append(IssueTypeMappings).Append("\n");
            sb.Append("  IssueTypes: ").Append(IssueTypes).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedUser: ").Append(LastModifiedUser).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OriginalDefaultWorkflow: ").Append(OriginalDefaultWorkflow).Append("\n");
            sb.Append("  OriginalIssueTypeMappings: ").Append(OriginalIssueTypeMappings).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  UpdateDraftIfNeeded: ").Append(UpdateDraftIfNeeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
