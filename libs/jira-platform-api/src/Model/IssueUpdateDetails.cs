/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of an issue update request.
    /// </summary>
    [DataContract(Name = "IssueUpdateDetails")]
    public partial class IssueUpdateDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueUpdateDetails" /> class.
        /// </summary>
        /// <param name="fields">List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use &#x60;update&#x60;. Fields included in here cannot be included in &#x60;update&#x60;..</param>
        /// <param name="historyMetadata">Additional issue history details..</param>
        /// <param name="properties">Details of issue properties to be add or update..</param>
        /// <param name="transition">Details of a transition. Required when performing a transition, optional when creating or editing an issue..</param>
        /// <param name="update">A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in &#x60;fields&#x60;..</param>
        public IssueUpdateDetails(Dictionary<string, Object> fields = default(Dictionary<string, Object>), HistoryMetadata historyMetadata = default(HistoryMetadata), List<EntityProperty> properties = default(List<EntityProperty>), IssueTransition transition = default(IssueTransition), Dictionary<string, List<FieldUpdateOperation>> update = default(Dictionary<string, List<FieldUpdateOperation>>))
        {
            this.Fields = fields;
            this.HistoryMetadata = historyMetadata;
            this.Properties = properties;
            this.Transition = transition;
            this.Update = update;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use &#x60;update&#x60;. Fields included in here cannot be included in &#x60;update&#x60;.
        /// </summary>
        /// <value>List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use &#x60;update&#x60;. Fields included in here cannot be included in &#x60;update&#x60;.</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Dictionary<string, Object> Fields { get; set; }

        /// <summary>
        /// Additional issue history details.
        /// </summary>
        /// <value>Additional issue history details.</value>
        [DataMember(Name = "historyMetadata", EmitDefaultValue = false)]
        public HistoryMetadata HistoryMetadata { get; set; }

        /// <summary>
        /// Details of issue properties to be add or update.
        /// </summary>
        /// <value>Details of issue properties to be add or update.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<EntityProperty> Properties { get; set; }

        /// <summary>
        /// Details of a transition. Required when performing a transition, optional when creating or editing an issue.
        /// </summary>
        /// <value>Details of a transition. Required when performing a transition, optional when creating or editing an issue.</value>
        [DataMember(Name = "transition", EmitDefaultValue = false)]
        public IssueTransition Transition { get; set; }

        /// <summary>
        /// A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in &#x60;fields&#x60;.
        /// </summary>
        /// <value>A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in &#x60;fields&#x60;.</value>
        [DataMember(Name = "update", EmitDefaultValue = false)]
        public Dictionary<string, List<FieldUpdateOperation>> Update { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueUpdateDetails {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  HistoryMetadata: ").Append(HistoryMetadata).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Transition: ").Append(Transition).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
