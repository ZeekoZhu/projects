/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a project feature.
    /// </summary>
    [DataContract(Name = "ProjectFeature")]
    public partial class ProjectFeature : IValidatableObject
    {
        /// <summary>
        /// The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
        /// </summary>
        /// <value>The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 1,

            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 2,

            /// <summary>
            /// Enum COMINGSOON for value: COMING_SOON
            /// </summary>
            [EnumMember(Value = "COMING_SOON")]
            COMINGSOON = 3
        }


        /// <summary>
        /// The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
        /// </summary>
        /// <value>The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectFeature" /> class.
        /// </summary>
        /// <param name="feature">The key of the feature..</param>
        /// <param name="imageUri">URI for the image representing the feature..</param>
        /// <param name="localisedDescription">Localized display description for the feature..</param>
        /// <param name="localisedName">Localized display name for the feature..</param>
        /// <param name="prerequisites">List of keys of the features required to enable the feature..</param>
        /// <param name="projectId">The ID of the project..</param>
        /// <param name="state">The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values.</param>
        /// <param name="toggleLocked">Whether the state of the feature can be updated..</param>
        public ProjectFeature(string feature = default(string), string imageUri = default(string), string localisedDescription = default(string), string localisedName = default(string), List<string> prerequisites = default(List<string>), long projectId = default(long), StateEnum? state = default(StateEnum?), bool toggleLocked = default(bool))
        {
            this.Feature = feature;
            this.ImageUri = imageUri;
            this.LocalisedDescription = localisedDescription;
            this.LocalisedName = localisedName;
            this.Prerequisites = prerequisites;
            this.ProjectId = projectId;
            this.State = state;
            this.ToggleLocked = toggleLocked;
        }

        /// <summary>
        /// The key of the feature.
        /// </summary>
        /// <value>The key of the feature.</value>
        [DataMember(Name = "feature", EmitDefaultValue = false)]
        public string Feature { get; set; }

        /// <summary>
        /// URI for the image representing the feature.
        /// </summary>
        /// <value>URI for the image representing the feature.</value>
        [DataMember(Name = "imageUri", EmitDefaultValue = false)]
        public string ImageUri { get; set; }

        /// <summary>
        /// Localized display description for the feature.
        /// </summary>
        /// <value>Localized display description for the feature.</value>
        [DataMember(Name = "localisedDescription", EmitDefaultValue = false)]
        public string LocalisedDescription { get; set; }

        /// <summary>
        /// Localized display name for the feature.
        /// </summary>
        /// <value>Localized display name for the feature.</value>
        [DataMember(Name = "localisedName", EmitDefaultValue = false)]
        public string LocalisedName { get; set; }

        /// <summary>
        /// List of keys of the features required to enable the feature.
        /// </summary>
        /// <value>List of keys of the features required to enable the feature.</value>
        [DataMember(Name = "prerequisites", EmitDefaultValue = false)]
        public List<string> Prerequisites { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        /// <value>The ID of the project.</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public long ProjectId { get; set; }

        /// <summary>
        /// Whether the state of the feature can be updated.
        /// </summary>
        /// <value>Whether the state of the feature can be updated.</value>
        [DataMember(Name = "toggleLocked", EmitDefaultValue = true)]
        public bool ToggleLocked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectFeature {\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  ImageUri: ").Append(ImageUri).Append("\n");
            sb.Append("  LocalisedDescription: ").Append(LocalisedDescription).Append("\n");
            sb.Append("  LocalisedName: ").Append(LocalisedName).Append("\n");
            sb.Append("  Prerequisites: ").Append(Prerequisites).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ToggleLocked: ").Append(ToggleLocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
