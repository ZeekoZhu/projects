/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a worklog.
    /// </summary>
    [DataContract(Name = "Worklog")]
    public partial class Worklog : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Worklog" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="comment">A comment about the worklog. Optional when creating or updating a worklog..</param>
        /// <param name="properties">Details of properties for the worklog. Optional when creating or updating a worklog..</param>
        /// <param name="started">The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog..</param>
        /// <param name="timeSpent">The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if &#x60;timeSpentSeconds&#x60; isn&#39;t provided. Optional when updating a worklog. Cannot be provided if &#x60;timeSpentSecond&#x60; is provided..</param>
        /// <param name="timeSpentSeconds">The time in seconds spent working on the issue. Required when creating a worklog if &#x60;timeSpent&#x60; isn&#39;t provided. Optional when updating a worklog. Cannot be provided if &#x60;timeSpent&#x60; is provided..</param>
        /// <param name="updateAuthor">updateAuthor.</param>
        /// <param name="visibility">Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog..</param>
        public Worklog(WorklogAuthor author = default(WorklogAuthor), string comment = default(string), List<EntityProperty> properties = default(List<EntityProperty>), DateTime started = default(DateTime), string timeSpent = default(string), long timeSpentSeconds = default(long), WorklogUpdateAuthor updateAuthor = default(WorklogUpdateAuthor), Visibility visibility = default(Visibility))
        {
            this.Author = author;
            this.Comment = comment;
            this.Properties = properties;
            this.Started = started;
            this.TimeSpent = timeSpent;
            this.TimeSpentSeconds = timeSpentSeconds;
            this.UpdateAuthor = updateAuthor;
            this.Visibility = visibility;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public WorklogAuthor Author { get; set; }

        /// <summary>
        /// A comment about the worklog. Optional when creating or updating a worklog.
        /// </summary>
        /// <value>A comment about the worklog. Optional when creating or updating a worklog.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// The datetime on which the worklog was created.
        /// </summary>
        /// <value>The datetime on which the worklog was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; private set; }

        /// <summary>
        /// Returns false as Created should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreated()
        {
            return false;
        }
        /// <summary>
        /// The ID of the worklog record.
        /// </summary>
        /// <value>The ID of the worklog record.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The ID of the issue this worklog is for.
        /// </summary>
        /// <value>The ID of the issue this worklog is for.</value>
        [DataMember(Name = "issueId", EmitDefaultValue = false)]
        public string IssueId { get; private set; }

        /// <summary>
        /// Returns false as IssueId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIssueId()
        {
            return false;
        }
        /// <summary>
        /// Details of properties for the worklog. Optional when creating or updating a worklog.
        /// </summary>
        /// <value>Details of properties for the worklog. Optional when creating or updating a worklog.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The URL of the worklog item.
        /// </summary>
        /// <value>The URL of the worklog item.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
        /// </summary>
        /// <value>The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.</value>
        [DataMember(Name = "started", EmitDefaultValue = false)]
        public DateTime Started { get; set; }

        /// <summary>
        /// The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if &#x60;timeSpentSeconds&#x60; isn&#39;t provided. Optional when updating a worklog. Cannot be provided if &#x60;timeSpentSecond&#x60; is provided.
        /// </summary>
        /// <value>The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if &#x60;timeSpentSeconds&#x60; isn&#39;t provided. Optional when updating a worklog. Cannot be provided if &#x60;timeSpentSecond&#x60; is provided.</value>
        [DataMember(Name = "timeSpent", EmitDefaultValue = false)]
        public string TimeSpent { get; set; }

        /// <summary>
        /// The time in seconds spent working on the issue. Required when creating a worklog if &#x60;timeSpent&#x60; isn&#39;t provided. Optional when updating a worklog. Cannot be provided if &#x60;timeSpent&#x60; is provided.
        /// </summary>
        /// <value>The time in seconds spent working on the issue. Required when creating a worklog if &#x60;timeSpent&#x60; isn&#39;t provided. Optional when updating a worklog. Cannot be provided if &#x60;timeSpent&#x60; is provided.</value>
        [DataMember(Name = "timeSpentSeconds", EmitDefaultValue = false)]
        public long TimeSpentSeconds { get; set; }

        /// <summary>
        /// Gets or Sets UpdateAuthor
        /// </summary>
        [DataMember(Name = "updateAuthor", EmitDefaultValue = false)]
        public WorklogUpdateAuthor UpdateAuthor { get; set; }

        /// <summary>
        /// The datetime on which the worklog was last updated.
        /// </summary>
        /// <value>The datetime on which the worklog was last updated.</value>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public DateTime Updated { get; private set; }

        /// <summary>
        /// Returns false as Updated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdated()
        {
            return false;
        }
        /// <summary>
        /// Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
        /// </summary>
        /// <value>Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.</value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public Visibility Visibility { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Worklog {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueId: ").Append(IssueId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  TimeSpentSeconds: ").Append(TimeSpentSeconds).Append("\n");
            sb.Append("  UpdateAuthor: ").Append(UpdateAuthor).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
