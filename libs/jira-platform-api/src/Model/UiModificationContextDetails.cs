/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The details of a UI modification&#39;s context, which define where to activate the UI modification.
    /// </summary>
    [DataContract(Name = "UiModificationContextDetails")]
    public partial class UiModificationContextDetails : IValidatableObject
    {
        /// <summary>
        /// The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create) and &#x60;IssueView&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
        /// </summary>
        /// <value>The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create) and &#x60;IssueView&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ViewTypeEnum
        {
            /// <summary>
            /// Enum GIC for value: GIC
            /// </summary>
            [EnumMember(Value = "GIC")]
            GIC = 1,

            /// <summary>
            /// Enum IssueView for value: IssueView
            /// </summary>
            [EnumMember(Value = "IssueView")]
            IssueView = 2
        }


        /// <summary>
        /// The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create) and &#x60;IssueView&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
        /// </summary>
        /// <value>The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create) and &#x60;IssueView&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.</value>
        [DataMember(Name = "viewType", EmitDefaultValue = false)]
        public ViewTypeEnum? ViewType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UiModificationContextDetails" /> class.
        /// </summary>
        /// <param name="issueTypeId">The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard..</param>
        /// <param name="projectId">The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard..</param>
        /// <param name="viewType">The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create) and &#x60;IssueView&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard..</param>
        public UiModificationContextDetails(string issueTypeId = default(string), string projectId = default(string), ViewTypeEnum? viewType = default(ViewTypeEnum?))
        {
            this.IssueTypeId = issueTypeId;
            this.ProjectId = projectId;
            this.ViewType = viewType;
        }

        /// <summary>
        /// The ID of the UI modification context.
        /// </summary>
        /// <value>The ID of the UI modification context.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Whether a context is available. For example, when a project is deleted the context becomes unavailable.
        /// </summary>
        /// <value>Whether a context is available. For example, when a project is deleted the context becomes unavailable.</value>
        [DataMember(Name = "isAvailable", EmitDefaultValue = true)]
        public bool IsAvailable { get; private set; }

        /// <summary>
        /// Returns false as IsAvailable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAvailable()
        {
            return false;
        }
        /// <summary>
        /// The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.
        /// </summary>
        /// <value>The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.</value>
        [DataMember(Name = "issueTypeId", EmitDefaultValue = false)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.
        /// </summary>
        /// <value>The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UiModificationContextDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  IssueTypeId: ").Append(IssueTypeId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ViewType: ").Append(ViewType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
