/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// A list of custom field details.
    /// </summary>
    [DataContract(Name = "ConnectCustomFieldValue")]
    public partial class ConnectCustomFieldValue : IValidatableObject
    {
        /// <summary>
        /// The type of custom field.
        /// </summary>
        /// <value>The type of custom field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum StringIssueField for value: StringIssueField
            /// </summary>
            [EnumMember(Value = "StringIssueField")]
            StringIssueField = 1,

            /// <summary>
            /// Enum NumberIssueField for value: NumberIssueField
            /// </summary>
            [EnumMember(Value = "NumberIssueField")]
            NumberIssueField = 2,

            /// <summary>
            /// Enum RichTextIssueField for value: RichTextIssueField
            /// </summary>
            [EnumMember(Value = "RichTextIssueField")]
            RichTextIssueField = 3,

            /// <summary>
            /// Enum SingleSelectIssueField for value: SingleSelectIssueField
            /// </summary>
            [EnumMember(Value = "SingleSelectIssueField")]
            SingleSelectIssueField = 4,

            /// <summary>
            /// Enum MultiSelectIssueField for value: MultiSelectIssueField
            /// </summary>
            [EnumMember(Value = "MultiSelectIssueField")]
            MultiSelectIssueField = 5,

            /// <summary>
            /// Enum TextIssueField for value: TextIssueField
            /// </summary>
            [EnumMember(Value = "TextIssueField")]
            TextIssueField = 6
        }


        /// <summary>
        /// The type of custom field.
        /// </summary>
        /// <value>The type of custom field.</value>
        [DataMember(Name = "_type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectCustomFieldValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectCustomFieldValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectCustomFieldValue" /> class.
        /// </summary>
        /// <param name="type">The type of custom field. (required).</param>
        /// <param name="fieldID">The custom field ID. (required).</param>
        /// <param name="issueID">The issue ID. (required).</param>
        /// <param name="number">The value of number type custom field when &#x60;_type&#x60; is &#x60;NumberIssueField&#x60;..</param>
        /// <param name="optionID">The value of single select and multiselect custom field type when &#x60;_type&#x60; is &#x60;SingleSelectIssueField&#x60; or &#x60;MultiSelectIssueField&#x60;..</param>
        /// <param name="richText">The value of richText type custom field when &#x60;_type&#x60; is &#x60;RichTextIssueField&#x60;..</param>
        /// <param name="varString">The value of string type custom field when &#x60;_type&#x60; is &#x60;StringIssueField&#x60;..</param>
        /// <param name="text">The value of of text custom field type when &#x60;_type&#x60; is &#x60;TextIssueField&#x60;..</param>
        public ConnectCustomFieldValue(TypeEnum type = default(TypeEnum), int fieldID = default(int), int issueID = default(int), decimal number = default(decimal), string optionID = default(string), string richText = default(string), string varString = default(string), string text = default(string))
        {
            this.Type = type;
            this.FieldID = fieldID;
            this.IssueID = issueID;
            this.Number = number;
            this.OptionID = optionID;
            this.RichText = richText;
            this.VarString = varString;
            this.Text = text;
        }

        /// <summary>
        /// The custom field ID.
        /// </summary>
        /// <value>The custom field ID.</value>
        [DataMember(Name = "fieldID", IsRequired = true, EmitDefaultValue = true)]
        public int FieldID { get; set; }

        /// <summary>
        /// The issue ID.
        /// </summary>
        /// <value>The issue ID.</value>
        [DataMember(Name = "issueID", IsRequired = true, EmitDefaultValue = true)]
        public int IssueID { get; set; }

        /// <summary>
        /// The value of number type custom field when &#x60;_type&#x60; is &#x60;NumberIssueField&#x60;.
        /// </summary>
        /// <value>The value of number type custom field when &#x60;_type&#x60; is &#x60;NumberIssueField&#x60;.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public decimal Number { get; set; }

        /// <summary>
        /// The value of single select and multiselect custom field type when &#x60;_type&#x60; is &#x60;SingleSelectIssueField&#x60; or &#x60;MultiSelectIssueField&#x60;.
        /// </summary>
        /// <value>The value of single select and multiselect custom field type when &#x60;_type&#x60; is &#x60;SingleSelectIssueField&#x60; or &#x60;MultiSelectIssueField&#x60;.</value>
        [DataMember(Name = "optionID", EmitDefaultValue = false)]
        public string OptionID { get; set; }

        /// <summary>
        /// The value of richText type custom field when &#x60;_type&#x60; is &#x60;RichTextIssueField&#x60;.
        /// </summary>
        /// <value>The value of richText type custom field when &#x60;_type&#x60; is &#x60;RichTextIssueField&#x60;.</value>
        [DataMember(Name = "richText", EmitDefaultValue = false)]
        public string RichText { get; set; }

        /// <summary>
        /// The value of string type custom field when &#x60;_type&#x60; is &#x60;StringIssueField&#x60;.
        /// </summary>
        /// <value>The value of string type custom field when &#x60;_type&#x60; is &#x60;StringIssueField&#x60;.</value>
        [DataMember(Name = "string", EmitDefaultValue = false)]
        public string VarString { get; set; }

        /// <summary>
        /// The value of of text custom field type when &#x60;_type&#x60; is &#x60;TextIssueField&#x60;.
        /// </summary>
        /// <value>The value of of text custom field type when &#x60;_type&#x60; is &#x60;TextIssueField&#x60;.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectCustomFieldValue {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FieldID: ").Append(FieldID).Append("\n");
            sb.Append("  IssueID: ").Append(IssueID).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OptionID: ").Append(OptionID).Append("\n");
            sb.Append("  RichText: ").Append(RichText).Append("\n");
            sb.Append("  VarString: ").Append(VarString).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
