/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Filter for a User Picker (single) custom field.
    /// </summary>
    [DataContract(Name = "UserFilter")]
    public partial class UserFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFilter" /> class.
        /// </summary>
        /// <param name="enabled">Whether the filter is enabled. (required).</param>
        /// <param name="groups">User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided..</param>
        /// <param name="roleIds">Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided..</param>
        public UserFilter(bool enabled = default(bool), List<string> groups = default(List<string>), List<long> roleIds = default(List<long>))
        {
            this.Enabled = enabled;
            this.Groups = groups;
            this.RoleIds = roleIds;
        }

        /// <summary>
        /// Whether the filter is enabled.
        /// </summary>
        /// <value>Whether the filter is enabled.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.
        /// </summary>
        /// <value>User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.</value>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.
        /// </summary>
        /// <value>Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.</value>
        [DataMember(Name = "roleIds", EmitDefaultValue = false)]
        public List<long> RoleIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserFilter {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  RoleIds: ").Append(RoleIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
