/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// WorkflowCapabilities
    /// </summary>
    [DataContract(Name = "WorkflowCapabilities")]
    public partial class WorkflowCapabilities : IValidatableObject
    {
        /// <summary>
        /// The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.
        /// </summary>
        /// <value>The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EditorScopeEnum
        {
            /// <summary>
            /// Enum PROJECT for value: PROJECT
            /// </summary>
            [EnumMember(Value = "PROJECT")]
            PROJECT = 1,

            /// <summary>
            /// Enum GLOBAL for value: GLOBAL
            /// </summary>
            [EnumMember(Value = "GLOBAL")]
            GLOBAL = 2
        }


        /// <summary>
        /// The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.
        /// </summary>
        /// <value>The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects.</value>
        [DataMember(Name = "editorScope", EmitDefaultValue = false)]
        public EditorScopeEnum? EditorScope { get; set; }
        /// <summary>
        /// The types of projects that this capability set is available for.
        /// </summary>
        /// <value>The types of projects that this capability set is available for.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProjectTypesEnum
        {
            /// <summary>
            /// Enum Software for value: software
            /// </summary>
            [EnumMember(Value = "software")]
            Software = 1,

            /// <summary>
            /// Enum ServiceDesk for value: service_desk
            /// </summary>
            [EnumMember(Value = "service_desk")]
            ServiceDesk = 2,

            /// <summary>
            /// Enum ProductDiscovery for value: product_discovery
            /// </summary>
            [EnumMember(Value = "product_discovery")]
            ProductDiscovery = 3,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 4,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 5
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowCapabilities" /> class.
        /// </summary>
        /// <param name="connectRules">The Connect provided ecosystem rules available..</param>
        /// <param name="editorScope">The scope of the workflow capabilities. &#x60;GLOBAL&#x60; for company-managed projects and &#x60;PROJECT&#x60; for team-managed projects..</param>
        /// <param name="forgeRules">The Forge provided ecosystem rules available..</param>
        /// <param name="projectTypes">The types of projects that this capability set is available for..</param>
        /// <param name="systemRules">The Atlassian provided system rules available..</param>
        /// <param name="triggerRules">The trigger rules available..</param>
        public WorkflowCapabilities(List<AvailableWorkflowConnectRule> connectRules = default(List<AvailableWorkflowConnectRule>), EditorScopeEnum? editorScope = default(EditorScopeEnum?), List<AvailableWorkflowForgeRule> forgeRules = default(List<AvailableWorkflowForgeRule>), ProjectTypesEnum projectTypes = default(ProjectTypesEnum), List<AvailableWorkflowSystemRule> systemRules = default(List<AvailableWorkflowSystemRule>), List<AvailableWorkflowTriggers> triggerRules = default(List<AvailableWorkflowTriggers>))
        {
            this.ConnectRules = connectRules;
            this.EditorScope = editorScope;
            this.ForgeRules = forgeRules;
            this.ProjectTypes = projectTypes;
            this.SystemRules = systemRules;
            this.TriggerRules = triggerRules;
        }

        /// <summary>
        /// The Connect provided ecosystem rules available.
        /// </summary>
        /// <value>The Connect provided ecosystem rules available.</value>
        [DataMember(Name = "connectRules", EmitDefaultValue = false)]
        public List<AvailableWorkflowConnectRule> ConnectRules { get; set; }

        /// <summary>
        /// The Forge provided ecosystem rules available.
        /// </summary>
        /// <value>The Forge provided ecosystem rules available.</value>
        [DataMember(Name = "forgeRules", EmitDefaultValue = false)]
        public List<AvailableWorkflowForgeRule> ForgeRules { get; set; }

        /// <summary>
        /// The types of projects that this capability set is available for.
        /// </summary>
        /// <value>The types of projects that this capability set is available for.</value>
        [DataMember(Name = "projectTypes", EmitDefaultValue = false)]
        public WorkflowCapabilities.ProjectTypesEnum ProjectTypes { get; set; }

        /// <summary>
        /// The Atlassian provided system rules available.
        /// </summary>
        /// <value>The Atlassian provided system rules available.</value>
        [DataMember(Name = "systemRules", EmitDefaultValue = false)]
        public List<AvailableWorkflowSystemRule> SystemRules { get; set; }

        /// <summary>
        /// The trigger rules available.
        /// </summary>
        /// <value>The trigger rules available.</value>
        [DataMember(Name = "triggerRules", EmitDefaultValue = false)]
        public List<AvailableWorkflowTriggers> TriggerRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowCapabilities {\n");
            sb.Append("  ConnectRules: ").Append(ConnectRules).Append("\n");
            sb.Append("  EditorScope: ").Append(EditorScope).Append("\n");
            sb.Append("  ForgeRules: ").Append(ForgeRules).Append("\n");
            sb.Append("  ProjectTypes: ").Append(ProjectTypes).Append("\n");
            sb.Append("  SystemRules: ").Append(SystemRules).Append("\n");
            sb.Append("  TriggerRules: ").Append(TriggerRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
