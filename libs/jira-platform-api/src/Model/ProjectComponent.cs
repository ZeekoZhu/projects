/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a project component.
    /// </summary>
    [DataContract(Name = "ProjectComponent")]
    public partial class ProjectComponent : IValidatableObject
    {
        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component.
        /// </summary>
        /// <value>The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssigneeTypeEnum
        {
            /// <summary>
            /// Enum PROJECTDEFAULT for value: PROJECT_DEFAULT
            /// </summary>
            [EnumMember(Value = "PROJECT_DEFAULT")]
            PROJECTDEFAULT = 1,

            /// <summary>
            /// Enum COMPONENTLEAD for value: COMPONENT_LEAD
            /// </summary>
            [EnumMember(Value = "COMPONENT_LEAD")]
            COMPONENTLEAD = 2,

            /// <summary>
            /// Enum PROJECTLEAD for value: PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEAD = 3,

            /// <summary>
            /// Enum UNASSIGNED for value: UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNED = 4
        }


        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component.
        /// </summary>
        /// <value>The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component.</value>
        [DataMember(Name = "assigneeType", EmitDefaultValue = false)]
        public AssigneeTypeEnum? AssigneeType { get; set; }
        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
        /// </summary>
        /// <value>The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RealAssigneeTypeEnum
        {
            /// <summary>
            /// Enum PROJECTDEFAULT for value: PROJECT_DEFAULT
            /// </summary>
            [EnumMember(Value = "PROJECT_DEFAULT")]
            PROJECTDEFAULT = 1,

            /// <summary>
            /// Enum COMPONENTLEAD for value: COMPONENT_LEAD
            /// </summary>
            [EnumMember(Value = "COMPONENT_LEAD")]
            COMPONENTLEAD = 2,

            /// <summary>
            /// Enum PROJECTLEAD for value: PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEAD = 3,

            /// <summary>
            /// Enum UNASSIGNED for value: UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNED = 4
        }


        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
        /// </summary>
        /// <value>The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.</value>
        [DataMember(Name = "realAssigneeType", EmitDefaultValue = false)]
        public RealAssigneeTypeEnum? RealAssigneeType { get; set; }

        /// <summary>
        /// Returns false as RealAssigneeType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRealAssigneeType()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectComponent" /> class.
        /// </summary>
        /// <param name="assignee">assignee.</param>
        /// <param name="assigneeType">The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component..</param>
        /// <param name="description">The description for the component. Optional when creating or updating a component..</param>
        /// <param name="lead">lead.</param>
        /// <param name="leadAccountId">The accountId of the component&#39;s lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*..</param>
        /// <param name="leadUserName">This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details..</param>
        /// <param name="name">The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters..</param>
        /// <param name="project">The key of the project the component is assigned to. Required when creating a component. Can&#39;t be updated..</param>
        /// <param name="realAssignee">realAssignee.</param>
        public ProjectComponent(ProjectComponentAssignee assignee = default(ProjectComponentAssignee), AssigneeTypeEnum? assigneeType = default(AssigneeTypeEnum?), string description = default(string), ProjectComponentLead lead = default(ProjectComponentLead), string leadAccountId = default(string), string leadUserName = default(string), string name = default(string), string project = default(string), ProjectComponentRealAssignee realAssignee = default(ProjectComponentRealAssignee))
        {
            this.Assignee = assignee;
            this.AssigneeType = assigneeType;
            this.Description = description;
            this.Lead = lead;
            this.LeadAccountId = leadAccountId;
            this.LeadUserName = leadUserName;
            this.Name = name;
            this.Project = project;
            this.RealAssignee = realAssignee;
        }

        /// <summary>
        /// Compass component&#39;s ID. Can&#39;t be updated. Not required for creating a Project Component.
        /// </summary>
        /// <value>Compass component&#39;s ID. Can&#39;t be updated. Not required for creating a Project Component.</value>
        [DataMember(Name = "ari", EmitDefaultValue = false)]
        public string Ari { get; private set; }

        /// <summary>
        /// Returns false as Ari should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAri()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public ProjectComponentAssignee Assignee { get; set; }

        /// <summary>
        /// The description for the component. Optional when creating or updating a component.
        /// </summary>
        /// <value>The description for the component. Optional when creating or updating a component.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier for the component.
        /// </summary>
        /// <value>The unique identifier for the component.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.
        /// </summary>
        /// <value>Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.</value>
        [DataMember(Name = "isAssigneeTypeValid", EmitDefaultValue = true)]
        public bool IsAssigneeTypeValid { get; private set; }

        /// <summary>
        /// Returns false as IsAssigneeTypeValid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAssigneeTypeValid()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Lead
        /// </summary>
        [DataMember(Name = "lead", EmitDefaultValue = false)]
        public ProjectComponentLead Lead { get; set; }

        /// <summary>
        /// The accountId of the component&#39;s lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        /// <value>The accountId of the component&#39;s lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</value>
        [DataMember(Name = "leadAccountId", EmitDefaultValue = false)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        /// <value>This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</value>
        [DataMember(Name = "leadUserName", EmitDefaultValue = false)]
        public string LeadUserName { get; set; }

        /// <summary>
        /// Compass component&#39;s metadata. Can&#39;t be updated. Not required for creating a Project Component.
        /// </summary>
        /// <value>Compass component&#39;s metadata. Can&#39;t be updated. Not required for creating a Project Component.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; private set; }

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return false;
        }
        /// <summary>
        /// The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
        /// </summary>
        /// <value>The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The key of the project the component is assigned to. Required when creating a component. Can&#39;t be updated.
        /// </summary>
        /// <value>The key of the project the component is assigned to. Required when creating a component. Can&#39;t be updated.</value>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public string Project { get; set; }

        /// <summary>
        /// The ID of the project the component is assigned to.
        /// </summary>
        /// <value>The ID of the project the component is assigned to.</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public long ProjectId { get; private set; }

        /// <summary>
        /// Returns false as ProjectId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProjectId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets RealAssignee
        /// </summary>
        [DataMember(Name = "realAssignee", EmitDefaultValue = false)]
        public ProjectComponentRealAssignee RealAssignee { get; set; }

        /// <summary>
        /// The URL of the component.
        /// </summary>
        /// <value>The URL of the component.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectComponent {\n");
            sb.Append("  Ari: ").Append(Ari).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssigneeType: ").Append(AssigneeType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAssigneeTypeValid: ").Append(IsAssigneeTypeValid).Append("\n");
            sb.Append("  Lead: ").Append(Lead).Append("\n");
            sb.Append("  LeadAccountId: ").Append(LeadAccountId).Append("\n");
            sb.Append("  LeadUserName: ").Append(LeadUserName).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  RealAssignee: ").Append(RealAssignee).Append("\n");
            sb.Append("  RealAssigneeType: ").Append(RealAssigneeType).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LeadAccountId (string) maxLength
            if (this.LeadAccountId != null && this.LeadAccountId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeadAccountId, length must be less than 128.", new [] { "LeadAccountId" });
            }

            yield break;
        }
    }

}
