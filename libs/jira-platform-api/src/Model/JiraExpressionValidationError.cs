/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:   *  &#x60;line&#x60; and &#x60;column&#x60;  *  &#x60;expression&#x60;
    /// </summary>
    [DataContract(Name = "JiraExpressionValidationError")]
    public partial class JiraExpressionValidationError : IValidatableObject
    {
        /// <summary>
        /// The error type.
        /// </summary>
        /// <value>The error type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Syntax for value: syntax
            /// </summary>
            [EnumMember(Value = "syntax")]
            Syntax = 1,

            /// <summary>
            /// Enum Type for value: type
            /// </summary>
            [EnumMember(Value = "type")]
            Type = 2,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3
        }


        /// <summary>
        /// The error type.
        /// </summary>
        /// <value>The error type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JiraExpressionValidationError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JiraExpressionValidationError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JiraExpressionValidationError" /> class.
        /// </summary>
        /// <param name="column">The text column in which the error occurred..</param>
        /// <param name="expression">The part of the expression in which the error occurred..</param>
        /// <param name="line">The text line in which the error occurred..</param>
        /// <param name="message">Details about the error. (required).</param>
        /// <param name="type">The error type. (required).</param>
        public JiraExpressionValidationError(int column = default(int), string expression = default(string), int line = default(int), string message = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for JiraExpressionValidationError and cannot be null");
            }
            this.Message = message;
            this.Type = type;
            this.Column = column;
            this.Expression = expression;
            this.Line = line;
        }

        /// <summary>
        /// The text column in which the error occurred.
        /// </summary>
        /// <value>The text column in which the error occurred.</value>
        [DataMember(Name = "column", EmitDefaultValue = false)]
        public int Column { get; set; }

        /// <summary>
        /// The part of the expression in which the error occurred.
        /// </summary>
        /// <value>The part of the expression in which the error occurred.</value>
        [DataMember(Name = "expression", EmitDefaultValue = false)]
        public string Expression { get; set; }

        /// <summary>
        /// The text line in which the error occurred.
        /// </summary>
        /// <value>The text line in which the error occurred.</value>
        [DataMember(Name = "line", EmitDefaultValue = false)]
        public int Line { get; set; }

        /// <summary>
        /// Details about the error.
        /// </summary>
        /// <value>Details about the error.</value>
        /// <example>!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, &gt; encountered.</example>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JiraExpressionValidationError {\n");
            sb.Append("  Column: ").Append(Column).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Line: ").Append(Line).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
