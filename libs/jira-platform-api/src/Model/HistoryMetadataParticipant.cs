/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of user or system associated with a issue history metadata item.
    /// </summary>
    [DataContract(Name = "HistoryMetadataParticipant")]
    public partial class HistoryMetadataParticipant : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryMetadataParticipant" /> class.
        /// </summary>
        /// <param name="avatarUrl">The URL to an avatar for the user or system associated with a history record..</param>
        /// <param name="displayName">The display name of the user or system associated with a history record..</param>
        /// <param name="displayNameKey">The key of the display name of the user or system associated with a history record..</param>
        /// <param name="id">The ID of the user or system associated with a history record..</param>
        /// <param name="type">The type of the user or system associated with a history record..</param>
        /// <param name="url">The URL of the user or system associated with a history record..</param>
        public HistoryMetadataParticipant(string avatarUrl = default(string), string displayName = default(string), string displayNameKey = default(string), string id = default(string), string type = default(string), string url = default(string))
        {
            this.AvatarUrl = avatarUrl;
            this.DisplayName = displayName;
            this.DisplayNameKey = displayNameKey;
            this.Id = id;
            this.Type = type;
            this.Url = url;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The URL to an avatar for the user or system associated with a history record.
        /// </summary>
        /// <value>The URL to an avatar for the user or system associated with a history record.</value>
        [DataMember(Name = "avatarUrl", EmitDefaultValue = false)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// The display name of the user or system associated with a history record.
        /// </summary>
        /// <value>The display name of the user or system associated with a history record.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The key of the display name of the user or system associated with a history record.
        /// </summary>
        /// <value>The key of the display name of the user or system associated with a history record.</value>
        [DataMember(Name = "displayNameKey", EmitDefaultValue = false)]
        public string DisplayNameKey { get; set; }

        /// <summary>
        /// The ID of the user or system associated with a history record.
        /// </summary>
        /// <value>The ID of the user or system associated with a history record.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of the user or system associated with a history record.
        /// </summary>
        /// <value>The type of the user or system associated with a history record.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The URL of the user or system associated with a history record.
        /// </summary>
        /// <value>The URL of the user or system associated with a history record.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistoryMetadataParticipant {\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayNameKey: ").Append(DisplayNameKey).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
