/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a link between issues.
    /// </summary>
    [DataContract(Name = "IssueLink")]
    public partial class IssueLink : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueLink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssueLink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueLink" /> class.
        /// </summary>
        /// <param name="inwardIssue">Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;inward&#x60; field of the issue link type to label the link. (required).</param>
        /// <param name="outwardIssue">Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;outward&#x60; field of the issue link type to label the link. (required).</param>
        /// <param name="type">The type of link between the issues. (required).</param>
        public IssueLink(LinkedIssue inwardIssue = default(LinkedIssue), LinkedIssue outwardIssue = default(LinkedIssue), IssueLinkType type = default(IssueLinkType))
        {
            // to ensure "inwardIssue" is required (not null)
            if (inwardIssue == null)
            {
                throw new ArgumentNullException("inwardIssue is a required property for IssueLink and cannot be null");
            }
            this.InwardIssue = inwardIssue;
            // to ensure "outwardIssue" is required (not null)
            if (outwardIssue == null)
            {
                throw new ArgumentNullException("outwardIssue is a required property for IssueLink and cannot be null");
            }
            this.OutwardIssue = outwardIssue;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for IssueLink and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// The ID of the issue link.
        /// </summary>
        /// <value>The ID of the issue link.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;inward&#x60; field of the issue link type to label the link.
        /// </summary>
        /// <value>Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;inward&#x60; field of the issue link type to label the link.</value>
        [DataMember(Name = "inwardIssue", IsRequired = true, EmitDefaultValue = true)]
        public LinkedIssue InwardIssue { get; set; }

        /// <summary>
        /// Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;outward&#x60; field of the issue link type to label the link.
        /// </summary>
        /// <value>Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;outward&#x60; field of the issue link type to label the link.</value>
        [DataMember(Name = "outwardIssue", IsRequired = true, EmitDefaultValue = true)]
        public LinkedIssue OutwardIssue { get; set; }

        /// <summary>
        /// The URL of the issue link.
        /// </summary>
        /// <value>The URL of the issue link.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// The type of link between the issues.
        /// </summary>
        /// <value>The type of link between the issues.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public IssueLinkType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueLink {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InwardIssue: ").Append(InwardIssue).Append("\n");
            sb.Append("  OutwardIssue: ").Append(OutwardIssue).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
