/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Configuration of the announcement banner.
    /// </summary>
    [DataContract(Name = "AnnouncementBannerConfigurationUpdate")]
    public partial class AnnouncementBannerConfigurationUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnouncementBannerConfigurationUpdate" /> class.
        /// </summary>
        /// <param name="isDismissible">Flag indicating if the announcement banner can be dismissed by the user..</param>
        /// <param name="isEnabled">Flag indicating if the announcement banner is enabled or not..</param>
        /// <param name="message">The text on the announcement banner..</param>
        /// <param name="visibility">Visibility of the announcement banner. Can be public or private..</param>
        public AnnouncementBannerConfigurationUpdate(bool isDismissible = default(bool), bool isEnabled = default(bool), string message = default(string), string visibility = default(string))
        {
            this.IsDismissible = isDismissible;
            this.IsEnabled = isEnabled;
            this.Message = message;
            this.Visibility = visibility;
        }

        /// <summary>
        /// Flag indicating if the announcement banner can be dismissed by the user.
        /// </summary>
        /// <value>Flag indicating if the announcement banner can be dismissed by the user.</value>
        [DataMember(Name = "isDismissible", EmitDefaultValue = true)]
        public bool IsDismissible { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner is enabled or not.
        /// </summary>
        /// <value>Flag indicating if the announcement banner is enabled or not.</value>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// The text on the announcement banner.
        /// </summary>
        /// <value>The text on the announcement banner.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Visibility of the announcement banner. Can be public or private.
        /// </summary>
        /// <value>Visibility of the announcement banner. Can be public or private.</value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public string Visibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnnouncementBannerConfigurationUpdate {\n");
            sb.Append("  IsDismissible: ").Append(IsDismissible).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
