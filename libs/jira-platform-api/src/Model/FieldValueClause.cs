/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// A clause that asserts the current value of a field. For example, &#x60;summary ~ test&#x60;.
    /// </summary>
    [DataContract(Name = "FieldValueClause")]
    public partial class FieldValueClause : IValidatableObject
    {
        /// <summary>
        /// The operator between the field and operand.
        /// </summary>
        /// <value>The operator between the field and operand.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum Equal for value: &#x3D;
            /// </summary>
            [EnumMember(Value = "=")]
            Equal = 1,

            /// <summary>
            /// Enum NotEqual for value: !&#x3D;
            /// </summary>
            [EnumMember(Value = "!=")]
            NotEqual = 2,

            /// <summary>
            /// Enum GreaterThan for value: &gt;
            /// </summary>
            [EnumMember(Value = ">")]
            GreaterThan = 3,

            /// <summary>
            /// Enum LessThan for value: &lt;
            /// </summary>
            [EnumMember(Value = "<")]
            LessThan = 4,

            /// <summary>
            /// Enum GreaterThanOrEqualTo for value: &gt;&#x3D;
            /// </summary>
            [EnumMember(Value = ">=")]
            GreaterThanOrEqualTo = 5,

            /// <summary>
            /// Enum LessThanOrEqualTo for value: &lt;&#x3D;
            /// </summary>
            [EnumMember(Value = "<=")]
            LessThanOrEqualTo = 6,

            /// <summary>
            /// Enum In for value: in
            /// </summary>
            [EnumMember(Value = "in")]
            In = 7,

            /// <summary>
            /// Enum NotIn for value: not in
            /// </summary>
            [EnumMember(Value = "not in")]
            NotIn = 8,

            /// <summary>
            /// Enum Tilde for value: ~
            /// </summary>
            [EnumMember(Value = "~")]
            Tilde = 9,

            /// <summary>
            /// Enum TildeEqual for value: ~&#x3D;
            /// </summary>
            [EnumMember(Value = "~=")]
            TildeEqual = 10,

            /// <summary>
            /// Enum Is for value: is
            /// </summary>
            [EnumMember(Value = "is")]
            Is = 11,

            /// <summary>
            /// Enum IsNot for value: is not
            /// </summary>
            [EnumMember(Value = "is not")]
            IsNot = 12
        }


        /// <summary>
        /// The operator between the field and operand.
        /// </summary>
        /// <value>The operator between the field and operand.</value>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public OperatorEnum VarOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldValueClause" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldValueClause() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldValueClause" /> class.
        /// </summary>
        /// <param name="field">field (required).</param>
        /// <param name="operand">operand (required).</param>
        /// <param name="varOperator">The operator between the field and operand. (required).</param>
        public FieldValueClause(JqlQueryField field = default(JqlQueryField), JqlQueryClauseOperand operand = default(JqlQueryClauseOperand), OperatorEnum varOperator = default(OperatorEnum))
        {
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new ArgumentNullException("field is a required property for FieldValueClause and cannot be null");
            }
            this.Field = field;
            // to ensure "operand" is required (not null)
            if (operand == null)
            {
                throw new ArgumentNullException("operand is a required property for FieldValueClause and cannot be null");
            }
            this.Operand = operand;
            this.VarOperator = varOperator;
        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public JqlQueryField Field { get; set; }

        /// <summary>
        /// Gets or Sets Operand
        /// </summary>
        [DataMember(Name = "operand", IsRequired = true, EmitDefaultValue = true)]
        public JqlQueryClauseOperand Operand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldValueClause {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Operand: ").Append(Operand).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
