/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// A JQL query clause that consists of nested clauses. For example, &#x60;(labels in (urgent, blocker) OR lastCommentedBy &#x3D; currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, \&quot;A OR B AND C\&quot; is parsed as \&quot;(A OR B) AND C\&quot;. See Setting the precedence of operators for more information about precedence in JQL queries.&#x60;
    /// </summary>
    [DataContract(Name = "CompoundClause")]
    public partial class CompoundClause : IValidatableObject
    {
        /// <summary>
        /// The operator between the clauses.
        /// </summary>
        /// <value>The operator between the clauses.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum And for value: and
            /// </summary>
            [EnumMember(Value = "and")]
            And = 1,

            /// <summary>
            /// Enum Or for value: or
            /// </summary>
            [EnumMember(Value = "or")]
            Or = 2,

            /// <summary>
            /// Enum Not for value: not
            /// </summary>
            [EnumMember(Value = "not")]
            Not = 3
        }


        /// <summary>
        /// The operator between the clauses.
        /// </summary>
        /// <value>The operator between the clauses.</value>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public OperatorEnum VarOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundClause" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompoundClause() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompoundClause" /> class.
        /// </summary>
        /// <param name="clauses">The list of nested clauses. (required).</param>
        /// <param name="varOperator">The operator between the clauses. (required).</param>
        public CompoundClause(List<JqlQueryClause> clauses = default(List<JqlQueryClause>), OperatorEnum varOperator = default(OperatorEnum))
        {
            // to ensure "clauses" is required (not null)
            if (clauses == null)
            {
                throw new ArgumentNullException("clauses is a required property for CompoundClause and cannot be null");
            }
            this.Clauses = clauses;
            this.VarOperator = varOperator;
        }

        /// <summary>
        /// The list of nested clauses.
        /// </summary>
        /// <value>The list of nested clauses.</value>
        [DataMember(Name = "clauses", IsRequired = true, EmitDefaultValue = true)]
        public List<JqlQueryClause> Clauses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompoundClause {\n");
            sb.Append("  Clauses: ").Append(Clauses).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
