/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a component with a count of the issues it contains.
    /// </summary>
    [DataContract(Name = "ComponentWithIssueCount")]
    public partial class ComponentWithIssueCount : IValidatableObject
    {
        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// </summary>
        /// <value>The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssigneeTypeEnum
        {
            /// <summary>
            /// Enum PROJECTDEFAULT for value: PROJECT_DEFAULT
            /// </summary>
            [EnumMember(Value = "PROJECT_DEFAULT")]
            PROJECTDEFAULT = 1,

            /// <summary>
            /// Enum COMPONENTLEAD for value: COMPONENT_LEAD
            /// </summary>
            [EnumMember(Value = "COMPONENT_LEAD")]
            COMPONENTLEAD = 2,

            /// <summary>
            /// Enum PROJECTLEAD for value: PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEAD = 3,

            /// <summary>
            /// Enum UNASSIGNED for value: UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNED = 4
        }


        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// </summary>
        /// <value>The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.</value>
        [DataMember(Name = "assigneeType", EmitDefaultValue = false)]
        public AssigneeTypeEnum? AssigneeType { get; set; }

        /// <summary>
        /// Returns false as AssigneeType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAssigneeType()
        {
            return false;
        }
        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
        /// </summary>
        /// <value>The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RealAssigneeTypeEnum
        {
            /// <summary>
            /// Enum PROJECTDEFAULT for value: PROJECT_DEFAULT
            /// </summary>
            [EnumMember(Value = "PROJECT_DEFAULT")]
            PROJECTDEFAULT = 1,

            /// <summary>
            /// Enum COMPONENTLEAD for value: COMPONENT_LEAD
            /// </summary>
            [EnumMember(Value = "COMPONENT_LEAD")]
            COMPONENTLEAD = 2,

            /// <summary>
            /// Enum PROJECTLEAD for value: PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEAD = 3,

            /// <summary>
            /// Enum UNASSIGNED for value: UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNED = 4
        }


        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
        /// </summary>
        /// <value>The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.</value>
        [DataMember(Name = "realAssigneeType", EmitDefaultValue = false)]
        public RealAssigneeTypeEnum? RealAssigneeType { get; set; }

        /// <summary>
        /// Returns false as RealAssigneeType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRealAssigneeType()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentWithIssueCount" /> class.
        /// </summary>
        /// <param name="assignee">The details of the user associated with &#x60;assigneeType&#x60;, if any. See &#x60;realAssignee&#x60; for details of the user assigned to issues created with this component..</param>
        /// <param name="lead">The user details for the component&#39;s lead user..</param>
        /// <param name="realAssignee">The user assigned to issues created with this component, when &#x60;assigneeType&#x60; does not identify a valid assignee..</param>
        public ComponentWithIssueCount(User assignee = default(User), User lead = default(User), User realAssignee = default(User))
        {
            this.Assignee = assignee;
            this.Lead = lead;
            this.RealAssignee = realAssignee;
        }

        /// <summary>
        /// The details of the user associated with &#x60;assigneeType&#x60;, if any. See &#x60;realAssignee&#x60; for details of the user assigned to issues created with this component.
        /// </summary>
        /// <value>The details of the user associated with &#x60;assigneeType&#x60;, if any. See &#x60;realAssignee&#x60; for details of the user assigned to issues created with this component.</value>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public User Assignee { get; set; }

        /// <summary>
        /// The description for the component.
        /// </summary>
        /// <value>The description for the component.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; private set; }

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return false;
        }
        /// <summary>
        /// The unique identifier for the component.
        /// </summary>
        /// <value>The unique identifier for the component.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.
        /// </summary>
        /// <value>Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.</value>
        [DataMember(Name = "isAssigneeTypeValid", EmitDefaultValue = true)]
        public bool IsAssigneeTypeValid { get; private set; }

        /// <summary>
        /// Returns false as IsAssigneeTypeValid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAssigneeTypeValid()
        {
            return false;
        }
        /// <summary>
        /// Count of issues for the component.
        /// </summary>
        /// <value>Count of issues for the component.</value>
        [DataMember(Name = "issueCount", EmitDefaultValue = false)]
        public long IssueCount { get; private set; }

        /// <summary>
        /// Returns false as IssueCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIssueCount()
        {
            return false;
        }
        /// <summary>
        /// The user details for the component&#39;s lead user.
        /// </summary>
        /// <value>The user details for the component&#39;s lead user.</value>
        [DataMember(Name = "lead", EmitDefaultValue = false)]
        public User Lead { get; set; }

        /// <summary>
        /// The name for the component.
        /// </summary>
        /// <value>The name for the component.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// The key of the project to which the component is assigned.
        /// </summary>
        /// <value>The key of the project to which the component is assigned.</value>
        [DataMember(Name = "project", EmitDefaultValue = false)]
        public string Project { get; private set; }

        /// <summary>
        /// Returns false as Project should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProject()
        {
            return false;
        }
        /// <summary>
        /// Not used.
        /// </summary>
        /// <value>Not used.</value>
        [DataMember(Name = "projectId", EmitDefaultValue = false)]
        public long ProjectId { get; private set; }

        /// <summary>
        /// Returns false as ProjectId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProjectId()
        {
            return false;
        }
        /// <summary>
        /// The user assigned to issues created with this component, when &#x60;assigneeType&#x60; does not identify a valid assignee.
        /// </summary>
        /// <value>The user assigned to issues created with this component, when &#x60;assigneeType&#x60; does not identify a valid assignee.</value>
        [DataMember(Name = "realAssignee", EmitDefaultValue = false)]
        public User RealAssignee { get; set; }

        /// <summary>
        /// The URL for this count of the issues contained in the component.
        /// </summary>
        /// <value>The URL for this count of the issues contained in the component.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComponentWithIssueCount {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssigneeType: ").Append(AssigneeType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAssigneeTypeValid: ").Append(IsAssigneeTypeValid).Append("\n");
            sb.Append("  IssueCount: ").Append(IssueCount).Append("\n");
            sb.Append("  Lead: ").Append(Lead).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  RealAssignee: ").Append(RealAssignee).Append("\n");
            sb.Append("  RealAssigneeType: ").Append(RealAssigneeType).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
