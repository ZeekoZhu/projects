/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a changed worklog.
    /// </summary>
    [DataContract(Name = "ChangedWorklog")]
    public partial class ChangedWorklog : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangedWorklog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ChangedWorklog()
        {
        }

        /// <summary>
        /// Details of properties associated with the change.
        /// </summary>
        /// <value>Details of properties associated with the change.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<EntityProperty> Properties { get; private set; }

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return false;
        }
        /// <summary>
        /// The datetime of the change.
        /// </summary>
        /// <value>The datetime of the change.</value>
        [DataMember(Name = "updatedTime", EmitDefaultValue = false)]
        public long UpdatedTime { get; private set; }

        /// <summary>
        /// Returns false as UpdatedTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedTime()
        {
            return false;
        }
        /// <summary>
        /// The ID of the worklog.
        /// </summary>
        /// <value>The ID of the worklog.</value>
        [DataMember(Name = "worklogId", EmitDefaultValue = false)]
        public long WorklogId { get; private set; }

        /// <summary>
        /// Returns false as WorklogId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWorklogId()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangedWorklog {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  WorklogId: ").Append(WorklogId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
