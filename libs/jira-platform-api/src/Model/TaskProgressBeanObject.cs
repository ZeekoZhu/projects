/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a task.
    /// </summary>
    [DataContract(Name = "TaskProgressBeanObject")]
    public partial class TaskProgressBeanObject : IValidatableObject
    {
        /// <summary>
        /// The status of the task.
        /// </summary>
        /// <value>The status of the task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ENQUEUED for value: ENQUEUED
            /// </summary>
            [EnumMember(Value = "ENQUEUED")]
            ENQUEUED = 1,

            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 2,

            /// <summary>
            /// Enum COMPLETE for value: COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE = 3,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4,

            /// <summary>
            /// Enum CANCELREQUESTED for value: CANCEL_REQUESTED
            /// </summary>
            [EnumMember(Value = "CANCEL_REQUESTED")]
            CANCELREQUESTED = 5,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 6,

            /// <summary>
            /// Enum DEAD for value: DEAD
            /// </summary>
            [EnumMember(Value = "DEAD")]
            DEAD = 7
        }


        /// <summary>
        /// The status of the task.
        /// </summary>
        /// <value>The status of the task.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskProgressBeanObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskProgressBeanObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskProgressBeanObject" /> class.
        /// </summary>
        /// <param name="description">The description of the task..</param>
        /// <param name="elapsedRuntime">The execution time of the task, in milliseconds. (required).</param>
        /// <param name="finished">A timestamp recording when the task was finished..</param>
        /// <param name="id">The ID of the task. (required).</param>
        /// <param name="lastUpdate">A timestamp recording when the task progress was last updated. (required).</param>
        /// <param name="message">Information about the progress of the task..</param>
        /// <param name="progress">The progress of the task, as a percentage complete. (required).</param>
        /// <param name="result">The result of the task execution..</param>
        /// <param name="self">The URL of the task. (required).</param>
        /// <param name="started">A timestamp recording when the task was started..</param>
        /// <param name="status">The status of the task. (required).</param>
        /// <param name="submitted">A timestamp recording when the task was submitted. (required).</param>
        /// <param name="submittedBy">The ID of the user who submitted the task. (required).</param>
        public TaskProgressBeanObject(string description = default(string), long elapsedRuntime = default(long), long finished = default(long), string id = default(string), long lastUpdate = default(long), string message = default(string), long progress = default(long), Object result = default(Object), string self = default(string), long started = default(long), StatusEnum status = default(StatusEnum), long submitted = default(long), long submittedBy = default(long))
        {
            this.ElapsedRuntime = elapsedRuntime;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for TaskProgressBeanObject and cannot be null");
            }
            this.Id = id;
            this.LastUpdate = lastUpdate;
            this.Progress = progress;
            // to ensure "self" is required (not null)
            if (self == null)
            {
                throw new ArgumentNullException("self is a required property for TaskProgressBeanObject and cannot be null");
            }
            this.Self = self;
            this.Status = status;
            this.Submitted = submitted;
            this.SubmittedBy = submittedBy;
            this.Description = description;
            this.Finished = finished;
            this.Message = message;
            this.Result = result;
            this.Started = started;
        }

        /// <summary>
        /// The description of the task.
        /// </summary>
        /// <value>The description of the task.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The execution time of the task, in milliseconds.
        /// </summary>
        /// <value>The execution time of the task, in milliseconds.</value>
        [DataMember(Name = "elapsedRuntime", IsRequired = true, EmitDefaultValue = true)]
        public long ElapsedRuntime { get; set; }

        /// <summary>
        /// A timestamp recording when the task was finished.
        /// </summary>
        /// <value>A timestamp recording when the task was finished.</value>
        [DataMember(Name = "finished", EmitDefaultValue = false)]
        public long Finished { get; set; }

        /// <summary>
        /// The ID of the task.
        /// </summary>
        /// <value>The ID of the task.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp recording when the task progress was last updated.
        /// </summary>
        /// <value>A timestamp recording when the task progress was last updated.</value>
        [DataMember(Name = "lastUpdate", IsRequired = true, EmitDefaultValue = true)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Information about the progress of the task.
        /// </summary>
        /// <value>Information about the progress of the task.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// The progress of the task, as a percentage complete.
        /// </summary>
        /// <value>The progress of the task, as a percentage complete.</value>
        [DataMember(Name = "progress", IsRequired = true, EmitDefaultValue = true)]
        public long Progress { get; set; }

        /// <summary>
        /// The result of the task execution.
        /// </summary>
        /// <value>The result of the task execution.</value>
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public Object Result { get; set; }

        /// <summary>
        /// The URL of the task.
        /// </summary>
        /// <value>The URL of the task.</value>
        [DataMember(Name = "self", IsRequired = true, EmitDefaultValue = true)]
        public string Self { get; set; }

        /// <summary>
        /// A timestamp recording when the task was started.
        /// </summary>
        /// <value>A timestamp recording when the task was started.</value>
        [DataMember(Name = "started", EmitDefaultValue = false)]
        public long Started { get; set; }

        /// <summary>
        /// A timestamp recording when the task was submitted.
        /// </summary>
        /// <value>A timestamp recording when the task was submitted.</value>
        [DataMember(Name = "submitted", IsRequired = true, EmitDefaultValue = true)]
        public long Submitted { get; set; }

        /// <summary>
        /// The ID of the user who submitted the task.
        /// </summary>
        /// <value>The ID of the user who submitted the task.</value>
        [DataMember(Name = "submittedBy", IsRequired = true, EmitDefaultValue = true)]
        public long SubmittedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskProgressBeanObject {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ElapsedRuntime: ").Append(ElapsedRuntime).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Submitted: ").Append(Submitted).Append("\n");
            sb.Append("  SubmittedBy: ").Append(SubmittedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
