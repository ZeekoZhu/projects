/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The user or group being granted the permission. It consists of a &#x60;type&#x60; and a type-dependent &#x60;parameter&#x60;. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    /// </summary>
    [DataContract(Name = "SecurityLevelMember_holder")]
    public partial class SecurityLevelMemberHolder : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityLevelMemberHolder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityLevelMemberHolder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityLevelMemberHolder" /> class.
        /// </summary>
        /// <param name="varParameter">As a group&#39;s name can change, use of &#x60;value&#x60; is recommended. The identifier associated withthe &#x60;type&#x60; value that defines the holder of the permission..</param>
        /// <param name="type">The type of permission holder. (required).</param>
        /// <param name="value">The identifier associated with the &#x60;type&#x60; value that defines the holder of the permission..</param>
        public SecurityLevelMemberHolder(string varParameter = default(string), string type = default(string), string value = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for SecurityLevelMemberHolder and cannot be null");
            }
            this.Type = type;
            this.VarParameter = varParameter;
            this.Value = value;
        }

        /// <summary>
        /// Expand options that include additional permission holder details in the response.
        /// </summary>
        /// <value>Expand options that include additional permission holder details in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; private set; }

        /// <summary>
        /// Returns false as Expand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpand()
        {
            return false;
        }
        /// <summary>
        /// As a group&#39;s name can change, use of &#x60;value&#x60; is recommended. The identifier associated withthe &#x60;type&#x60; value that defines the holder of the permission.
        /// </summary>
        /// <value>As a group&#39;s name can change, use of &#x60;value&#x60; is recommended. The identifier associated withthe &#x60;type&#x60; value that defines the holder of the permission.</value>
        [DataMember(Name = "parameter", EmitDefaultValue = false)]
        public string VarParameter { get; set; }

        /// <summary>
        /// The type of permission holder.
        /// </summary>
        /// <value>The type of permission holder.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The identifier associated with the &#x60;type&#x60; value that defines the holder of the permission.
        /// </summary>
        /// <value>The identifier associated with the &#x60;type&#x60; value that defines the holder of the permission.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityLevelMemberHolder {\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  VarParameter: ").Append(VarParameter).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
