/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Change the order of issue resolutions.
    /// </summary>
    [DataContract(Name = "ReorderIssueResolutionsRequest")]
    public partial class ReorderIssueResolutionsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReorderIssueResolutionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReorderIssueResolutionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReorderIssueResolutionsRequest" /> class.
        /// </summary>
        /// <param name="after">The ID of the resolution. Required if &#x60;position&#x60; isn&#39;t provided..</param>
        /// <param name="ids">The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID. (required).</param>
        /// <param name="position">The position for issue resolutions to be moved to. Required if &#x60;after&#x60; isn&#39;t provided..</param>
        public ReorderIssueResolutionsRequest(string after = default(string), List<string> ids = default(List<string>), string position = default(string))
        {
            // to ensure "ids" is required (not null)
            if (ids == null)
            {
                throw new ArgumentNullException("ids is a required property for ReorderIssueResolutionsRequest and cannot be null");
            }
            this.Ids = ids;
            this.After = after;
            this.Position = position;
        }

        /// <summary>
        /// The ID of the resolution. Required if &#x60;position&#x60; isn&#39;t provided.
        /// </summary>
        /// <value>The ID of the resolution. Required if &#x60;position&#x60; isn&#39;t provided.</value>
        [DataMember(Name = "after", EmitDefaultValue = false)]
        public string After { get; set; }

        /// <summary>
        /// The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.
        /// </summary>
        /// <value>The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.</value>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// The position for issue resolutions to be moved to. Required if &#x60;after&#x60; isn&#39;t provided.
        /// </summary>
        /// <value>The position for issue resolutions to be moved to. Required if &#x60;after&#x60; isn&#39;t provided.</value>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public string Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReorderIssueResolutionsRequest {\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
