/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a user assigned to a project role.
    /// </summary>
    [DataContract(Name = "RoleActor")]
    public partial class RoleActor : IValidatableObject
    {
        /// <summary>
        /// The type of role actor.
        /// </summary>
        /// <value>The type of role actor.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum GroupRoleActor for value: atlassian-group-role-actor
            /// </summary>
            [EnumMember(Value = "atlassian-group-role-actor")]
            GroupRoleActor = 1,

            /// <summary>
            /// Enum UserRoleActor for value: atlassian-user-role-actor
            /// </summary>
            [EnumMember(Value = "atlassian-user-role-actor")]
            UserRoleActor = 2
        }


        /// <summary>
        /// The type of role actor.
        /// </summary>
        /// <value>The type of role actor.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoleActor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public RoleActor()
        {
        }

        /// <summary>
        /// Gets or Sets ActorGroup
        /// </summary>
        [DataMember(Name = "actorGroup", EmitDefaultValue = false)]
        public ProjectRoleGroup ActorGroup { get; private set; }

        /// <summary>
        /// Returns false as ActorGroup should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActorGroup()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ActorUser
        /// </summary>
        [DataMember(Name = "actorUser", EmitDefaultValue = false)]
        public ProjectRoleUser ActorUser { get; private set; }

        /// <summary>
        /// Returns false as ActorUser should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActorUser()
        {
            return false;
        }
        /// <summary>
        /// The avatar of the role actor.
        /// </summary>
        /// <value>The avatar of the role actor.</value>
        [DataMember(Name = "avatarUrl", EmitDefaultValue = false)]
        public string AvatarUrl { get; private set; }

        /// <summary>
        /// Returns false as AvatarUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAvatarUrl()
        {
            return false;
        }
        /// <summary>
        /// The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user&#39;s name.
        /// </summary>
        /// <value>The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user&#39;s name.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Returns false as DisplayName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisplayName()
        {
            return false;
        }
        /// <summary>
        /// The ID of the role actor.
        /// </summary>
        /// <value>The ID of the role actor.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        /// <value>This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RoleActor {\n");
            sb.Append("  ActorGroup: ").Append(ActorGroup).Append("\n");
            sb.Append("  ActorUser: ").Append(ActorUser).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
