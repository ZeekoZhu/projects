/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of an issue transition.
    /// </summary>
    [DataContract(Name = "IssueTransition")]
    public partial class IssueTransition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTransition" /> class.
        /// </summary>
        /// <param name="id">The ID of the issue transition. Required when specifying a transition to undertake..</param>
        /// <param name="looped">looped.</param>
        /// <param name="to">to.</param>
        public IssueTransition(string id = default(string), bool looped = default(bool), IssueTransitionTo to = default(IssueTransitionTo))
        {
            this.Id = id;
            this.Looped = looped;
            this.To = to;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Expand options that include additional transition details in the response.
        /// </summary>
        /// <value>Expand options that include additional transition details in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; private set; }

        /// <summary>
        /// Returns false as Expand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpand()
        {
            return false;
        }
        /// <summary>
        /// Details of the fields associated with the issue transition screen. Use this information to populate &#x60;fields&#x60; and &#x60;update&#x60; in a transition request.
        /// </summary>
        /// <value>Details of the fields associated with the issue transition screen. Use this information to populate &#x60;fields&#x60; and &#x60;update&#x60; in a transition request.</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Dictionary<string, FieldMetadata> Fields { get; private set; }

        /// <summary>
        /// Returns false as Fields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFields()
        {
            return false;
        }
        /// <summary>
        /// Whether there is a screen associated with the issue transition.
        /// </summary>
        /// <value>Whether there is a screen associated with the issue transition.</value>
        [DataMember(Name = "hasScreen", EmitDefaultValue = true)]
        public bool HasScreen { get; private set; }

        /// <summary>
        /// Returns false as HasScreen should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasScreen()
        {
            return false;
        }
        /// <summary>
        /// The ID of the issue transition. Required when specifying a transition to undertake.
        /// </summary>
        /// <value>The ID of the issue transition. Required when specifying a transition to undertake.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the transition is available to be performed.
        /// </summary>
        /// <value>Whether the transition is available to be performed.</value>
        [DataMember(Name = "isAvailable", EmitDefaultValue = true)]
        public bool IsAvailable { get; private set; }

        /// <summary>
        /// Returns false as IsAvailable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAvailable()
        {
            return false;
        }
        /// <summary>
        /// Whether the issue has to meet criteria before the issue transition is applied.
        /// </summary>
        /// <value>Whether the issue has to meet criteria before the issue transition is applied.</value>
        [DataMember(Name = "isConditional", EmitDefaultValue = true)]
        public bool IsConditional { get; private set; }

        /// <summary>
        /// Returns false as IsConditional should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsConditional()
        {
            return false;
        }
        /// <summary>
        /// Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
        /// </summary>
        /// <value>Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.</value>
        [DataMember(Name = "isGlobal", EmitDefaultValue = true)]
        public bool IsGlobal { get; private set; }

        /// <summary>
        /// Returns false as IsGlobal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsGlobal()
        {
            return false;
        }
        /// <summary>
        /// Whether this is the initial issue transition for the workflow.
        /// </summary>
        /// <value>Whether this is the initial issue transition for the workflow.</value>
        [DataMember(Name = "isInitial", EmitDefaultValue = true)]
        public bool IsInitial { get; private set; }

        /// <summary>
        /// Returns false as IsInitial should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsInitial()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Looped
        /// </summary>
        [DataMember(Name = "looped", EmitDefaultValue = true)]
        public bool Looped { get; set; }

        /// <summary>
        /// The name of the issue transition.
        /// </summary>
        /// <value>The name of the issue transition.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public IssueTransitionTo To { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueTransition {\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  HasScreen: ").Append(HasScreen).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  IsConditional: ").Append(IsConditional).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("  IsInitial: ").Append(IsInitial).Append("\n");
            sb.Append("  Looped: ").Append(Looped).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
