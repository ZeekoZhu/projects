/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of an avatar.
    /// </summary>
    [DataContract(Name = "Avatar")]
    public partial class Avatar : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Avatar" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Avatar()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Avatar" /> class.
        /// </summary>
        /// <param name="id">The ID of the avatar. (required).</param>
        public Avatar(string id = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Avatar and cannot be null");
            }
            this.Id = id;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The file name of the avatar icon. Returned for system avatars.
        /// </summary>
        /// <value>The file name of the avatar icon. Returned for system avatars.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; private set; }

        /// <summary>
        /// Returns false as FileName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFileName()
        {
            return false;
        }
        /// <summary>
        /// The ID of the avatar.
        /// </summary>
        /// <value>The ID of the avatar.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the avatar can be deleted.
        /// </summary>
        /// <value>Whether the avatar can be deleted.</value>
        [DataMember(Name = "isDeletable", EmitDefaultValue = true)]
        public bool IsDeletable { get; private set; }

        /// <summary>
        /// Returns false as IsDeletable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDeletable()
        {
            return false;
        }
        /// <summary>
        /// Whether the avatar is used in Jira. For example, shown as a project&#39;s avatar.
        /// </summary>
        /// <value>Whether the avatar is used in Jira. For example, shown as a project&#39;s avatar.</value>
        [DataMember(Name = "isSelected", EmitDefaultValue = true)]
        public bool IsSelected { get; private set; }

        /// <summary>
        /// Returns false as IsSelected should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSelected()
        {
            return false;
        }
        /// <summary>
        /// Whether the avatar is a system avatar.
        /// </summary>
        /// <value>Whether the avatar is a system avatar.</value>
        [DataMember(Name = "isSystemAvatar", EmitDefaultValue = true)]
        public bool IsSystemAvatar { get; private set; }

        /// <summary>
        /// Returns false as IsSystemAvatar should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSystemAvatar()
        {
            return false;
        }
        /// <summary>
        /// The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
        /// </summary>
        /// <value>The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.</value>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; private set; }

        /// <summary>
        /// Returns false as Owner should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOwner()
        {
            return false;
        }
        /// <summary>
        /// The list of avatar icon URLs.
        /// </summary>
        /// <value>The list of avatar icon URLs.</value>
        [DataMember(Name = "urls", EmitDefaultValue = false)]
        public Dictionary<string, string> Urls { get; private set; }

        /// <summary>
        /// Returns false as Urls should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrls()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Avatar {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeletable: ").Append(IsDeletable).Append("\n");
            sb.Append("  IsSelected: ").Append(IsSelected).Append("\n");
            sb.Append("  IsSystemAvatar: ").Append(IsSystemAvatar).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
