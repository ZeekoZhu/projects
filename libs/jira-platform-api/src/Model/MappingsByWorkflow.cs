/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
    /// </summary>
    [DataContract(Name = "MappingsByWorkflow")]
    public partial class MappingsByWorkflow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsByWorkflow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MappingsByWorkflow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsByWorkflow" /> class.
        /// </summary>
        /// <param name="newWorkflowId">The ID of the new workflow. (required).</param>
        /// <param name="oldWorkflowId">The ID of the old workflow. (required).</param>
        /// <param name="statusMappings">The list of status mappings. (required).</param>
        public MappingsByWorkflow(string newWorkflowId = default(string), string oldWorkflowId = default(string), List<WorkflowAssociationStatusMapping> statusMappings = default(List<WorkflowAssociationStatusMapping>))
        {
            // to ensure "newWorkflowId" is required (not null)
            if (newWorkflowId == null)
            {
                throw new ArgumentNullException("newWorkflowId is a required property for MappingsByWorkflow and cannot be null");
            }
            this.NewWorkflowId = newWorkflowId;
            // to ensure "oldWorkflowId" is required (not null)
            if (oldWorkflowId == null)
            {
                throw new ArgumentNullException("oldWorkflowId is a required property for MappingsByWorkflow and cannot be null");
            }
            this.OldWorkflowId = oldWorkflowId;
            // to ensure "statusMappings" is required (not null)
            if (statusMappings == null)
            {
                throw new ArgumentNullException("statusMappings is a required property for MappingsByWorkflow and cannot be null");
            }
            this.StatusMappings = statusMappings;
        }

        /// <summary>
        /// The ID of the new workflow.
        /// </summary>
        /// <value>The ID of the new workflow.</value>
        [DataMember(Name = "newWorkflowId", IsRequired = true, EmitDefaultValue = true)]
        public string NewWorkflowId { get; set; }

        /// <summary>
        /// The ID of the old workflow.
        /// </summary>
        /// <value>The ID of the old workflow.</value>
        [DataMember(Name = "oldWorkflowId", IsRequired = true, EmitDefaultValue = true)]
        public string OldWorkflowId { get; set; }

        /// <summary>
        /// The list of status mappings.
        /// </summary>
        /// <value>The list of status mappings.</value>
        [DataMember(Name = "statusMappings", IsRequired = true, EmitDefaultValue = true)]
        public List<WorkflowAssociationStatusMapping> StatusMappings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MappingsByWorkflow {\n");
            sb.Append("  NewWorkflowId: ").Append(NewWorkflowId).Append("\n");
            sb.Append("  OldWorkflowId: ").Append(OldWorkflowId).Append("\n");
            sb.Append("  StatusMappings: ").Append(StatusMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
