/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Errors
    /// </summary>
    [DataContract(Name = "Errors")]
    public partial class Errors : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Errors" /> class.
        /// </summary>
        /// <param name="issueIsSubtask">issueIsSubtask.</param>
        /// <param name="issuesInArchivedProjects">issuesInArchivedProjects.</param>
        /// <param name="issuesInUnlicensedProjects">issuesInUnlicensedProjects.</param>
        /// <param name="issuesNotFound">issuesNotFound.</param>
        public Errors(Error issueIsSubtask = default(Error), Error issuesInArchivedProjects = default(Error), Error issuesInUnlicensedProjects = default(Error), Error issuesNotFound = default(Error))
        {
            this.IssueIsSubtask = issueIsSubtask;
            this.IssuesInArchivedProjects = issuesInArchivedProjects;
            this.IssuesInUnlicensedProjects = issuesInUnlicensedProjects;
            this.IssuesNotFound = issuesNotFound;
        }

        /// <summary>
        /// Gets or Sets IssueIsSubtask
        /// </summary>
        [DataMember(Name = "issueIsSubtask", EmitDefaultValue = false)]
        public Error IssueIsSubtask { get; set; }

        /// <summary>
        /// Gets or Sets IssuesInArchivedProjects
        /// </summary>
        [DataMember(Name = "issuesInArchivedProjects", EmitDefaultValue = false)]
        public Error IssuesInArchivedProjects { get; set; }

        /// <summary>
        /// Gets or Sets IssuesInUnlicensedProjects
        /// </summary>
        [DataMember(Name = "issuesInUnlicensedProjects", EmitDefaultValue = false)]
        public Error IssuesInUnlicensedProjects { get; set; }

        /// <summary>
        /// Gets or Sets IssuesNotFound
        /// </summary>
        [DataMember(Name = "issuesNotFound", EmitDefaultValue = false)]
        public Error IssuesNotFound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Errors {\n");
            sb.Append("  IssueIsSubtask: ").Append(IssueIsSubtask).Append("\n");
            sb.Append("  IssuesInArchivedProjects: ").Append(IssuesInArchivedProjects).Append("\n");
            sb.Append("  IssuesInUnlicensedProjects: ").Append(IssuesInUnlicensedProjects).Append("\n");
            sb.Append("  IssuesNotFound: ").Append(IssuesNotFound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
