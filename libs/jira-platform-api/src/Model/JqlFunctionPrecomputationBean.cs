/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Jql function precomputation.
    /// </summary>
    [DataContract(Name = "JqlFunctionPrecomputationBean")]
    public partial class JqlFunctionPrecomputationBean : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JqlFunctionPrecomputationBean" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public JqlFunctionPrecomputationBean()
        {
        }

        /// <summary>
        /// The list of arguments function was invoked with.
        /// </summary>
        /// <value>The list of arguments function was invoked with.</value>
        [DataMember(Name = "arguments", EmitDefaultValue = false)]
        public List<string> Arguments { get; private set; }

        /// <summary>
        /// Returns false as Arguments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeArguments()
        {
            return false;
        }
        /// <summary>
        /// The timestamp of the precomputation creation.
        /// </summary>
        /// <value>The timestamp of the precomputation creation.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; private set; }

        /// <summary>
        /// Returns false as Created should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreated()
        {
            return false;
        }
        /// <summary>
        /// The error message to be displayed to the user.
        /// </summary>
        /// <value>The error message to be displayed to the user.</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; private set; }

        /// <summary>
        /// Returns false as Error should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeError()
        {
            return false;
        }
        /// <summary>
        /// The field the function was executed against.
        /// </summary>
        /// <value>The field the function was executed against.</value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; private set; }

        /// <summary>
        /// Returns false as Field should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeField()
        {
            return false;
        }
        /// <summary>
        /// The function key.
        /// </summary>
        /// <value>The function key.</value>
        [DataMember(Name = "functionKey", EmitDefaultValue = false)]
        public string FunctionKey { get; private set; }

        /// <summary>
        /// Returns false as FunctionKey should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFunctionKey()
        {
            return false;
        }
        /// <summary>
        /// The name of the function.
        /// </summary>
        /// <value>The name of the function.</value>
        [DataMember(Name = "functionName", EmitDefaultValue = false)]
        public string FunctionName { get; private set; }

        /// <summary>
        /// Returns false as FunctionName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFunctionName()
        {
            return false;
        }
        /// <summary>
        /// The id of the precomputation.
        /// </summary>
        /// <value>The id of the precomputation.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The operator in context of which function was executed.
        /// </summary>
        /// <value>The operator in context of which function was executed.</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string VarOperator { get; private set; }

        /// <summary>
        /// Returns false as VarOperator should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarOperator()
        {
            return false;
        }
        /// <summary>
        /// The timestamp of the precomputation last update.
        /// </summary>
        /// <value>The timestamp of the precomputation last update.</value>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public DateTime Updated { get; private set; }

        /// <summary>
        /// Returns false as Updated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdated()
        {
            return false;
        }
        /// <summary>
        /// The timestamp of the precomputation last usage.
        /// </summary>
        /// <value>The timestamp of the precomputation last usage.</value>
        [DataMember(Name = "used", EmitDefaultValue = false)]
        public DateTime Used { get; private set; }

        /// <summary>
        /// Returns false as Used should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsed()
        {
            return false;
        }
        /// <summary>
        /// The JQL fragment stored as the precomputation.
        /// </summary>
        /// <value>The JQL fragment stored as the precomputation.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; private set; }

        /// <summary>
        /// Returns false as Value should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValue()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JqlFunctionPrecomputationBean {\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  FunctionKey: ").Append(FunctionKey).Append("\n");
            sb.Append("  FunctionName: ").Append(FunctionName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
