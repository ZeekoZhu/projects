/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The transitions of the workflow.
    /// </summary>
    [DataContract(Name = "WorkflowTransitions")]
    public partial class WorkflowTransitions : IValidatableObject
    {
        /// <summary>
        /// The transition type.
        /// </summary>
        /// <value>The transition type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum INITIAL for value: INITIAL
            /// </summary>
            [EnumMember(Value = "INITIAL")]
            INITIAL = 1,

            /// <summary>
            /// Enum GLOBAL for value: GLOBAL
            /// </summary>
            [EnumMember(Value = "GLOBAL")]
            GLOBAL = 2,

            /// <summary>
            /// Enum DIRECTED for value: DIRECTED
            /// </summary>
            [EnumMember(Value = "DIRECTED")]
            DIRECTED = 3
        }


        /// <summary>
        /// The transition type.
        /// </summary>
        /// <value>The transition type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTransitions" /> class.
        /// </summary>
        /// <param name="actions">The post-functions of the transition..</param>
        /// <param name="conditions">conditions.</param>
        /// <param name="customIssueEventId">The custom event ID of the transition..</param>
        /// <param name="description">The description of the transition..</param>
        /// <param name="from">The statuses the transition can start from..</param>
        /// <param name="id">The ID of the transition..</param>
        /// <param name="name">The name of the transition..</param>
        /// <param name="properties">The properties of the transition..</param>
        /// <param name="to">to.</param>
        /// <param name="transitionScreen">transitionScreen.</param>
        /// <param name="triggers">The triggers of the transition..</param>
        /// <param name="type">The transition type..</param>
        /// <param name="validators">The validators of the transition..</param>
        public WorkflowTransitions(List<WorkflowRuleConfiguration> actions = default(List<WorkflowRuleConfiguration>), ConditionGroupConfiguration conditions = default(ConditionGroupConfiguration), string customIssueEventId = default(string), string description = default(string), List<WorkflowStatusAndPort> from = default(List<WorkflowStatusAndPort>), string id = default(string), string name = default(string), Dictionary<string, string> properties = default(Dictionary<string, string>), WorkflowStatusAndPort to = default(WorkflowStatusAndPort), WorkflowRuleConfiguration transitionScreen = default(WorkflowRuleConfiguration), List<WorkflowTrigger> triggers = default(List<WorkflowTrigger>), TypeEnum? type = default(TypeEnum?), List<WorkflowRuleConfiguration> validators = default(List<WorkflowRuleConfiguration>))
        {
            this.Actions = actions;
            this.Conditions = conditions;
            this.CustomIssueEventId = customIssueEventId;
            this.Description = description;
            this.From = from;
            this.Id = id;
            this.Name = name;
            this.Properties = properties;
            this.To = to;
            this.TransitionScreen = transitionScreen;
            this.Triggers = triggers;
            this.Type = type;
            this.Validators = validators;
        }

        /// <summary>
        /// The post-functions of the transition.
        /// </summary>
        /// <value>The post-functions of the transition.</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<WorkflowRuleConfiguration> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Conditions
        /// </summary>
        [DataMember(Name = "conditions", EmitDefaultValue = true)]
        public ConditionGroupConfiguration Conditions { get; set; }

        /// <summary>
        /// The custom event ID of the transition.
        /// </summary>
        /// <value>The custom event ID of the transition.</value>
        [DataMember(Name = "customIssueEventId", EmitDefaultValue = true)]
        public string CustomIssueEventId { get; set; }

        /// <summary>
        /// The description of the transition.
        /// </summary>
        /// <value>The description of the transition.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        /// <value>The statuses the transition can start from.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public List<WorkflowStatusAndPort> From { get; set; }

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        /// <value>The ID of the transition.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        /// <value>The name of the transition.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        /// <value>The properties of the transition.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = true)]
        public WorkflowStatusAndPort To { get; set; }

        /// <summary>
        /// Gets or Sets TransitionScreen
        /// </summary>
        [DataMember(Name = "transitionScreen", EmitDefaultValue = true)]
        public WorkflowRuleConfiguration TransitionScreen { get; set; }

        /// <summary>
        /// The triggers of the transition.
        /// </summary>
        /// <value>The triggers of the transition.</value>
        [DataMember(Name = "triggers", EmitDefaultValue = false)]
        public List<WorkflowTrigger> Triggers { get; set; }

        /// <summary>
        /// The validators of the transition.
        /// </summary>
        /// <value>The validators of the transition.</value>
        [DataMember(Name = "validators", EmitDefaultValue = false)]
        public List<WorkflowRuleConfiguration> Validators { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowTransitions {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  CustomIssueEventId: ").Append(CustomIssueEventId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  TransitionScreen: ").Append(TransitionScreen).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Validators: ").Append(Validators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
