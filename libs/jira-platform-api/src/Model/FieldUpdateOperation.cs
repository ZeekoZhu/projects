/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of an operation to perform on a field.
    /// </summary>
    [DataContract(Name = "FieldUpdateOperation")]
    public partial class FieldUpdateOperation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldUpdateOperation" /> class.
        /// </summary>
        /// <param name="add">The value to add to the field..</param>
        /// <param name="copy">The field value to copy from another issue..</param>
        /// <param name="edit">The value to edit in the field..</param>
        /// <param name="remove">The value to removed from the field..</param>
        /// <param name="set">The value to set in the field..</param>
        public FieldUpdateOperation(Object add = default(Object), Object copy = default(Object), Object edit = default(Object), Object remove = default(Object), Object set = default(Object))
        {
            this.Add = add;
            this.Copy = copy;
            this.Edit = edit;
            this.Remove = remove;
            this.Set = set;
        }

        /// <summary>
        /// The value to add to the field.
        /// </summary>
        /// <value>The value to add to the field.</value>
        /// <example>triaged</example>
        [DataMember(Name = "add", EmitDefaultValue = true)]
        public Object Add { get; set; }

        /// <summary>
        /// The field value to copy from another issue.
        /// </summary>
        /// <value>The field value to copy from another issue.</value>
        /// <example>{&quot;issuelinks&quot;:{&quot;sourceIssues&quot;:[{&quot;key&quot;:&quot;FP-5&quot;}]}}</example>
        [DataMember(Name = "copy", EmitDefaultValue = true)]
        public Object Copy { get; set; }

        /// <summary>
        /// The value to edit in the field.
        /// </summary>
        /// <value>The value to edit in the field.</value>
        /// <example>{&quot;originalEstimate&quot;:&quot;1w 1d&quot;,&quot;remainingEstimate&quot;:&quot;4d&quot;}</example>
        [DataMember(Name = "edit", EmitDefaultValue = true)]
        public Object Edit { get; set; }

        /// <summary>
        /// The value to removed from the field.
        /// </summary>
        /// <value>The value to removed from the field.</value>
        /// <example>blocker</example>
        [DataMember(Name = "remove", EmitDefaultValue = true)]
        public Object Remove { get; set; }

        /// <summary>
        /// The value to set in the field.
        /// </summary>
        /// <value>The value to set in the field.</value>
        /// <example>A new summary</example>
        [DataMember(Name = "set", EmitDefaultValue = true)]
        public Object Set { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldUpdateOperation {\n");
            sb.Append("  Add: ").Append(Add).Append("\n");
            sb.Append("  Copy: ").Append(Copy).Append("\n");
            sb.Append("  Edit: ").Append(Edit).Append("\n");
            sb.Append("  Remove: ").Append(Remove).Append("\n");
            sb.Append("  Set: ").Append(Set).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
