/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The details about a workflow validation error.
    /// </summary>
    [DataContract(Name = "WorkflowValidationError")]
    public partial class WorkflowValidationError : IValidatableObject
    {
        /// <summary>
        /// The validation error level.
        /// </summary>
        /// <value>The validation error level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum WARNING for value: WARNING
            /// </summary>
            [EnumMember(Value = "WARNING")]
            WARNING = 1,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 2
        }


        /// <summary>
        /// The validation error level.
        /// </summary>
        /// <value>The validation error level.</value>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public LevelEnum? Level { get; set; }
        /// <summary>
        /// The type of element the error or warning references.
        /// </summary>
        /// <value>The type of element the error or warning references.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum RULE for value: RULE
            /// </summary>
            [EnumMember(Value = "RULE")]
            RULE = 1,

            /// <summary>
            /// Enum STATUS for value: STATUS
            /// </summary>
            [EnumMember(Value = "STATUS")]
            STATUS = 2,

            /// <summary>
            /// Enum STATUSLAYOUT for value: STATUS_LAYOUT
            /// </summary>
            [EnumMember(Value = "STATUS_LAYOUT")]
            STATUSLAYOUT = 3,

            /// <summary>
            /// Enum STATUSPROPERTY for value: STATUS_PROPERTY
            /// </summary>
            [EnumMember(Value = "STATUS_PROPERTY")]
            STATUSPROPERTY = 4,

            /// <summary>
            /// Enum WORKFLOW for value: WORKFLOW
            /// </summary>
            [EnumMember(Value = "WORKFLOW")]
            WORKFLOW = 5,

            /// <summary>
            /// Enum TRANSITION for value: TRANSITION
            /// </summary>
            [EnumMember(Value = "TRANSITION")]
            TRANSITION = 6,

            /// <summary>
            /// Enum TRANSITIONPROPERTY for value: TRANSITION_PROPERTY
            /// </summary>
            [EnumMember(Value = "TRANSITION_PROPERTY")]
            TRANSITIONPROPERTY = 7,

            /// <summary>
            /// Enum SCOPE for value: SCOPE
            /// </summary>
            [EnumMember(Value = "SCOPE")]
            SCOPE = 8,

            /// <summary>
            /// Enum STATUSMAPPING for value: STATUS_MAPPING
            /// </summary>
            [EnumMember(Value = "STATUS_MAPPING")]
            STATUSMAPPING = 9,

            /// <summary>
            /// Enum TRIGGER for value: TRIGGER
            /// </summary>
            [EnumMember(Value = "TRIGGER")]
            TRIGGER = 10
        }


        /// <summary>
        /// The type of element the error or warning references.
        /// </summary>
        /// <value>The type of element the error or warning references.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowValidationError" /> class.
        /// </summary>
        /// <param name="code">An error code..</param>
        /// <param name="elementReference">elementReference.</param>
        /// <param name="level">The validation error level..</param>
        /// <param name="message">An error message..</param>
        /// <param name="type">The type of element the error or warning references..</param>
        public WorkflowValidationError(string code = default(string), WorkflowElementReference elementReference = default(WorkflowElementReference), LevelEnum? level = default(LevelEnum?), string message = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.Code = code;
            this.ElementReference = elementReference;
            this.Level = level;
            this.Message = message;
            this.Type = type;
        }

        /// <summary>
        /// An error code.
        /// </summary>
        /// <value>An error code.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ElementReference
        /// </summary>
        [DataMember(Name = "elementReference", EmitDefaultValue = false)]
        public WorkflowElementReference ElementReference { get; set; }

        /// <summary>
        /// An error message.
        /// </summary>
        /// <value>An error message.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowValidationError {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ElementReference: ").Append(ElementReference).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
