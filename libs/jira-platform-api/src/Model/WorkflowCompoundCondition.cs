/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// A compound workflow transition rule condition. This object returns &#x60;nodeType&#x60; as &#x60;compound&#x60;.
    /// </summary>
    [DataContract(Name = "WorkflowCompoundCondition")]
    public partial class WorkflowCompoundCondition : IValidatableObject
    {
        /// <summary>
        /// The compound condition operator.
        /// </summary>
        /// <value>The compound condition operator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            [EnumMember(Value = "AND")]
            AND = 1,

            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            [EnumMember(Value = "OR")]
            OR = 2
        }


        /// <summary>
        /// The compound condition operator.
        /// </summary>
        /// <value>The compound condition operator.</value>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = true)]
        public OperatorEnum VarOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowCompoundCondition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowCompoundCondition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowCompoundCondition" /> class.
        /// </summary>
        /// <param name="conditions">The list of workflow conditions. (required).</param>
        /// <param name="nodeType">nodeType (required).</param>
        /// <param name="varOperator">The compound condition operator. (required).</param>
        public WorkflowCompoundCondition(List<WorkflowCondition> conditions = default(List<WorkflowCondition>), string nodeType = default(string), OperatorEnum varOperator = default(OperatorEnum))
        {
            // to ensure "conditions" is required (not null)
            if (conditions == null)
            {
                throw new ArgumentNullException("conditions is a required property for WorkflowCompoundCondition and cannot be null");
            }
            this.Conditions = conditions;
            // to ensure "nodeType" is required (not null)
            if (nodeType == null)
            {
                throw new ArgumentNullException("nodeType is a required property for WorkflowCompoundCondition and cannot be null");
            }
            this.NodeType = nodeType;
            this.VarOperator = varOperator;
        }

        /// <summary>
        /// The list of workflow conditions.
        /// </summary>
        /// <value>The list of workflow conditions.</value>
        [DataMember(Name = "conditions", IsRequired = true, EmitDefaultValue = true)]
        public List<WorkflowCondition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets NodeType
        /// </summary>
        [DataMember(Name = "nodeType", IsRequired = true, EmitDefaultValue = true)]
        public string NodeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowCompoundCondition {\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
