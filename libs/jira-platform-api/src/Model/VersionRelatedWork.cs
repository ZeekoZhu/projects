/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Associated related work to a version
    /// </summary>
    [DataContract(Name = "VersionRelatedWork")]
    public partial class VersionRelatedWork : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionRelatedWork" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public VersionRelatedWork()
        {
        }

        /// <summary>
        /// The category of the related work
        /// </summary>
        /// <value>The category of the related work</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public string Category { get; private set; }

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return false;
        }
        /// <summary>
        /// The title of the related work
        /// </summary>
        /// <value>The title of the related work</value>
        [DataMember(Name = "issueId", EmitDefaultValue = false)]
        public long IssueId { get; private set; }

        /// <summary>
        /// Returns false as IssueId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIssueId()
        {
            return false;
        }
        /// <summary>
        /// The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it.
        /// </summary>
        /// <value>The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it.</value>
        [DataMember(Name = "relatedWorkId", EmitDefaultValue = false)]
        public string RelatedWorkId { get; private set; }

        /// <summary>
        /// Returns false as RelatedWorkId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedWorkId()
        {
            return false;
        }
        /// <summary>
        /// The title of the related work
        /// </summary>
        /// <value>The title of the related work</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; private set; }

        /// <summary>
        /// Returns false as Title should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTitle()
        {
            return false;
        }
        /// <summary>
        /// The URL of the related work
        /// </summary>
        /// <value>The URL of the related work</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionRelatedWork {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  IssueId: ").Append(IssueId).Append("\n");
            sb.Append("  RelatedWorkId: ").Append(RelatedWorkId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
