/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The Atlassian provided system rules available.
    /// </summary>
    [DataContract(Name = "AvailableWorkflowSystemRule")]
    public partial class AvailableWorkflowSystemRule : IValidatableObject
    {
        /// <summary>
        /// The rule type.
        /// </summary>
        /// <value>The rule type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuleTypeEnum
        {
            /// <summary>
            /// Enum Condition for value: Condition
            /// </summary>
            [EnumMember(Value = "Condition")]
            Condition = 1,

            /// <summary>
            /// Enum Validator for value: Validator
            /// </summary>
            [EnumMember(Value = "Validator")]
            Validator = 2,

            /// <summary>
            /// Enum Function for value: Function
            /// </summary>
            [EnumMember(Value = "Function")]
            Function = 3,

            /// <summary>
            /// Enum Screen for value: Screen
            /// </summary>
            [EnumMember(Value = "Screen")]
            Screen = 4
        }


        /// <summary>
        /// The rule type.
        /// </summary>
        /// <value>The rule type.</value>
        [DataMember(Name = "ruleType", IsRequired = true, EmitDefaultValue = true)]
        public RuleTypeEnum RuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableWorkflowSystemRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvailableWorkflowSystemRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableWorkflowSystemRule" /> class.
        /// </summary>
        /// <param name="description">The rule description. (required).</param>
        /// <param name="incompatibleRuleKeys">List of rules that conflict with this one. (required).</param>
        /// <param name="isAvailableForInitialTransition">Whether the rule can be added added to an initial transition. (required).</param>
        /// <param name="isVisible">Whether the rule is visible. (required).</param>
        /// <param name="name">The rule name. (required).</param>
        /// <param name="ruleKey">The rule key. (required).</param>
        /// <param name="ruleType">The rule type. (required).</param>
        public AvailableWorkflowSystemRule(string description = default(string), List<string> incompatibleRuleKeys = default(List<string>), bool isAvailableForInitialTransition = default(bool), bool isVisible = default(bool), string name = default(string), string ruleKey = default(string), RuleTypeEnum ruleType = default(RuleTypeEnum))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for AvailableWorkflowSystemRule and cannot be null");
            }
            this.Description = description;
            // to ensure "incompatibleRuleKeys" is required (not null)
            if (incompatibleRuleKeys == null)
            {
                throw new ArgumentNullException("incompatibleRuleKeys is a required property for AvailableWorkflowSystemRule and cannot be null");
            }
            this.IncompatibleRuleKeys = incompatibleRuleKeys;
            this.IsAvailableForInitialTransition = isAvailableForInitialTransition;
            this.IsVisible = isVisible;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AvailableWorkflowSystemRule and cannot be null");
            }
            this.Name = name;
            // to ensure "ruleKey" is required (not null)
            if (ruleKey == null)
            {
                throw new ArgumentNullException("ruleKey is a required property for AvailableWorkflowSystemRule and cannot be null");
            }
            this.RuleKey = ruleKey;
            this.RuleType = ruleType;
        }

        /// <summary>
        /// The rule description.
        /// </summary>
        /// <value>The rule description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// List of rules that conflict with this one.
        /// </summary>
        /// <value>List of rules that conflict with this one.</value>
        [DataMember(Name = "incompatibleRuleKeys", IsRequired = true, EmitDefaultValue = true)]
        public List<string> IncompatibleRuleKeys { get; set; }

        /// <summary>
        /// Whether the rule can be added added to an initial transition.
        /// </summary>
        /// <value>Whether the rule can be added added to an initial transition.</value>
        [DataMember(Name = "isAvailableForInitialTransition", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAvailableForInitialTransition { get; set; }

        /// <summary>
        /// Whether the rule is visible.
        /// </summary>
        /// <value>Whether the rule is visible.</value>
        [DataMember(Name = "isVisible", IsRequired = true, EmitDefaultValue = true)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// The rule name.
        /// </summary>
        /// <value>The rule name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The rule key.
        /// </summary>
        /// <value>The rule key.</value>
        [DataMember(Name = "ruleKey", IsRequired = true, EmitDefaultValue = true)]
        public string RuleKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AvailableWorkflowSystemRule {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IncompatibleRuleKeys: ").Append(IncompatibleRuleKeys).Append("\n");
            sb.Append("  IsAvailableForInitialTransition: ").Append(IsAvailableForInitialTransition).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RuleKey: ").Append(RuleKey).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
