/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a filter for exporting archived issues.
    /// </summary>
    [DataContract(Name = "ArchivedIssuesFilterRequest")]
    public partial class ArchivedIssuesFilterRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArchivedIssuesFilterRequest" /> class.
        /// </summary>
        /// <param name="archivedBy">List archived issues archived by a specified account ID..</param>
        /// <param name="archivedDateRange">archivedDateRange.</param>
        /// <param name="issueTypes">List archived issues with a specified issue type ID..</param>
        /// <param name="projects">List archived issues with a specified project key..</param>
        /// <param name="reporters">List archived issues where the reporter is a specified account ID..</param>
        public ArchivedIssuesFilterRequest(List<string> archivedBy = default(List<string>), DateRangeFilterRequest archivedDateRange = default(DateRangeFilterRequest), List<string> issueTypes = default(List<string>), List<string> projects = default(List<string>), List<string> reporters = default(List<string>))
        {
            this.ArchivedBy = archivedBy;
            this.ArchivedDateRange = archivedDateRange;
            this.IssueTypes = issueTypes;
            this.Projects = projects;
            this.Reporters = reporters;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// List archived issues archived by a specified account ID.
        /// </summary>
        /// <value>List archived issues archived by a specified account ID.</value>
        [DataMember(Name = "archivedBy", EmitDefaultValue = false)]
        public List<string> ArchivedBy { get; set; }

        /// <summary>
        /// Gets or Sets ArchivedDateRange
        /// </summary>
        [DataMember(Name = "archivedDateRange", EmitDefaultValue = false)]
        public DateRangeFilterRequest ArchivedDateRange { get; set; }

        /// <summary>
        /// List archived issues with a specified issue type ID.
        /// </summary>
        /// <value>List archived issues with a specified issue type ID.</value>
        [DataMember(Name = "issueTypes", EmitDefaultValue = false)]
        public List<string> IssueTypes { get; set; }

        /// <summary>
        /// List archived issues with a specified project key.
        /// </summary>
        /// <value>List archived issues with a specified project key.</value>
        [DataMember(Name = "projects", EmitDefaultValue = false)]
        public List<string> Projects { get; set; }

        /// <summary>
        /// List archived issues where the reporter is a specified account ID.
        /// </summary>
        /// <value>List archived issues where the reporter is a specified account ID.</value>
        [DataMember(Name = "reporters", EmitDefaultValue = false)]
        public List<string> Reporters { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArchivedIssuesFilterRequest {\n");
            sb.Append("  ArchivedBy: ").Append(ArchivedBy).Append("\n");
            sb.Append("  ArchivedDateRange: ").Append(ArchivedDateRange).Append("\n");
            sb.Append("  IssueTypes: ").Append(IssueTypes).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Reporters: ").Append(Reporters).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
