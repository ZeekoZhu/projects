/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// DetailedErrorCollection
    /// </summary>
    [DataContract(Name = "DetailedErrorCollection")]
    public partial class DetailedErrorCollection : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedErrorCollection" /> class.
        /// </summary>
        /// <param name="details">Map of objects representing additional details for an error.</param>
        /// <param name="errorMessages">The list of error messages produced by this operation. For example, \&quot;input parameter &#39;key&#39; must be provided\&quot;.</param>
        /// <param name="errors">The list of errors by parameter returned by the operation. For example,\&quot;projectKey\&quot;: \&quot;Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\&quot;.</param>
        public DetailedErrorCollection(Dictionary<string, Object> details = default(Dictionary<string, Object>), List<string> errorMessages = default(List<string>), Dictionary<string, string> errors = default(Dictionary<string, string>))
        {
            this.Details = details;
            this.ErrorMessages = errorMessages;
            this.Errors = errors;
        }

        /// <summary>
        /// Map of objects representing additional details for an error
        /// </summary>
        /// <value>Map of objects representing additional details for an error</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public Dictionary<string, Object> Details { get; set; }

        /// <summary>
        /// The list of error messages produced by this operation. For example, \&quot;input parameter &#39;key&#39; must be provided\&quot;
        /// </summary>
        /// <value>The list of error messages produced by this operation. For example, \&quot;input parameter &#39;key&#39; must be provided\&quot;</value>
        [DataMember(Name = "errorMessages", EmitDefaultValue = false)]
        public List<string> ErrorMessages { get; set; }

        /// <summary>
        /// The list of errors by parameter returned by the operation. For example,\&quot;projectKey\&quot;: \&quot;Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\&quot;
        /// </summary>
        /// <value>The list of errors by parameter returned by the operation. For example,\&quot;projectKey\&quot;: \&quot;Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\&quot;</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public Dictionary<string, string> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailedErrorCollection {\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  ErrorMessages: ").Append(ErrorMessages).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
