/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// JsonNode
    /// </summary>
    [DataContract(Name = "JsonNode")]
    public partial class JsonNode : IValidatableObject
    {
        /// <summary>
        /// Defines NumberType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NumberTypeEnum
        {
            /// <summary>
            /// Enum INT for value: INT
            /// </summary>
            [EnumMember(Value = "INT")]
            INT = 1,

            /// <summary>
            /// Enum LONG for value: LONG
            /// </summary>
            [EnumMember(Value = "LONG")]
            LONG = 2,

            /// <summary>
            /// Enum BIGINTEGER for value: BIG_INTEGER
            /// </summary>
            [EnumMember(Value = "BIG_INTEGER")]
            BIGINTEGER = 3,

            /// <summary>
            /// Enum FLOAT for value: FLOAT
            /// </summary>
            [EnumMember(Value = "FLOAT")]
            FLOAT = 4,

            /// <summary>
            /// Enum DOUBLE for value: DOUBLE
            /// </summary>
            [EnumMember(Value = "DOUBLE")]
            DOUBLE = 5,

            /// <summary>
            /// Enum BIGDECIMAL for value: BIG_DECIMAL
            /// </summary>
            [EnumMember(Value = "BIG_DECIMAL")]
            BIGDECIMAL = 6
        }


        /// <summary>
        /// Gets or Sets NumberType
        /// </summary>
        [DataMember(Name = "numberType", EmitDefaultValue = false)]
        public NumberTypeEnum? NumberType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonNode" /> class.
        /// </summary>
        /// <param name="array">array.</param>
        /// <param name="bigDecimal">bigDecimal.</param>
        /// <param name="bigInteger">bigInteger.</param>
        /// <param name="bigIntegerValue">bigIntegerValue.</param>
        /// <param name="binary">binary.</param>
        /// <param name="binaryValue">binaryValue.</param>
        /// <param name="boolean">boolean.</param>
        /// <param name="booleanValue">booleanValue.</param>
        /// <param name="containerNode">containerNode.</param>
        /// <param name="decimalValue">decimalValue.</param>
        /// <param name="varDouble">varDouble.</param>
        /// <param name="doubleValue">doubleValue.</param>
        /// <param name="elements">elements.</param>
        /// <param name="fieldNames">fieldNames.</param>
        /// <param name="fields">fields.</param>
        /// <param name="floatingPointNumber">floatingPointNumber.</param>
        /// <param name="varInt">varInt.</param>
        /// <param name="intValue">intValue.</param>
        /// <param name="integralNumber">integralNumber.</param>
        /// <param name="varLong">varLong.</param>
        /// <param name="longValue">longValue.</param>
        /// <param name="missingNode">missingNode.</param>
        /// <param name="varNull">varNull.</param>
        /// <param name="number">number.</param>
        /// <param name="numberType">numberType.</param>
        /// <param name="numberValue">numberValue.</param>
        /// <param name="varObject">varObject.</param>
        /// <param name="pojo">pojo.</param>
        /// <param name="textValue">textValue.</param>
        /// <param name="textual">textual.</param>
        /// <param name="valueAsBoolean">valueAsBoolean.</param>
        /// <param name="valueAsDouble">valueAsDouble.</param>
        /// <param name="valueAsInt">valueAsInt.</param>
        /// <param name="valueAsLong">valueAsLong.</param>
        /// <param name="valueAsText">valueAsText.</param>
        /// <param name="valueNode">valueNode.</param>
        public JsonNode(bool array = default(bool), bool bigDecimal = default(bool), bool bigInteger = default(bool), int bigIntegerValue = default(int), bool binary = default(bool), List<byte[]> binaryValue = default(List<byte[]>), bool boolean = default(bool), bool booleanValue = default(bool), bool containerNode = default(bool), decimal decimalValue = default(decimal), bool varDouble = default(bool), double doubleValue = default(double), Object elements = default(Object), Object fieldNames = default(Object), Object fields = default(Object), bool floatingPointNumber = default(bool), bool varInt = default(bool), int intValue = default(int), bool integralNumber = default(bool), bool varLong = default(bool), long longValue = default(long), bool missingNode = default(bool), bool varNull = default(bool), bool number = default(bool), NumberTypeEnum? numberType = default(NumberTypeEnum?), decimal numberValue = default(decimal), bool varObject = default(bool), bool pojo = default(bool), string textValue = default(string), bool textual = default(bool), bool valueAsBoolean = default(bool), double valueAsDouble = default(double), int valueAsInt = default(int), long valueAsLong = default(long), string valueAsText = default(string), bool valueNode = default(bool))
        {
            this.Array = array;
            this.BigDecimal = bigDecimal;
            this.BigInteger = bigInteger;
            this.BigIntegerValue = bigIntegerValue;
            this.Binary = binary;
            this.BinaryValue = binaryValue;
            this.Boolean = boolean;
            this.BooleanValue = booleanValue;
            this.ContainerNode = containerNode;
            this.DecimalValue = decimalValue;
            this.VarDouble = varDouble;
            this.DoubleValue = doubleValue;
            this.Elements = elements;
            this.FieldNames = fieldNames;
            this.Fields = fields;
            this.FloatingPointNumber = floatingPointNumber;
            this.VarInt = varInt;
            this.IntValue = intValue;
            this.IntegralNumber = integralNumber;
            this.VarLong = varLong;
            this.LongValue = longValue;
            this.MissingNode = missingNode;
            this.VarNull = varNull;
            this.Number = number;
            this.NumberType = numberType;
            this.NumberValue = numberValue;
            this.VarObject = varObject;
            this.Pojo = pojo;
            this.TextValue = textValue;
            this.Textual = textual;
            this.ValueAsBoolean = valueAsBoolean;
            this.ValueAsDouble = valueAsDouble;
            this.ValueAsInt = valueAsInt;
            this.ValueAsLong = valueAsLong;
            this.ValueAsText = valueAsText;
            this.ValueNode = valueNode;
        }

        /// <summary>
        /// Gets or Sets Array
        /// </summary>
        [DataMember(Name = "array", EmitDefaultValue = true)]
        public bool Array { get; set; }

        /// <summary>
        /// Gets or Sets BigDecimal
        /// </summary>
        [DataMember(Name = "bigDecimal", EmitDefaultValue = true)]
        public bool BigDecimal { get; set; }

        /// <summary>
        /// Gets or Sets BigInteger
        /// </summary>
        [DataMember(Name = "bigInteger", EmitDefaultValue = true)]
        public bool BigInteger { get; set; }

        /// <summary>
        /// Gets or Sets BigIntegerValue
        /// </summary>
        [DataMember(Name = "bigIntegerValue", EmitDefaultValue = false)]
        public int BigIntegerValue { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name = "binary", EmitDefaultValue = true)]
        public bool Binary { get; set; }

        /// <summary>
        /// Gets or Sets BinaryValue
        /// </summary>
        [DataMember(Name = "binaryValue", EmitDefaultValue = false)]
        public List<byte[]> BinaryValue { get; set; }

        /// <summary>
        /// Gets or Sets Boolean
        /// </summary>
        [DataMember(Name = "boolean", EmitDefaultValue = true)]
        public bool Boolean { get; set; }

        /// <summary>
        /// Gets or Sets BooleanValue
        /// </summary>
        [DataMember(Name = "booleanValue", EmitDefaultValue = true)]
        public bool BooleanValue { get; set; }

        /// <summary>
        /// Gets or Sets ContainerNode
        /// </summary>
        [DataMember(Name = "containerNode", EmitDefaultValue = true)]
        public bool ContainerNode { get; set; }

        /// <summary>
        /// Gets or Sets DecimalValue
        /// </summary>
        [DataMember(Name = "decimalValue", EmitDefaultValue = false)]
        public decimal DecimalValue { get; set; }

        /// <summary>
        /// Gets or Sets VarDouble
        /// </summary>
        [DataMember(Name = "double", EmitDefaultValue = true)]
        public bool VarDouble { get; set; }

        /// <summary>
        /// Gets or Sets DoubleValue
        /// </summary>
        [DataMember(Name = "doubleValue", EmitDefaultValue = false)]
        public double DoubleValue { get; set; }

        /// <summary>
        /// Gets or Sets Elements
        /// </summary>
        [DataMember(Name = "elements", EmitDefaultValue = false)]
        public Object Elements { get; set; }

        /// <summary>
        /// Gets or Sets FieldNames
        /// </summary>
        [DataMember(Name = "fieldNames", EmitDefaultValue = false)]
        public Object FieldNames { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Object Fields { get; set; }

        /// <summary>
        /// Gets or Sets FloatingPointNumber
        /// </summary>
        [DataMember(Name = "floatingPointNumber", EmitDefaultValue = true)]
        public bool FloatingPointNumber { get; set; }

        /// <summary>
        /// Gets or Sets VarInt
        /// </summary>
        [DataMember(Name = "int", EmitDefaultValue = true)]
        public bool VarInt { get; set; }

        /// <summary>
        /// Gets or Sets IntValue
        /// </summary>
        [DataMember(Name = "intValue", EmitDefaultValue = false)]
        public int IntValue { get; set; }

        /// <summary>
        /// Gets or Sets IntegralNumber
        /// </summary>
        [DataMember(Name = "integralNumber", EmitDefaultValue = true)]
        public bool IntegralNumber { get; set; }

        /// <summary>
        /// Gets or Sets VarLong
        /// </summary>
        [DataMember(Name = "long", EmitDefaultValue = true)]
        public bool VarLong { get; set; }

        /// <summary>
        /// Gets or Sets LongValue
        /// </summary>
        [DataMember(Name = "longValue", EmitDefaultValue = false)]
        public long LongValue { get; set; }

        /// <summary>
        /// Gets or Sets MissingNode
        /// </summary>
        [DataMember(Name = "missingNode", EmitDefaultValue = true)]
        public bool MissingNode { get; set; }

        /// <summary>
        /// Gets or Sets VarNull
        /// </summary>
        [DataMember(Name = "null", EmitDefaultValue = true)]
        public bool VarNull { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public bool Number { get; set; }

        /// <summary>
        /// Gets or Sets NumberValue
        /// </summary>
        [DataMember(Name = "numberValue", EmitDefaultValue = false)]
        public decimal NumberValue { get; set; }

        /// <summary>
        /// Gets or Sets VarObject
        /// </summary>
        [DataMember(Name = "object", EmitDefaultValue = true)]
        public bool VarObject { get; set; }

        /// <summary>
        /// Gets or Sets Pojo
        /// </summary>
        [DataMember(Name = "pojo", EmitDefaultValue = true)]
        public bool Pojo { get; set; }

        /// <summary>
        /// Gets or Sets TextValue
        /// </summary>
        [DataMember(Name = "textValue", EmitDefaultValue = false)]
        public string TextValue { get; set; }

        /// <summary>
        /// Gets or Sets Textual
        /// </summary>
        [DataMember(Name = "textual", EmitDefaultValue = true)]
        public bool Textual { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsBoolean
        /// </summary>
        [DataMember(Name = "valueAsBoolean", EmitDefaultValue = true)]
        public bool ValueAsBoolean { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsDouble
        /// </summary>
        [DataMember(Name = "valueAsDouble", EmitDefaultValue = false)]
        public double ValueAsDouble { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsInt
        /// </summary>
        [DataMember(Name = "valueAsInt", EmitDefaultValue = false)]
        public int ValueAsInt { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsLong
        /// </summary>
        [DataMember(Name = "valueAsLong", EmitDefaultValue = false)]
        public long ValueAsLong { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsText
        /// </summary>
        [DataMember(Name = "valueAsText", EmitDefaultValue = false)]
        public string ValueAsText { get; set; }

        /// <summary>
        /// Gets or Sets ValueNode
        /// </summary>
        [DataMember(Name = "valueNode", EmitDefaultValue = true)]
        public bool ValueNode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonNode {\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  BigDecimal: ").Append(BigDecimal).Append("\n");
            sb.Append("  BigInteger: ").Append(BigInteger).Append("\n");
            sb.Append("  BigIntegerValue: ").Append(BigIntegerValue).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  BinaryValue: ").Append(BinaryValue).Append("\n");
            sb.Append("  Boolean: ").Append(Boolean).Append("\n");
            sb.Append("  BooleanValue: ").Append(BooleanValue).Append("\n");
            sb.Append("  ContainerNode: ").Append(ContainerNode).Append("\n");
            sb.Append("  DecimalValue: ").Append(DecimalValue).Append("\n");
            sb.Append("  VarDouble: ").Append(VarDouble).Append("\n");
            sb.Append("  DoubleValue: ").Append(DoubleValue).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("  FieldNames: ").Append(FieldNames).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  FloatingPointNumber: ").Append(FloatingPointNumber).Append("\n");
            sb.Append("  VarInt: ").Append(VarInt).Append("\n");
            sb.Append("  IntValue: ").Append(IntValue).Append("\n");
            sb.Append("  IntegralNumber: ").Append(IntegralNumber).Append("\n");
            sb.Append("  VarLong: ").Append(VarLong).Append("\n");
            sb.Append("  LongValue: ").Append(LongValue).Append("\n");
            sb.Append("  MissingNode: ").Append(MissingNode).Append("\n");
            sb.Append("  VarNull: ").Append(VarNull).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  NumberType: ").Append(NumberType).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  Pojo: ").Append(Pojo).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  Textual: ").Append(Textual).Append("\n");
            sb.Append("  ValueAsBoolean: ").Append(ValueAsBoolean).Append("\n");
            sb.Append("  ValueAsDouble: ").Append(ValueAsDouble).Append("\n");
            sb.Append("  ValueAsInt: ").Append(ValueAsInt).Append("\n");
            sb.Append("  ValueAsLong: ").Append(ValueAsLong).Append("\n");
            sb.Append("  ValueAsText: ").Append(ValueAsText).Append("\n");
            sb.Append("  ValueNode: ").Append(ValueNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
