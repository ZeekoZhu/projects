/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about the configuration of Jira.
    /// </summary>
    [DataContract(Name = "varConfiguration")]
    public partial class ModelConfiguration : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelConfiguration" /> class.
        /// </summary>
        /// <param name="timeTrackingConfiguration">timeTrackingConfiguration.</param>
        public ModelConfiguration(ConfigurationTimeTrackingConfiguration timeTrackingConfiguration = default(ConfigurationTimeTrackingConfiguration))
        {
            this.TimeTrackingConfiguration = timeTrackingConfiguration;
        }

        /// <summary>
        /// Whether the ability to add attachments to issues is enabled.
        /// </summary>
        /// <value>Whether the ability to add attachments to issues is enabled.</value>
        [DataMember(Name = "attachmentsEnabled", EmitDefaultValue = true)]
        public bool AttachmentsEnabled { get; private set; }

        /// <summary>
        /// Returns false as AttachmentsEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentsEnabled()
        {
            return false;
        }
        /// <summary>
        /// Whether the ability to link issues is enabled.
        /// </summary>
        /// <value>Whether the ability to link issues is enabled.</value>
        [DataMember(Name = "issueLinkingEnabled", EmitDefaultValue = true)]
        public bool IssueLinkingEnabled { get; private set; }

        /// <summary>
        /// Returns false as IssueLinkingEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIssueLinkingEnabled()
        {
            return false;
        }
        /// <summary>
        /// Whether the ability to create subtasks for issues is enabled.
        /// </summary>
        /// <value>Whether the ability to create subtasks for issues is enabled.</value>
        [DataMember(Name = "subTasksEnabled", EmitDefaultValue = true)]
        public bool SubTasksEnabled { get; private set; }

        /// <summary>
        /// Returns false as SubTasksEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubTasksEnabled()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TimeTrackingConfiguration
        /// </summary>
        [DataMember(Name = "timeTrackingConfiguration", EmitDefaultValue = false)]
        public ConfigurationTimeTrackingConfiguration TimeTrackingConfiguration { get; set; }

        /// <summary>
        /// Whether the ability to track time is enabled. This property is deprecated.
        /// </summary>
        /// <value>Whether the ability to track time is enabled. This property is deprecated.</value>
        [DataMember(Name = "timeTrackingEnabled", EmitDefaultValue = true)]
        public bool TimeTrackingEnabled { get; private set; }

        /// <summary>
        /// Returns false as TimeTrackingEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimeTrackingEnabled()
        {
            return false;
        }
        /// <summary>
        /// Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        /// <value>Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</value>
        [DataMember(Name = "unassignedIssuesAllowed", EmitDefaultValue = true)]
        public bool UnassignedIssuesAllowed { get; private set; }

        /// <summary>
        /// Returns false as UnassignedIssuesAllowed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnassignedIssuesAllowed()
        {
            return false;
        }
        /// <summary>
        /// Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        /// <value>Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</value>
        [DataMember(Name = "votingEnabled", EmitDefaultValue = true)]
        public bool VotingEnabled { get; private set; }

        /// <summary>
        /// Returns false as VotingEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVotingEnabled()
        {
            return false;
        }
        /// <summary>
        /// Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        /// <value>Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</value>
        [DataMember(Name = "watchingEnabled", EmitDefaultValue = true)]
        public bool WatchingEnabled { get; private set; }

        /// <summary>
        /// Returns false as WatchingEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWatchingEnabled()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelConfiguration {\n");
            sb.Append("  AttachmentsEnabled: ").Append(AttachmentsEnabled).Append("\n");
            sb.Append("  IssueLinkingEnabled: ").Append(IssueLinkingEnabled).Append("\n");
            sb.Append("  SubTasksEnabled: ").Append(SubTasksEnabled).Append("\n");
            sb.Append("  TimeTrackingConfiguration: ").Append(TimeTrackingConfiguration).Append("\n");
            sb.Append("  TimeTrackingEnabled: ").Append(TimeTrackingEnabled).Append("\n");
            sb.Append("  UnassignedIssuesAllowed: ").Append(UnassignedIssuesAllowed).Append("\n");
            sb.Append("  VotingEnabled: ").Append(VotingEnabled).Append("\n");
            sb.Append("  WatchingEnabled: ").Append(WatchingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
