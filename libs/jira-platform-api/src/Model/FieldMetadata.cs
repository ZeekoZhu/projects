/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The metadata describing an issue field.
    /// </summary>
    [DataContract(Name = "FieldMetadata")]
    public partial class FieldMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldMetadata" /> class.
        /// </summary>
        /// <param name="schema">schema (required).</param>
        public FieldMetadata(FieldCreateMetadataSchema schema = default(FieldCreateMetadataSchema))
        {
            // to ensure "schema" is required (not null)
            if (schema == null)
            {
                throw new ArgumentNullException("schema is a required property for FieldMetadata and cannot be null");
            }
            this.Schema = schema;
        }

        /// <summary>
        /// The list of values allowed in the field.
        /// </summary>
        /// <value>The list of values allowed in the field.</value>
        [DataMember(Name = "allowedValues", EmitDefaultValue = false)]
        public List<Object> AllowedValues { get; private set; }

        /// <summary>
        /// Returns false as AllowedValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowedValues()
        {
            return false;
        }
        /// <summary>
        /// The URL that can be used to automatically complete the field.
        /// </summary>
        /// <value>The URL that can be used to automatically complete the field.</value>
        [DataMember(Name = "autoCompleteUrl", EmitDefaultValue = false)]
        public string AutoCompleteUrl { get; private set; }

        /// <summary>
        /// Returns false as AutoCompleteUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAutoCompleteUrl()
        {
            return false;
        }
        /// <summary>
        /// The configuration properties.
        /// </summary>
        /// <value>The configuration properties.</value>
        [DataMember(Name = "configuration", EmitDefaultValue = false)]
        public Dictionary<string, Object> VarConfiguration { get; private set; }

        /// <summary>
        /// Returns false as VarConfiguration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarConfiguration()
        {
            return false;
        }
        /// <summary>
        /// The default value of the field.
        /// </summary>
        /// <value>The default value of the field.</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = true)]
        public Object DefaultValue { get; private set; }

        /// <summary>
        /// Returns false as DefaultValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultValue()
        {
            return false;
        }
        /// <summary>
        /// Whether the field has a default value.
        /// </summary>
        /// <value>Whether the field has a default value.</value>
        [DataMember(Name = "hasDefaultValue", EmitDefaultValue = true)]
        public bool HasDefaultValue { get; private set; }

        /// <summary>
        /// Returns false as HasDefaultValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasDefaultValue()
        {
            return false;
        }
        /// <summary>
        /// The key of the field.
        /// </summary>
        /// <value>The key of the field.</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; private set; }

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return false;
        }
        /// <summary>
        /// The name of the field.
        /// </summary>
        /// <value>The name of the field.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// The list of operations that can be performed on the field.
        /// </summary>
        /// <value>The list of operations that can be performed on the field.</value>
        [DataMember(Name = "operations", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Operations { get; private set; }

        /// <summary>
        /// Returns false as Operations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOperations()
        {
            return false;
        }
        /// <summary>
        /// Whether the field is required.
        /// </summary>
        /// <value>Whether the field is required.</value>
        [DataMember(Name = "required", IsRequired = true, EmitDefaultValue = true)]
        public bool Required { get; private set; }

        /// <summary>
        /// Returns false as Required should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequired()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name = "schema", IsRequired = true, EmitDefaultValue = true)]
        public FieldCreateMetadataSchema Schema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldMetadata {\n");
            sb.Append("  AllowedValues: ").Append(AllowedValues).Append("\n");
            sb.Append("  AutoCompleteUrl: ").Append(AutoCompleteUrl).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  HasDefaultValue: ").Append(HasDefaultValue).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
