/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The linked item.
    /// </summary>
    [DataContract(Name = "RemoteObject")]
    public partial class RemoteObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemoteObject()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteObject" /> class.
        /// </summary>
        /// <param name="icon">Details of the icon for the item. If no icon is defined, the default link icon is used in Jira..</param>
        /// <param name="status">The status of the item..</param>
        /// <param name="summary">The summary details of the item..</param>
        /// <param name="title">The title of the item. (required).</param>
        /// <param name="url">The URL of the item. (required).</param>
        public RemoteObject(Icon icon = default(Icon), Status status = default(Status), string summary = default(string), string title = default(string), string url = default(string))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for RemoteObject and cannot be null");
            }
            this.Title = title;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for RemoteObject and cannot be null");
            }
            this.Url = url;
            this.Icon = icon;
            this.Status = status;
            this.Summary = summary;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.
        /// </summary>
        /// <value>Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.</value>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public Icon Icon { get; set; }

        /// <summary>
        /// The status of the item.
        /// </summary>
        /// <value>The status of the item.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public Status Status { get; set; }

        /// <summary>
        /// The summary details of the item.
        /// </summary>
        /// <value>The summary details of the item.</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// The title of the item.
        /// </summary>
        /// <value>The title of the item.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of the item.
        /// </summary>
        /// <value>The URL of the item.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemoteObject {\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
