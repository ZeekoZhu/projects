/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about an issue type.
    /// </summary>
    [DataContract(Name = "IssueTypeDetails")]
    public partial class IssueTypeDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTypeDetails" /> class.
        /// </summary>
        /// <param name="scope">scope.</param>
        public IssueTypeDetails(IssueTypeDetailsScope scope = default(IssueTypeDetailsScope))
        {
            this.Scope = scope;
        }

        /// <summary>
        /// The ID of the issue type&#39;s avatar.
        /// </summary>
        /// <value>The ID of the issue type&#39;s avatar.</value>
        [DataMember(Name = "avatarId", EmitDefaultValue = false)]
        public long AvatarId { get; private set; }

        /// <summary>
        /// Returns false as AvatarId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAvatarId()
        {
            return false;
        }
        /// <summary>
        /// The description of the issue type.
        /// </summary>
        /// <value>The description of the issue type.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; private set; }

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return false;
        }
        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        /// <value>Unique ID for next-gen projects.</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public Guid EntityId { get; private set; }

        /// <summary>
        /// Returns false as EntityId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntityId()
        {
            return false;
        }
        /// <summary>
        /// Hierarchy level of the issue type.
        /// </summary>
        /// <value>Hierarchy level of the issue type.</value>
        [DataMember(Name = "hierarchyLevel", EmitDefaultValue = false)]
        public int HierarchyLevel { get; private set; }

        /// <summary>
        /// Returns false as HierarchyLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHierarchyLevel()
        {
            return false;
        }
        /// <summary>
        /// The URL of the issue type&#39;s avatar.
        /// </summary>
        /// <value>The URL of the issue type&#39;s avatar.</value>
        [DataMember(Name = "iconUrl", EmitDefaultValue = false)]
        public string IconUrl { get; private set; }

        /// <summary>
        /// Returns false as IconUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIconUrl()
        {
            return false;
        }
        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        /// <value>The ID of the issue type.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The name of the issue type.
        /// </summary>
        /// <value>The name of the issue type.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public IssueTypeDetailsScope Scope { get; set; }

        /// <summary>
        /// The URL of these issue type details.
        /// </summary>
        /// <value>The URL of these issue type details.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Whether this issue type is used to create subtasks.
        /// </summary>
        /// <value>Whether this issue type is used to create subtasks.</value>
        [DataMember(Name = "subtask", EmitDefaultValue = true)]
        public bool Subtask { get; private set; }

        /// <summary>
        /// Returns false as Subtask should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubtask()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueTypeDetails {\n");
            sb.Append("  AvatarId: ").Append(AvatarId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  HierarchyLevel: ").Append(HierarchyLevel).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Subtask: ").Append(Subtask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
