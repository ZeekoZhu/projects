/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// A workflow with transition rules.
    /// </summary>
    [DataContract(Name = "WorkflowTransitionRules")]
    public partial class WorkflowTransitionRules : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTransitionRules" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowTransitionRules() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTransitionRules" /> class.
        /// </summary>
        /// <param name="conditions">The list of conditions within the workflow..</param>
        /// <param name="postFunctions">The list of post functions within the workflow..</param>
        /// <param name="validators">The list of validators within the workflow..</param>
        /// <param name="workflowId">workflowId (required).</param>
        public WorkflowTransitionRules(List<AppWorkflowTransitionRule> conditions = default(List<AppWorkflowTransitionRule>), List<AppWorkflowTransitionRule> postFunctions = default(List<AppWorkflowTransitionRule>), List<AppWorkflowTransitionRule> validators = default(List<AppWorkflowTransitionRule>), WorkflowId workflowId = default(WorkflowId))
        {
            // to ensure "workflowId" is required (not null)
            if (workflowId == null)
            {
                throw new ArgumentNullException("workflowId is a required property for WorkflowTransitionRules and cannot be null");
            }
            this.WorkflowId = workflowId;
            this.Conditions = conditions;
            this.PostFunctions = postFunctions;
            this.Validators = validators;
        }

        /// <summary>
        /// The list of conditions within the workflow.
        /// </summary>
        /// <value>The list of conditions within the workflow.</value>
        [DataMember(Name = "conditions", EmitDefaultValue = false)]
        public List<AppWorkflowTransitionRule> Conditions { get; set; }

        /// <summary>
        /// The list of post functions within the workflow.
        /// </summary>
        /// <value>The list of post functions within the workflow.</value>
        [DataMember(Name = "postFunctions", EmitDefaultValue = false)]
        public List<AppWorkflowTransitionRule> PostFunctions { get; set; }

        /// <summary>
        /// The list of validators within the workflow.
        /// </summary>
        /// <value>The list of validators within the workflow.</value>
        [DataMember(Name = "validators", EmitDefaultValue = false)]
        public List<AppWorkflowTransitionRule> Validators { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowId
        /// </summary>
        [DataMember(Name = "workflowId", IsRequired = true, EmitDefaultValue = true)]
        public WorkflowId WorkflowId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowTransitionRules {\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  PostFunctions: ").Append(PostFunctions).Append("\n");
            sb.Append("  Validators: ").Append(Validators).Append("\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
