/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a filter.
    /// </summary>
    [DataContract(Name = "FilterDetails")]
    public partial class FilterDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterDetails" /> class.
        /// </summary>
        /// <param name="description">The description of the filter..</param>
        /// <param name="editPermissions">The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter..</param>
        /// <param name="name">The name of the filter. (required).</param>
        /// <param name="owner">owner.</param>
        /// <param name="sharePermissions">The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter..</param>
        public FilterDetails(string description = default(string), List<SharePermission> editPermissions = default(List<SharePermission>), string name = default(string), FilterDetailsOwner owner = default(FilterDetailsOwner), List<SharePermission> sharePermissions = default(List<SharePermission>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FilterDetails and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.EditPermissions = editPermissions;
            this.Owner = owner;
            this.SharePermissions = sharePermissions;
        }

        /// <summary>
        /// \\[Experimental\\] Approximate last used time. Returns the date and time when the filter was last used. Returns &#x60;null&#x60; if the filter hasn&#39;t been used after tracking was enabled. For performance reasons, timestamps aren&#39;t updated in real time and therefore may not be exactly accurate.
        /// </summary>
        /// <value>\\[Experimental\\] Approximate last used time. Returns the date and time when the filter was last used. Returns &#x60;null&#x60; if the filter hasn&#39;t been used after tracking was enabled. For performance reasons, timestamps aren&#39;t updated in real time and therefore may not be exactly accurate.</value>
        [DataMember(Name = "approximateLastUsed", EmitDefaultValue = false)]
        public DateTime ApproximateLastUsed { get; private set; }

        /// <summary>
        /// Returns false as ApproximateLastUsed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApproximateLastUsed()
        {
            return false;
        }
        /// <summary>
        /// The description of the filter.
        /// </summary>
        /// <value>The description of the filter.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
        /// </summary>
        /// <value>The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.</value>
        [DataMember(Name = "editPermissions", EmitDefaultValue = false)]
        public List<SharePermission> EditPermissions { get; set; }

        /// <summary>
        /// Expand options that include additional filter details in the response.
        /// </summary>
        /// <value>Expand options that include additional filter details in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; private set; }

        /// <summary>
        /// Returns false as Expand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpand()
        {
            return false;
        }
        /// <summary>
        /// Whether the filter is selected as a favorite by any users, not including the filter owner.
        /// </summary>
        /// <value>Whether the filter is selected as a favorite by any users, not including the filter owner.</value>
        [DataMember(Name = "favourite", EmitDefaultValue = true)]
        public bool Favourite { get; private set; }

        /// <summary>
        /// Returns false as Favourite should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFavourite()
        {
            return false;
        }
        /// <summary>
        /// The count of how many users have selected this filter as a favorite, including the filter owner.
        /// </summary>
        /// <value>The count of how many users have selected this filter as a favorite, including the filter owner.</value>
        [DataMember(Name = "favouritedCount", EmitDefaultValue = false)]
        public long FavouritedCount { get; private set; }

        /// <summary>
        /// Returns false as FavouritedCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFavouritedCount()
        {
            return false;
        }
        /// <summary>
        /// The unique identifier for the filter.
        /// </summary>
        /// <value>The unique identifier for the filter.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The JQL query for the filter. For example, *project &#x3D; SSP AND issuetype &#x3D; Bug*.
        /// </summary>
        /// <value>The JQL query for the filter. For example, *project &#x3D; SSP AND issuetype &#x3D; Bug*.</value>
        [DataMember(Name = "jql", EmitDefaultValue = false)]
        public string Jql { get; private set; }

        /// <summary>
        /// Returns false as Jql should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJql()
        {
            return false;
        }
        /// <summary>
        /// The name of the filter.
        /// </summary>
        /// <value>The name of the filter.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public FilterDetailsOwner Owner { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter&#39;s JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql&#x3D;project+%3D+SSP+AND+issuetype+%3D+Bug*.
        /// </summary>
        /// <value>A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter&#39;s JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql&#x3D;project+%3D+SSP+AND+issuetype+%3D+Bug*.</value>
        [DataMember(Name = "searchUrl", EmitDefaultValue = false)]
        public string SearchUrl { get; private set; }

        /// <summary>
        /// Returns false as SearchUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSearchUrl()
        {
            return false;
        }
        /// <summary>
        /// The URL of the filter.
        /// </summary>
        /// <value>The URL of the filter.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
        /// </summary>
        /// <value>The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.</value>
        [DataMember(Name = "sharePermissions", EmitDefaultValue = false)]
        public List<SharePermission> SharePermissions { get; set; }

        /// <summary>
        /// The users that are subscribed to the filter.
        /// </summary>
        /// <value>The users that are subscribed to the filter.</value>
        [DataMember(Name = "subscriptions", EmitDefaultValue = false)]
        public List<FilterSubscription> Subscriptions { get; private set; }

        /// <summary>
        /// Returns false as Subscriptions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubscriptions()
        {
            return false;
        }
        /// <summary>
        /// A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter&#x3D;10100*.
        /// </summary>
        /// <value>A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter&#x3D;10100*.</value>
        [DataMember(Name = "viewUrl", EmitDefaultValue = false)]
        public string ViewUrl { get; private set; }

        /// <summary>
        /// Returns false as ViewUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeViewUrl()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterDetails {\n");
            sb.Append("  ApproximateLastUsed: ").Append(ApproximateLastUsed).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EditPermissions: ").Append(EditPermissions).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  FavouritedCount: ").Append(FavouritedCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Jql: ").Append(Jql).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  SearchUrl: ").Append(SearchUrl).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  SharePermissions: ").Append(SharePermissions).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  ViewUrl: ").Append(ViewUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
