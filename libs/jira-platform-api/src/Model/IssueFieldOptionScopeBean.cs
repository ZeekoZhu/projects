/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// IssueFieldOptionScopeBean
    /// </summary>
    [DataContract(Name = "IssueFieldOptionScopeBean")]
    public partial class IssueFieldOptionScopeBean : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueFieldOptionScopeBean" /> class.
        /// </summary>
        /// <param name="global">Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects..</param>
        /// <param name="projects">DEPRECATED.</param>
        /// <param name="projects2">Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context..</param>
        public IssueFieldOptionScopeBean(GlobalScopeBean global = default(GlobalScopeBean), List<long> projects = default(List<long>), List<ProjectScopeBean> projects2 = default(List<ProjectScopeBean>))
        {
            this.Global = global;
            this.Projects = projects;
            this.Projects2 = projects2;
        }

        /// <summary>
        /// Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
        /// </summary>
        /// <value>Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.</value>
        [DataMember(Name = "global", EmitDefaultValue = false)]
        public GlobalScopeBean Global { get; set; }

        /// <summary>
        /// DEPRECATED
        /// </summary>
        /// <value>DEPRECATED</value>
        [DataMember(Name = "projects", EmitDefaultValue = false)]
        public List<long> Projects { get; set; }

        /// <summary>
        /// Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
        /// </summary>
        /// <value>Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.</value>
        [DataMember(Name = "projects2", EmitDefaultValue = false)]
        public List<ProjectScopeBean> Projects2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueFieldOptionScopeBean {\n");
            sb.Append("  Global: ").Append(Global).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Projects2: ").Append(Projects2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
