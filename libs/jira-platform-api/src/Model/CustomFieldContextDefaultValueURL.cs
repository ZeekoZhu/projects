/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The default value for a URL custom field.
    /// </summary>
    [DataContract(Name = "CustomFieldContextDefaultValueURL")]
    public partial class CustomFieldContextDefaultValueURL : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldContextDefaultValueURL" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFieldContextDefaultValueURL() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldContextDefaultValueURL" /> class.
        /// </summary>
        /// <param name="contextId">The ID of the context. (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="url">The default URL. (required).</param>
        public CustomFieldContextDefaultValueURL(string contextId = default(string), string type = default(string), string url = default(string))
        {
            // to ensure "contextId" is required (not null)
            if (contextId == null)
            {
                throw new ArgumentNullException("contextId is a required property for CustomFieldContextDefaultValueURL and cannot be null");
            }
            this.ContextId = contextId;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CustomFieldContextDefaultValueURL and cannot be null");
            }
            this.Type = type;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CustomFieldContextDefaultValueURL and cannot be null");
            }
            this.Url = url;
        }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        /// <value>The ID of the context.</value>
        [DataMember(Name = "contextId", IsRequired = true, EmitDefaultValue = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The default URL.
        /// </summary>
        /// <value>The default URL.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFieldContextDefaultValueURL {\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
