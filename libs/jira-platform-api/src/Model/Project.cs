/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a project.
    /// </summary>
    [DataContract(Name = "Project")]
    public partial class Project : IValidatableObject
    {
        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        /// <value>The default assignee when creating issues for this project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssigneeTypeEnum
        {
            /// <summary>
            /// Enum PROJECTLEAD for value: PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEAD = 1,

            /// <summary>
            /// Enum UNASSIGNED for value: UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNED = 2
        }


        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        /// <value>The default assignee when creating issues for this project.</value>
        [DataMember(Name = "assigneeType", EmitDefaultValue = false)]
        public AssigneeTypeEnum? AssigneeType { get; set; }

        /// <summary>
        /// Returns false as AssigneeType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAssigneeType()
        {
            return false;
        }
        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProjectTypeKeyEnum
        {
            /// <summary>
            /// Enum Software for value: software
            /// </summary>
            [EnumMember(Value = "software")]
            Software = 1,

            /// <summary>
            /// Enum ServiceDesk for value: service_desk
            /// </summary>
            [EnumMember(Value = "service_desk")]
            ServiceDesk = 2,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 3
        }


        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [DataMember(Name = "projectTypeKey", EmitDefaultValue = false)]
        public ProjectTypeKeyEnum? ProjectTypeKey { get; set; }

        /// <summary>
        /// Returns false as ProjectTypeKey should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProjectTypeKey()
        {
            return false;
        }
        /// <summary>
        /// The type of the project.
        /// </summary>
        /// <value>The type of the project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum Classic for value: classic
            /// </summary>
            [EnumMember(Value = "classic")]
            Classic = 1,

            /// <summary>
            /// Enum NextGen for value: next-gen
            /// </summary>
            [EnumMember(Value = "next-gen")]
            NextGen = 2
        }


        /// <summary>
        /// The type of the project.
        /// </summary>
        /// <value>The type of the project.</value>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public StyleEnum? Style { get; set; }

        /// <summary>
        /// Returns false as Style should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStyle()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="archivedBy">archivedBy.</param>
        /// <param name="avatarUrls">avatarUrls.</param>
        /// <param name="deletedBy">deletedBy.</param>
        /// <param name="email">An email address associated with the project..</param>
        /// <param name="favourite">Whether the project is selected as a favorite..</param>
        /// <param name="id">The ID of the project..</param>
        /// <param name="insight">insight.</param>
        /// <param name="issueTypeHierarchy">issueTypeHierarchy.</param>
        /// <param name="landingPageInfo">landingPageInfo.</param>
        /// <param name="lead">lead.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="projectCategory">projectCategory.</param>
        public Project(ProjectArchivedBy archivedBy = default(ProjectArchivedBy), ProjectAvatarUrls avatarUrls = default(ProjectAvatarUrls), ProjectDeletedBy deletedBy = default(ProjectDeletedBy), string email = default(string), bool favourite = default(bool), string id = default(string), ProjectInsight insight = default(ProjectInsight), ProjectIssueTypeHierarchy issueTypeHierarchy = default(ProjectIssueTypeHierarchy), ProjectLandingPageInfo landingPageInfo = default(ProjectLandingPageInfo), ProjectLead lead = default(ProjectLead), ProjectPermissions permissions = default(ProjectPermissions), ProjectProjectCategory projectCategory = default(ProjectProjectCategory))
        {
            this.ArchivedBy = archivedBy;
            this.AvatarUrls = avatarUrls;
            this.DeletedBy = deletedBy;
            this.Email = email;
            this.Favourite = favourite;
            this.Id = id;
            this.Insight = insight;
            this.IssueTypeHierarchy = issueTypeHierarchy;
            this.LandingPageInfo = landingPageInfo;
            this.Lead = lead;
            this.Permissions = permissions;
            this.ProjectCategory = projectCategory;
        }

        /// <summary>
        /// Whether the project is archived.
        /// </summary>
        /// <value>Whether the project is archived.</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; private set; }

        /// <summary>
        /// Returns false as Archived should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeArchived()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ArchivedBy
        /// </summary>
        [DataMember(Name = "archivedBy", EmitDefaultValue = false)]
        public ProjectArchivedBy ArchivedBy { get; set; }

        /// <summary>
        /// The date when the project was archived.
        /// </summary>
        /// <value>The date when the project was archived.</value>
        [DataMember(Name = "archivedDate", EmitDefaultValue = false)]
        public DateTime ArchivedDate { get; private set; }

        /// <summary>
        /// Returns false as ArchivedDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeArchivedDate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AvatarUrls
        /// </summary>
        [DataMember(Name = "avatarUrls", EmitDefaultValue = false)]
        public ProjectAvatarUrls AvatarUrls { get; set; }

        /// <summary>
        /// List of the components contained in the project.
        /// </summary>
        /// <value>List of the components contained in the project.</value>
        [DataMember(Name = "components", EmitDefaultValue = false)]
        public List<ProjectComponent> Components { get; private set; }

        /// <summary>
        /// Returns false as Components should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeComponents()
        {
            return false;
        }
        /// <summary>
        /// Whether the project is marked as deleted.
        /// </summary>
        /// <value>Whether the project is marked as deleted.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; private set; }

        /// <summary>
        /// Returns false as Deleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeleted()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name = "deletedBy", EmitDefaultValue = false)]
        public ProjectDeletedBy DeletedBy { get; set; }

        /// <summary>
        /// The date when the project was marked as deleted.
        /// </summary>
        /// <value>The date when the project was marked as deleted.</value>
        [DataMember(Name = "deletedDate", EmitDefaultValue = false)]
        public DateTime DeletedDate { get; private set; }

        /// <summary>
        /// Returns false as DeletedDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeletedDate()
        {
            return false;
        }
        /// <summary>
        /// A brief description of the project.
        /// </summary>
        /// <value>A brief description of the project.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; private set; }

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return false;
        }
        /// <summary>
        /// An email address associated with the project.
        /// </summary>
        /// <value>An email address associated with the project.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Expand options that include additional project details in the response.
        /// </summary>
        /// <value>Expand options that include additional project details in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; private set; }

        /// <summary>
        /// Returns false as Expand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpand()
        {
            return false;
        }
        /// <summary>
        /// Whether the project is selected as a favorite.
        /// </summary>
        /// <value>Whether the project is selected as a favorite.</value>
        [DataMember(Name = "favourite", EmitDefaultValue = true)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        /// <value>The ID of the project.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Insight
        /// </summary>
        [DataMember(Name = "insight", EmitDefaultValue = false)]
        public ProjectInsight Insight { get; set; }

        /// <summary>
        /// Whether the project is private from the user&#39;s perspective. This means the user can&#39;t see the project or any associated issues.
        /// </summary>
        /// <value>Whether the project is private from the user&#39;s perspective. This means the user can&#39;t see the project or any associated issues.</value>
        [DataMember(Name = "isPrivate", EmitDefaultValue = true)]
        public bool IsPrivate { get; private set; }

        /// <summary>
        /// Returns false as IsPrivate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsPrivate()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IssueTypeHierarchy
        /// </summary>
        [DataMember(Name = "issueTypeHierarchy", EmitDefaultValue = false)]
        public ProjectIssueTypeHierarchy IssueTypeHierarchy { get; set; }

        /// <summary>
        /// List of the issue types available in the project.
        /// </summary>
        /// <value>List of the issue types available in the project.</value>
        [DataMember(Name = "issueTypes", EmitDefaultValue = false)]
        public List<IssueTypeDetails> IssueTypes { get; private set; }

        /// <summary>
        /// Returns false as IssueTypes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIssueTypes()
        {
            return false;
        }
        /// <summary>
        /// The key of the project.
        /// </summary>
        /// <value>The key of the project.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; private set; }

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LandingPageInfo
        /// </summary>
        [DataMember(Name = "landingPageInfo", EmitDefaultValue = false)]
        public ProjectLandingPageInfo LandingPageInfo { get; set; }

        /// <summary>
        /// Gets or Sets Lead
        /// </summary>
        [DataMember(Name = "lead", EmitDefaultValue = false)]
        public ProjectLead Lead { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        /// <value>The name of the project.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public ProjectPermissions Permissions { get; set; }

        /// <summary>
        /// Gets or Sets ProjectCategory
        /// </summary>
        [DataMember(Name = "projectCategory", EmitDefaultValue = false)]
        public ProjectProjectCategory ProjectCategory { get; set; }

        /// <summary>
        /// Map of project properties
        /// </summary>
        /// <value>Map of project properties</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, Object> Properties { get; private set; }

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return false;
        }
        /// <summary>
        /// The date when the project is deleted permanently.
        /// </summary>
        /// <value>The date when the project is deleted permanently.</value>
        [DataMember(Name = "retentionTillDate", EmitDefaultValue = false)]
        public DateTime RetentionTillDate { get; private set; }

        /// <summary>
        /// Returns false as RetentionTillDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRetentionTillDate()
        {
            return false;
        }
        /// <summary>
        /// The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-2-role-post).
        /// </summary>
        /// <value>The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-2-role-post).</value>
        [DataMember(Name = "roles", EmitDefaultValue = false)]
        public Dictionary<string, string> Roles { get; private set; }

        /// <summary>
        /// Returns false as Roles should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRoles()
        {
            return false;
        }
        /// <summary>
        /// The URL of the project details.
        /// </summary>
        /// <value>The URL of the project details.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// Whether the project is simplified.
        /// </summary>
        /// <value>Whether the project is simplified.</value>
        [DataMember(Name = "simplified", EmitDefaultValue = true)]
        public bool Simplified { get; private set; }

        /// <summary>
        /// Returns false as Simplified should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSimplified()
        {
            return false;
        }
        /// <summary>
        /// A link to information about this project, such as project documentation.
        /// </summary>
        /// <value>A link to information about this project, such as project documentation.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; private set; }

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return false;
        }
        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        /// <value>Unique ID for next-gen projects.</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public Guid Uuid { get; private set; }

        /// <summary>
        /// Returns false as Uuid should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUuid()
        {
            return false;
        }
        /// <summary>
        /// The versions defined in the project. For more information, see [Create version](#api-rest-api-2-version-post).
        /// </summary>
        /// <value>The versions defined in the project. For more information, see [Create version](#api-rest-api-2-version-post).</value>
        [DataMember(Name = "versions", EmitDefaultValue = false)]
        public List<ModelVersion> Versions { get; private set; }

        /// <summary>
        /// Returns false as Versions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersions()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  ArchivedBy: ").Append(ArchivedBy).Append("\n");
            sb.Append("  ArchivedDate: ").Append(ArchivedDate).Append("\n");
            sb.Append("  AssigneeType: ").Append(AssigneeType).Append("\n");
            sb.Append("  AvatarUrls: ").Append(AvatarUrls).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedDate: ").Append(DeletedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Insight: ").Append(Insight).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  IssueTypeHierarchy: ").Append(IssueTypeHierarchy).Append("\n");
            sb.Append("  IssueTypes: ").Append(IssueTypes).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  LandingPageInfo: ").Append(LandingPageInfo).Append("\n");
            sb.Append("  Lead: ").Append(Lead).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  ProjectCategory: ").Append(ProjectCategory).Append("\n");
            sb.Append("  ProjectTypeKey: ").Append(ProjectTypeKey).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  RetentionTillDate: ").Append(RetentionTillDate).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Simplified: ").Append(Simplified).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
