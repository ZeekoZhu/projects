/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a workflow transition.
    /// </summary>
    [DataContract(Name = "Transition")]
    public partial class Transition : IValidatableObject
    {
        /// <summary>
        /// The type of the transition.
        /// </summary>
        /// <value>The type of the transition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Global for value: global
            /// </summary>
            [EnumMember(Value = "global")]
            Global = 1,

            /// <summary>
            /// Enum Initial for value: initial
            /// </summary>
            [EnumMember(Value = "initial")]
            Initial = 2,

            /// <summary>
            /// Enum Directed for value: directed
            /// </summary>
            [EnumMember(Value = "directed")]
            Directed = 3
        }


        /// <summary>
        /// The type of the transition.
        /// </summary>
        /// <value>The type of the transition.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transition" /> class.
        /// </summary>
        /// <param name="description">The description of the transition. (required).</param>
        /// <param name="from">The statuses the transition can start from. (required).</param>
        /// <param name="id">The ID of the transition. (required).</param>
        /// <param name="name">The name of the transition. (required).</param>
        /// <param name="properties">The properties of the transition..</param>
        /// <param name="rules">rules.</param>
        /// <param name="screen">screen.</param>
        /// <param name="to">The status the transition goes to. (required).</param>
        /// <param name="type">The type of the transition. (required).</param>
        public Transition(string description = default(string), List<string> from = default(List<string>), string id = default(string), string name = default(string), Dictionary<string, Object> properties = default(Dictionary<string, Object>), WorkflowRules rules = default(WorkflowRules), TransitionScreenDetails screen = default(TransitionScreenDetails), string to = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Transition and cannot be null");
            }
            this.Description = description;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for Transition and cannot be null");
            }
            this.From = from;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Transition and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Transition and cannot be null");
            }
            this.Name = name;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for Transition and cannot be null");
            }
            this.To = to;
            this.Type = type;
            this.Properties = properties;
            this.Rules = rules;
            this.Screen = screen;
        }

        /// <summary>
        /// The description of the transition.
        /// </summary>
        /// <value>The description of the transition.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        /// <value>The statuses the transition can start from.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public List<string> From { get; set; }

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        /// <value>The ID of the transition.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        /// <value>The name of the transition.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        /// <value>The properties of the transition.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, Object> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public WorkflowRules Rules { get; set; }

        /// <summary>
        /// Gets or Sets Screen
        /// </summary>
        [DataMember(Name = "screen", EmitDefaultValue = false)]
        public TransitionScreenDetails Screen { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        /// <value>The status the transition goes to.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transition {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
