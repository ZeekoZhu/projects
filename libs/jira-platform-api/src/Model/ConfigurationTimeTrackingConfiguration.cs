/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The configuration of time tracking.
    /// </summary>
    [DataContract(Name = "Configuration_timeTrackingConfiguration")]
    public partial class ConfigurationTimeTrackingConfiguration : IValidatableObject
    {
        /// <summary>
        /// The default unit of time applied to logged time.
        /// </summary>
        /// <value>The default unit of time applied to logged time.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultUnitEnum
        {
            /// <summary>
            /// Enum Minute for value: minute
            /// </summary>
            [EnumMember(Value = "minute")]
            Minute = 1,

            /// <summary>
            /// Enum Hour for value: hour
            /// </summary>
            [EnumMember(Value = "hour")]
            Hour = 2,

            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 3,

            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 4
        }


        /// <summary>
        /// The default unit of time applied to logged time.
        /// </summary>
        /// <value>The default unit of time applied to logged time.</value>
        [DataMember(Name = "defaultUnit", IsRequired = true, EmitDefaultValue = true)]
        public DefaultUnitEnum DefaultUnit { get; set; }
        /// <summary>
        /// The format that will appear on an issue&#39;s *Time Spent* field.
        /// </summary>
        /// <value>The format that will appear on an issue&#39;s *Time Spent* field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeFormatEnum
        {
            /// <summary>
            /// Enum Pretty for value: pretty
            /// </summary>
            [EnumMember(Value = "pretty")]
            Pretty = 1,

            /// <summary>
            /// Enum Days for value: days
            /// </summary>
            [EnumMember(Value = "days")]
            Days = 2,

            /// <summary>
            /// Enum Hours for value: hours
            /// </summary>
            [EnumMember(Value = "hours")]
            Hours = 3
        }


        /// <summary>
        /// The format that will appear on an issue&#39;s *Time Spent* field.
        /// </summary>
        /// <value>The format that will appear on an issue&#39;s *Time Spent* field.</value>
        [DataMember(Name = "timeFormat", IsRequired = true, EmitDefaultValue = true)]
        public TimeFormatEnum TimeFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationTimeTrackingConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfigurationTimeTrackingConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationTimeTrackingConfiguration" /> class.
        /// </summary>
        /// <param name="defaultUnit">The default unit of time applied to logged time. (required).</param>
        /// <param name="timeFormat">The format that will appear on an issue&#39;s *Time Spent* field. (required).</param>
        /// <param name="workingDaysPerWeek">The number of days in a working week. (required).</param>
        /// <param name="workingHoursPerDay">The number of hours in a working day. (required).</param>
        public ConfigurationTimeTrackingConfiguration(DefaultUnitEnum defaultUnit = default(DefaultUnitEnum), TimeFormatEnum timeFormat = default(TimeFormatEnum), double workingDaysPerWeek = default(double), double workingHoursPerDay = default(double))
        {
            this.DefaultUnit = defaultUnit;
            this.TimeFormat = timeFormat;
            this.WorkingDaysPerWeek = workingDaysPerWeek;
            this.WorkingHoursPerDay = workingHoursPerDay;
        }

        /// <summary>
        /// The number of days in a working week.
        /// </summary>
        /// <value>The number of days in a working week.</value>
        [DataMember(Name = "workingDaysPerWeek", IsRequired = true, EmitDefaultValue = true)]
        public double WorkingDaysPerWeek { get; set; }

        /// <summary>
        /// The number of hours in a working day.
        /// </summary>
        /// <value>The number of hours in a working day.</value>
        [DataMember(Name = "workingHoursPerDay", IsRequired = true, EmitDefaultValue = true)]
        public double WorkingHoursPerDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigurationTimeTrackingConfiguration {\n");
            sb.Append("  DefaultUnit: ").Append(DefaultUnit).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  WorkingDaysPerWeek: ").Append(WorkingDaysPerWeek).Append("\n");
            sb.Append("  WorkingHoursPerDay: ").Append(WorkingHoursPerDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
