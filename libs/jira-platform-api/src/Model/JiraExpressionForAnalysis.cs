/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of Jira expressions for analysis.
    /// </summary>
    [DataContract(Name = "JiraExpressionForAnalysis")]
    public partial class JiraExpressionForAnalysis : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JiraExpressionForAnalysis" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JiraExpressionForAnalysis() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JiraExpressionForAnalysis" /> class.
        /// </summary>
        /// <param name="contextVariables">Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as &#x60;issue&#x60; or &#x60;project&#x60;, are available in context and sets their type. Use this property to override the default types or provide details of new variables..</param>
        /// <param name="expressions">The list of Jira expressions to analyse. (required).</param>
        public JiraExpressionForAnalysis(Dictionary<string, string> contextVariables = default(Dictionary<string, string>), List<string> expressions = default(List<string>))
        {
            // to ensure "expressions" is required (not null)
            if (expressions == null)
            {
                throw new ArgumentNullException("expressions is a required property for JiraExpressionForAnalysis and cannot be null");
            }
            this.Expressions = expressions;
            this.ContextVariables = contextVariables;
        }

        /// <summary>
        /// Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as &#x60;issue&#x60; or &#x60;project&#x60;, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
        /// </summary>
        /// <value>Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as &#x60;issue&#x60; or &#x60;project&#x60;, are available in context and sets their type. Use this property to override the default types or provide details of new variables.</value>
        [DataMember(Name = "contextVariables", EmitDefaultValue = false)]
        public Dictionary<string, string> ContextVariables { get; set; }

        /// <summary>
        /// The list of Jira expressions to analyse.
        /// </summary>
        /// <value>The list of Jira expressions to analyse.</value>
        /// <example>issues.map(issue &#x3D;&gt; issue.properties[&#39;property_key&#39;])</example>
        [DataMember(Name = "expressions", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Expressions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JiraExpressionForAnalysis {\n");
            sb.Append("  ContextVariables: ").Append(ContextVariables).Append("\n");
            sb.Append("  Expressions: ").Append(Expressions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
