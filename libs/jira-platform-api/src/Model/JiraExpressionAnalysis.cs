/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about the analysed Jira expression.
    /// </summary>
    [DataContract(Name = "JiraExpressionAnalysis")]
    public partial class JiraExpressionAnalysis : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JiraExpressionAnalysis" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JiraExpressionAnalysis() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JiraExpressionAnalysis" /> class.
        /// </summary>
        /// <param name="complexity">complexity.</param>
        /// <param name="errors">A list of validation errors. Not included if the expression is valid..</param>
        /// <param name="expression">The analysed expression. (required).</param>
        /// <param name="type">EXPERIMENTAL. The inferred type of the expression..</param>
        /// <param name="valid">Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations). (required).</param>
        public JiraExpressionAnalysis(JiraExpressionComplexity complexity = default(JiraExpressionComplexity), List<JiraExpressionValidationError> errors = default(List<JiraExpressionValidationError>), string expression = default(string), string type = default(string), bool valid = default(bool))
        {
            // to ensure "expression" is required (not null)
            if (expression == null)
            {
                throw new ArgumentNullException("expression is a required property for JiraExpressionAnalysis and cannot be null");
            }
            this.Expression = expression;
            this.Valid = valid;
            this.Complexity = complexity;
            this.Errors = errors;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Complexity
        /// </summary>
        [DataMember(Name = "complexity", EmitDefaultValue = false)]
        public JiraExpressionComplexity Complexity { get; set; }

        /// <summary>
        /// A list of validation errors. Not included if the expression is valid.
        /// </summary>
        /// <value>A list of validation errors. Not included if the expression is valid.</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<JiraExpressionValidationError> Errors { get; set; }

        /// <summary>
        /// The analysed expression.
        /// </summary>
        /// <value>The analysed expression.</value>
        [DataMember(Name = "expression", IsRequired = true, EmitDefaultValue = true)]
        public string Expression { get; set; }

        /// <summary>
        /// EXPERIMENTAL. The inferred type of the expression.
        /// </summary>
        /// <value>EXPERIMENTAL. The inferred type of the expression.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
        /// </summary>
        /// <value>Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).</value>
        [DataMember(Name = "valid", IsRequired = true, EmitDefaultValue = true)]
        public bool Valid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JiraExpressionAnalysis {\n");
            sb.Append("  Complexity: ").Append(Complexity).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
