/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of functions that can be used in advanced searches.
    /// </summary>
    [DataContract(Name = "FunctionReferenceData")]
    public partial class FunctionReferenceData : IValidatableObject
    {
        /// <summary>
        /// Whether the function can take a list of arguments.
        /// </summary>
        /// <value>Whether the function can take a list of arguments.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsListEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2
        }


        /// <summary>
        /// Whether the function can take a list of arguments.
        /// </summary>
        /// <value>Whether the function can take a list of arguments.</value>
        [DataMember(Name = "isList", EmitDefaultValue = false)]
        public IsListEnum? IsList { get; set; }
        /// <summary>
        /// Whether the function supports both single and list value operators.
        /// </summary>
        /// <value>Whether the function supports both single and list value operators.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupportsListAndSingleValueOperatorsEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2
        }


        /// <summary>
        /// Whether the function supports both single and list value operators.
        /// </summary>
        /// <value>Whether the function supports both single and list value operators.</value>
        [DataMember(Name = "supportsListAndSingleValueOperators", EmitDefaultValue = false)]
        public SupportsListAndSingleValueOperatorsEnum? SupportsListAndSingleValueOperators { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionReferenceData" /> class.
        /// </summary>
        /// <param name="displayName">The display name of the function..</param>
        /// <param name="isList">Whether the function can take a list of arguments..</param>
        /// <param name="supportsListAndSingleValueOperators">Whether the function supports both single and list value operators..</param>
        /// <param name="types">The data types returned by the function..</param>
        /// <param name="value">The function identifier..</param>
        public FunctionReferenceData(string displayName = default(string), IsListEnum? isList = default(IsListEnum?), SupportsListAndSingleValueOperatorsEnum? supportsListAndSingleValueOperators = default(SupportsListAndSingleValueOperatorsEnum?), List<string> types = default(List<string>), string value = default(string))
        {
            this.DisplayName = displayName;
            this.IsList = isList;
            this.SupportsListAndSingleValueOperators = supportsListAndSingleValueOperators;
            this.Types = types;
            this.Value = value;
        }

        /// <summary>
        /// The display name of the function.
        /// </summary>
        /// <value>The display name of the function.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The data types returned by the function.
        /// </summary>
        /// <value>The data types returned by the function.</value>
        [DataMember(Name = "types", EmitDefaultValue = false)]
        public List<string> Types { get; set; }

        /// <summary>
        /// The function identifier.
        /// </summary>
        /// <value>The function identifier.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunctionReferenceData {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IsList: ").Append(IsList).Append("\n");
            sb.Append("  SupportsListAndSingleValueOperators: ").Append(SupportsListAndSingleValueOperators).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
