/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Metadata for an item in an attachment archive.
    /// </summary>
    [DataContract(Name = "AttachmentArchiveItemReadable")]
    public partial class AttachmentArchiveItemReadable : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentArchiveItemReadable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AttachmentArchiveItemReadable()
        {
        }

        /// <summary>
        /// The position of the item within the archive.
        /// </summary>
        /// <value>The position of the item within the archive.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public long Index { get; private set; }

        /// <summary>
        /// Returns false as Index should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIndex()
        {
            return false;
        }
        /// <summary>
        /// The label for the archive item.
        /// </summary>
        /// <value>The label for the archive item.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; private set; }

        /// <summary>
        /// Returns false as Label should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabel()
        {
            return false;
        }
        /// <summary>
        /// The MIME type of the archive item.
        /// </summary>
        /// <value>The MIME type of the archive item.</value>
        [DataMember(Name = "mediaType", EmitDefaultValue = false)]
        public string MediaType { get; private set; }

        /// <summary>
        /// Returns false as MediaType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMediaType()
        {
            return false;
        }
        /// <summary>
        /// The path of the archive item.
        /// </summary>
        /// <value>The path of the archive item.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; private set; }

        /// <summary>
        /// Returns false as Path should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePath()
        {
            return false;
        }
        /// <summary>
        /// The size of the archive item.
        /// </summary>
        /// <value>The size of the archive item.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; private set; }

        /// <summary>
        /// Returns false as Size should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSize()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentArchiveItemReadable {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
