/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a notification.
    /// </summary>
    [DataContract(Name = "Notification")]
    public partial class Notification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        /// <param name="htmlBody">The HTML body of the email notification for the issue..</param>
        /// <param name="restrict">Restricts the notifications to users with the specified permissions..</param>
        /// <param name="subject">The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary..</param>
        /// <param name="textBody">The plain text body of the email notification for the issue..</param>
        /// <param name="to">The recipients of the email notification for the issue..</param>
        public Notification(string htmlBody = default(string), NotificationRecipientsRestrictions restrict = default(NotificationRecipientsRestrictions), string subject = default(string), string textBody = default(string), NotificationRecipients to = default(NotificationRecipients))
        {
            this.HtmlBody = htmlBody;
            this.Restrict = restrict;
            this.Subject = subject;
            this.TextBody = textBody;
            this.To = to;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The HTML body of the email notification for the issue.
        /// </summary>
        /// <value>The HTML body of the email notification for the issue.</value>
        [DataMember(Name = "htmlBody", EmitDefaultValue = false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// Restricts the notifications to users with the specified permissions.
        /// </summary>
        /// <value>Restricts the notifications to users with the specified permissions.</value>
        [DataMember(Name = "restrict", EmitDefaultValue = false)]
        public NotificationRecipientsRestrictions Restrict { get; set; }

        /// <summary>
        /// The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
        /// </summary>
        /// <value>The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// The plain text body of the email notification for the issue.
        /// </summary>
        /// <value>The plain text body of the email notification for the issue.</value>
        [DataMember(Name = "textBody", EmitDefaultValue = false)]
        public string TextBody { get; set; }

        /// <summary>
        /// The recipients of the email notification for the issue.
        /// </summary>
        /// <value>The recipients of the email notification for the issue.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public NotificationRecipients To { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Notification {\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  Restrict: ").Append(Restrict).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
