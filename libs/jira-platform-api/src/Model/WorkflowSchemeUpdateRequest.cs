/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The update workflow scheme payload.
    /// </summary>
    [DataContract(Name = "WorkflowSchemeUpdateRequest")]
    public partial class WorkflowSchemeUpdateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowSchemeUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowSchemeUpdateRequest()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowSchemeUpdateRequest" /> class.
        /// </summary>
        /// <param name="defaultWorkflowId">The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the &#x60;defaultWorkflowId&#x60; isn&#39;t specified, this is set to *Jira Workflow (jira)*..</param>
        /// <param name="description">The new description for this workflow scheme. (required).</param>
        /// <param name="id">The ID of this workflow scheme. (required).</param>
        /// <param name="name">The new name for this workflow scheme. (required).</param>
        /// <param name="statusMappingsByIssueTypeOverride">Overrides, for the selected issue types, any status mappings provided in &#x60;statusMappingsByWorkflows&#x60;. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;..</param>
        /// <param name="statusMappingsByWorkflows">The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;..</param>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="workflowsForIssueTypes">Mappings from workflows to issue types..</param>
        public WorkflowSchemeUpdateRequest(string defaultWorkflowId = default(string), string description = default(string), string id = default(string), string name = default(string), List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride = default(List<MappingsByIssueTypeOverride>), List<MappingsByWorkflow> statusMappingsByWorkflows = default(List<MappingsByWorkflow>), DocumentVersion varVersion = default(DocumentVersion), List<WorkflowSchemeAssociation> workflowsForIssueTypes = default(List<WorkflowSchemeAssociation>))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for WorkflowSchemeUpdateRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for WorkflowSchemeUpdateRequest and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WorkflowSchemeUpdateRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for WorkflowSchemeUpdateRequest and cannot be null");
            }
            this.VarVersion = varVersion;
            this.DefaultWorkflowId = defaultWorkflowId;
            this.StatusMappingsByIssueTypeOverride = statusMappingsByIssueTypeOverride;
            this.StatusMappingsByWorkflows = statusMappingsByWorkflows;
            this.WorkflowsForIssueTypes = workflowsForIssueTypes;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the &#x60;defaultWorkflowId&#x60; isn&#39;t specified, this is set to *Jira Workflow (jira)*.
        /// </summary>
        /// <value>The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the &#x60;defaultWorkflowId&#x60; isn&#39;t specified, this is set to *Jira Workflow (jira)*.</value>
        [DataMember(Name = "defaultWorkflowId", EmitDefaultValue = false)]
        public string DefaultWorkflowId { get; set; }

        /// <summary>
        /// The new description for this workflow scheme.
        /// </summary>
        /// <value>The new description for this workflow scheme.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of this workflow scheme.
        /// </summary>
        /// <value>The ID of this workflow scheme.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The new name for this workflow scheme.
        /// </summary>
        /// <value>The new name for this workflow scheme.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Overrides, for the selected issue types, any status mappings provided in &#x60;statusMappingsByWorkflows&#x60;. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
        /// </summary>
        /// <value>Overrides, for the selected issue types, any status mappings provided in &#x60;statusMappingsByWorkflows&#x60;. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.</value>
        [DataMember(Name = "statusMappingsByIssueTypeOverride", EmitDefaultValue = false)]
        public List<MappingsByIssueTypeOverride> StatusMappingsByIssueTypeOverride { get; set; }

        /// <summary>
        /// The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
        /// </summary>
        /// <value>The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#39;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.</value>
        [DataMember(Name = "statusMappingsByWorkflows", EmitDefaultValue = false)]
        public List<MappingsByWorkflow> StatusMappingsByWorkflows { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public DocumentVersion VarVersion { get; set; }

        /// <summary>
        /// Mappings from workflows to issue types.
        /// </summary>
        /// <value>Mappings from workflows to issue types.</value>
        [DataMember(Name = "workflowsForIssueTypes", EmitDefaultValue = false)]
        public List<WorkflowSchemeAssociation> WorkflowsForIssueTypes { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowSchemeUpdateRequest {\n");
            sb.Append("  DefaultWorkflowId: ").Append(DefaultWorkflowId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StatusMappingsByIssueTypeOverride: ").Append(StatusMappingsByIssueTypeOverride).Append("\n");
            sb.Append("  StatusMappingsByWorkflows: ").Append(StatusMappingsByWorkflows).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  WorkflowsForIssueTypes: ").Append(WorkflowsForIssueTypes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
