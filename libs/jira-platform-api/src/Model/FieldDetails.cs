/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about a field.
    /// </summary>
    [DataContract(Name = "FieldDetails")]
    public partial class FieldDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldDetails" /> class.
        /// </summary>
        /// <param name="clauseNames">The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ)..</param>
        /// <param name="custom">Whether the field is a custom field..</param>
        /// <param name="id">The ID of the field..</param>
        /// <param name="key">The key of the field..</param>
        /// <param name="name">The name of the field..</param>
        /// <param name="navigable">Whether the field can be used as a column on the issue navigator..</param>
        /// <param name="orderable">Whether the content of the field can be used to order lists..</param>
        /// <param name="schema">The data schema for the field..</param>
        /// <param name="scope">The scope of the field..</param>
        /// <param name="searchable">Whether the content of the field can be searched..</param>
        public FieldDetails(List<string> clauseNames = default(List<string>), bool custom = default(bool), string id = default(string), string key = default(string), string name = default(string), bool navigable = default(bool), bool orderable = default(bool), JsonTypeBean schema = default(JsonTypeBean), Scope scope = default(Scope), bool searchable = default(bool))
        {
            this.ClauseNames = clauseNames;
            this.Custom = custom;
            this.Id = id;
            this.Key = key;
            this.Name = name;
            this.Navigable = navigable;
            this.Orderable = orderable;
            this.Schema = schema;
            this.Scope = scope;
            this.Searchable = searchable;
        }

        /// <summary>
        /// The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
        /// </summary>
        /// <value>The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).</value>
        [DataMember(Name = "clauseNames", EmitDefaultValue = false)]
        public List<string> ClauseNames { get; set; }

        /// <summary>
        /// Whether the field is a custom field.
        /// </summary>
        /// <value>Whether the field is a custom field.</value>
        [DataMember(Name = "custom", EmitDefaultValue = true)]
        public bool Custom { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        /// <value>The ID of the field.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        /// <value>The key of the field.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        /// <value>The name of the field.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the field can be used as a column on the issue navigator.
        /// </summary>
        /// <value>Whether the field can be used as a column on the issue navigator.</value>
        [DataMember(Name = "navigable", EmitDefaultValue = true)]
        public bool Navigable { get; set; }

        /// <summary>
        /// Whether the content of the field can be used to order lists.
        /// </summary>
        /// <value>Whether the content of the field can be used to order lists.</value>
        [DataMember(Name = "orderable", EmitDefaultValue = true)]
        public bool Orderable { get; set; }

        /// <summary>
        /// The data schema for the field.
        /// </summary>
        /// <value>The data schema for the field.</value>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public JsonTypeBean Schema { get; set; }

        /// <summary>
        /// The scope of the field.
        /// </summary>
        /// <value>The scope of the field.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public Scope Scope { get; set; }

        /// <summary>
        /// Whether the content of the field can be searched.
        /// </summary>
        /// <value>Whether the content of the field can be searched.</value>
        [DataMember(Name = "searchable", EmitDefaultValue = true)]
        public bool Searchable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldDetails {\n");
            sb.Append("  ClauseNames: ").Append(ClauseNames).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Navigable: ").Append(Navigable).Append("\n");
            sb.Append("  Orderable: ").Append(Orderable).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Searchable: ").Append(Searchable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
