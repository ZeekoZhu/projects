/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The data type of the field.
    /// </summary>
    [DataContract(Name = "FieldCreateMetadata_schema")]
    public partial class FieldCreateMetadataSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCreateMetadataSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public FieldCreateMetadataSchema()
        {
        }

        /// <summary>
        /// If the field is a custom field, the configuration of the field.
        /// </summary>
        /// <value>If the field is a custom field, the configuration of the field.</value>
        [DataMember(Name = "configuration", EmitDefaultValue = false)]
        public Dictionary<string, Object> VarConfiguration { get; private set; }

        /// <summary>
        /// Returns false as VarConfiguration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarConfiguration()
        {
            return false;
        }
        /// <summary>
        /// If the field is a custom field, the URI of the field.
        /// </summary>
        /// <value>If the field is a custom field, the URI of the field.</value>
        [DataMember(Name = "custom", EmitDefaultValue = false)]
        public string Custom { get; private set; }

        /// <summary>
        /// Returns false as Custom should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustom()
        {
            return false;
        }
        /// <summary>
        /// If the field is a custom field, the custom ID of the field.
        /// </summary>
        /// <value>If the field is a custom field, the custom ID of the field.</value>
        [DataMember(Name = "customId", EmitDefaultValue = false)]
        public long CustomId { get; private set; }

        /// <summary>
        /// Returns false as CustomId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomId()
        {
            return false;
        }
        /// <summary>
        /// When the data type is an array, the name of the field items within the array.
        /// </summary>
        /// <value>When the data type is an array, the name of the field items within the array.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public string Items { get; private set; }

        /// <summary>
        /// Returns false as Items should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItems()
        {
            return false;
        }
        /// <summary>
        /// If the field is a system field, the name of the field.
        /// </summary>
        /// <value>If the field is a system field, the name of the field.</value>
        [DataMember(Name = "system", EmitDefaultValue = false)]
        public string VarSystem { get; private set; }

        /// <summary>
        /// Returns false as VarSystem should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVarSystem()
        {
            return false;
        }
        /// <summary>
        /// The data type of the field.
        /// </summary>
        /// <value>The data type of the field.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; private set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldCreateMetadataSchema {\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  CustomId: ").Append(CustomId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  VarSystem: ").Append(VarSystem).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
