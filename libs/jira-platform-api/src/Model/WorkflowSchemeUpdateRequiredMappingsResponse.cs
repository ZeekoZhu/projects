/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// WorkflowSchemeUpdateRequiredMappingsResponse
    /// </summary>
    [DataContract(Name = "WorkflowSchemeUpdateRequiredMappingsResponse")]
    public partial class WorkflowSchemeUpdateRequiredMappingsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowSchemeUpdateRequiredMappingsResponse" /> class.
        /// </summary>
        /// <param name="statusMappingsByIssueTypes">The list of required status mappings by issue type..</param>
        /// <param name="statusMappingsByWorkflows">The list of required status mappings by workflow..</param>
        /// <param name="statuses">The details of the statuses in the associated workflows..</param>
        /// <param name="statusesPerWorkflow">The statuses associated with each workflow..</param>
        public WorkflowSchemeUpdateRequiredMappingsResponse(List<RequiredMappingByIssueType> statusMappingsByIssueTypes = default(List<RequiredMappingByIssueType>), List<RequiredMappingByWorkflows> statusMappingsByWorkflows = default(List<RequiredMappingByWorkflows>), List<StatusMetadata> statuses = default(List<StatusMetadata>), List<StatusesPerWorkflow> statusesPerWorkflow = default(List<StatusesPerWorkflow>))
        {
            this.StatusMappingsByIssueTypes = statusMappingsByIssueTypes;
            this.StatusMappingsByWorkflows = statusMappingsByWorkflows;
            this.Statuses = statuses;
            this.StatusesPerWorkflow = statusesPerWorkflow;
        }

        /// <summary>
        /// The list of required status mappings by issue type.
        /// </summary>
        /// <value>The list of required status mappings by issue type.</value>
        [DataMember(Name = "statusMappingsByIssueTypes", EmitDefaultValue = false)]
        public List<RequiredMappingByIssueType> StatusMappingsByIssueTypes { get; set; }

        /// <summary>
        /// The list of required status mappings by workflow.
        /// </summary>
        /// <value>The list of required status mappings by workflow.</value>
        [DataMember(Name = "statusMappingsByWorkflows", EmitDefaultValue = false)]
        public List<RequiredMappingByWorkflows> StatusMappingsByWorkflows { get; set; }

        /// <summary>
        /// The details of the statuses in the associated workflows.
        /// </summary>
        /// <value>The details of the statuses in the associated workflows.</value>
        [DataMember(Name = "statuses", EmitDefaultValue = false)]
        public List<StatusMetadata> Statuses { get; set; }

        /// <summary>
        /// The statuses associated with each workflow.
        /// </summary>
        /// <value>The statuses associated with each workflow.</value>
        [DataMember(Name = "statusesPerWorkflow", EmitDefaultValue = false)]
        public List<StatusesPerWorkflow> StatusesPerWorkflow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowSchemeUpdateRequiredMappingsResponse {\n");
            sb.Append("  StatusMappingsByIssueTypes: ").Append(StatusMappingsByIssueTypes).Append("\n");
            sb.Append("  StatusMappingsByWorkflows: ").Append(StatusMappingsByWorkflows).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  StatusesPerWorkflow: ").Append(StatusesPerWorkflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
