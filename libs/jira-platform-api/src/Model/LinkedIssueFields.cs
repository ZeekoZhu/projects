/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// The fields associated with the issue.
    /// </summary>
    [DataContract(Name = "LinkedIssue_fields")]
    public partial class LinkedIssueFields : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedIssueFields" /> class.
        /// </summary>
        /// <param name="assignee">assignee.</param>
        /// <param name="issueType">issueType.</param>
        /// <param name="issuetype">issuetype.</param>
        /// <param name="priority">priority.</param>
        /// <param name="status">status.</param>
        /// <param name="timetracking">timetracking.</param>
        public LinkedIssueFields(FieldsAssignee assignee = default(FieldsAssignee), FieldsIssueType issueType = default(FieldsIssueType), IssueTypeDetails issuetype = default(IssueTypeDetails), FieldsPriority priority = default(FieldsPriority), FieldsStatus status = default(FieldsStatus), FieldsTimetracking timetracking = default(FieldsTimetracking))
        {
            this.Assignee = assignee;
            this.IssueType = issueType;
            this.Issuetype = issuetype;
            this.Priority = priority;
            this.Status = status;
            this.Timetracking = timetracking;
        }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public FieldsAssignee Assignee { get; set; }

        /// <summary>
        /// Gets or Sets IssueType
        /// </summary>
        [DataMember(Name = "issueType", EmitDefaultValue = false)]
        public FieldsIssueType IssueType { get; set; }

        /// <summary>
        /// Gets or Sets Issuetype
        /// </summary>
        [DataMember(Name = "issuetype", EmitDefaultValue = false)]
        public IssueTypeDetails Issuetype { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public FieldsPriority Priority { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public FieldsStatus Status { get; set; }

        /// <summary>
        /// The summary description of the linked issue.
        /// </summary>
        /// <value>The summary description of the linked issue.</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; private set; }

        /// <summary>
        /// Returns false as Summary should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSummary()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Timetracking
        /// </summary>
        [DataMember(Name = "timetracking", EmitDefaultValue = false)]
        public FieldsTimetracking Timetracking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkedIssueFields {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  Issuetype: ").Append(Issuetype).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Timetracking: ").Append(Timetracking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
