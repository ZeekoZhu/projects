/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of issue history metadata.
    /// </summary>
    [DataContract(Name = "HistoryMetadata")]
    public partial class HistoryMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryMetadata" /> class.
        /// </summary>
        /// <param name="activityDescription">The activity described in the history record..</param>
        /// <param name="activityDescriptionKey">The key of the activity described in the history record..</param>
        /// <param name="actor">Details of the user whose action created the history record..</param>
        /// <param name="cause">Details of the cause that triggered the creation the history record..</param>
        /// <param name="description">The description of the history record..</param>
        /// <param name="descriptionKey">The description key of the history record..</param>
        /// <param name="emailDescription">The description of the email address associated the history record..</param>
        /// <param name="emailDescriptionKey">The description key of the email address associated the history record..</param>
        /// <param name="extraData">Additional arbitrary information about the history record..</param>
        /// <param name="generator">Details of the system that generated the history record..</param>
        /// <param name="type">The type of the history record..</param>
        public HistoryMetadata(string activityDescription = default(string), string activityDescriptionKey = default(string), HistoryMetadataParticipant actor = default(HistoryMetadataParticipant), HistoryMetadataParticipant cause = default(HistoryMetadataParticipant), string description = default(string), string descriptionKey = default(string), string emailDescription = default(string), string emailDescriptionKey = default(string), Dictionary<string, string> extraData = default(Dictionary<string, string>), HistoryMetadataParticipant generator = default(HistoryMetadataParticipant), string type = default(string))
        {
            this.ActivityDescription = activityDescription;
            this.ActivityDescriptionKey = activityDescriptionKey;
            this.Actor = actor;
            this.Cause = cause;
            this.Description = description;
            this.DescriptionKey = descriptionKey;
            this.EmailDescription = emailDescription;
            this.EmailDescriptionKey = emailDescriptionKey;
            this.ExtraData = extraData;
            this.Generator = generator;
            this.Type = type;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The activity described in the history record.
        /// </summary>
        /// <value>The activity described in the history record.</value>
        [DataMember(Name = "activityDescription", EmitDefaultValue = false)]
        public string ActivityDescription { get; set; }

        /// <summary>
        /// The key of the activity described in the history record.
        /// </summary>
        /// <value>The key of the activity described in the history record.</value>
        [DataMember(Name = "activityDescriptionKey", EmitDefaultValue = false)]
        public string ActivityDescriptionKey { get; set; }

        /// <summary>
        /// Details of the user whose action created the history record.
        /// </summary>
        /// <value>Details of the user whose action created the history record.</value>
        [DataMember(Name = "actor", EmitDefaultValue = false)]
        public HistoryMetadataParticipant Actor { get; set; }

        /// <summary>
        /// Details of the cause that triggered the creation the history record.
        /// </summary>
        /// <value>Details of the cause that triggered the creation the history record.</value>
        [DataMember(Name = "cause", EmitDefaultValue = false)]
        public HistoryMetadataParticipant Cause { get; set; }

        /// <summary>
        /// The description of the history record.
        /// </summary>
        /// <value>The description of the history record.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The description key of the history record.
        /// </summary>
        /// <value>The description key of the history record.</value>
        [DataMember(Name = "descriptionKey", EmitDefaultValue = false)]
        public string DescriptionKey { get; set; }

        /// <summary>
        /// The description of the email address associated the history record.
        /// </summary>
        /// <value>The description of the email address associated the history record.</value>
        [DataMember(Name = "emailDescription", EmitDefaultValue = false)]
        public string EmailDescription { get; set; }

        /// <summary>
        /// The description key of the email address associated the history record.
        /// </summary>
        /// <value>The description key of the email address associated the history record.</value>
        [DataMember(Name = "emailDescriptionKey", EmitDefaultValue = false)]
        public string EmailDescriptionKey { get; set; }

        /// <summary>
        /// Additional arbitrary information about the history record.
        /// </summary>
        /// <value>Additional arbitrary information about the history record.</value>
        [DataMember(Name = "extraData", EmitDefaultValue = false)]
        public Dictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Details of the system that generated the history record.
        /// </summary>
        /// <value>Details of the system that generated the history record.</value>
        [DataMember(Name = "generator", EmitDefaultValue = false)]
        public HistoryMetadataParticipant Generator { get; set; }

        /// <summary>
        /// The type of the history record.
        /// </summary>
        /// <value>The type of the history record.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistoryMetadata {\n");
            sb.Append("  ActivityDescription: ").Append(ActivityDescription).Append("\n");
            sb.Append("  ActivityDescriptionKey: ").Append(ActivityDescriptionKey).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionKey: ").Append(DescriptionKey).Append("\n");
            sb.Append("  EmailDescription: ").Append(EmailDescription).Append("\n");
            sb.Append("  EmailDescriptionKey: ").Append(EmailDescriptionKey).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  Generator: ").Append(Generator).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
