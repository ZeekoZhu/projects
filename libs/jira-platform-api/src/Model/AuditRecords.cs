/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Container for a list of audit records.
    /// </summary>
    [DataContract(Name = "AuditRecords")]
    public partial class AuditRecords : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditRecords" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public AuditRecords()
        {
        }

        /// <summary>
        /// The requested or default limit on the number of audit items to be returned.
        /// </summary>
        /// <value>The requested or default limit on the number of audit items to be returned.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; private set; }

        /// <summary>
        /// Returns false as Limit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLimit()
        {
            return false;
        }
        /// <summary>
        /// The number of audit items skipped before the first item in this list.
        /// </summary>
        /// <value>The number of audit items skipped before the first item in this list.</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; private set; }

        /// <summary>
        /// Returns false as Offset should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOffset()
        {
            return false;
        }
        /// <summary>
        /// The list of audit items.
        /// </summary>
        /// <value>The list of audit items.</value>
        [DataMember(Name = "records", EmitDefaultValue = false)]
        public List<AuditRecordBean> Records { get; private set; }

        /// <summary>
        /// Returns false as Records should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecords()
        {
            return false;
        }
        /// <summary>
        /// The total number of audit items returned.
        /// </summary>
        /// <value>The total number of audit items returned.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public long Total { get; private set; }

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditRecords {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
