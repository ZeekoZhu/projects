/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of an application property.
    /// </summary>
    [DataContract(Name = "ApplicationProperty")]
    public partial class ApplicationProperty : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationProperty" /> class.
        /// </summary>
        /// <param name="allowedValues">The allowed values, if applicable..</param>
        /// <param name="defaultValue">The default value of the application property..</param>
        /// <param name="desc">The description of the application property..</param>
        /// <param name="example">example.</param>
        /// <param name="id">The ID of the application property. The ID and key are the same..</param>
        /// <param name="key">The key of the application property. The ID and key are the same..</param>
        /// <param name="name">The name of the application property..</param>
        /// <param name="type">The data type of the application property..</param>
        /// <param name="value">The new value..</param>
        public ApplicationProperty(List<string> allowedValues = default(List<string>), string defaultValue = default(string), string desc = default(string), string example = default(string), string id = default(string), string key = default(string), string name = default(string), string type = default(string), string value = default(string))
        {
            this.AllowedValues = allowedValues;
            this.DefaultValue = defaultValue;
            this.Desc = desc;
            this.Example = example;
            this.Id = id;
            this.Key = key;
            this.Name = name;
            this.Type = type;
            this.Value = value;
        }

        /// <summary>
        /// The allowed values, if applicable.
        /// </summary>
        /// <value>The allowed values, if applicable.</value>
        [DataMember(Name = "allowedValues", EmitDefaultValue = false)]
        public List<string> AllowedValues { get; set; }

        /// <summary>
        /// The default value of the application property.
        /// </summary>
        /// <value>The default value of the application property.</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The description of the application property.
        /// </summary>
        /// <value>The description of the application property.</value>
        [DataMember(Name = "desc", EmitDefaultValue = false)]
        public string Desc { get; set; }

        /// <summary>
        /// Gets or Sets Example
        /// </summary>
        [DataMember(Name = "example", EmitDefaultValue = false)]
        public string Example { get; set; }

        /// <summary>
        /// The ID of the application property. The ID and key are the same.
        /// </summary>
        /// <value>The ID of the application property. The ID and key are the same.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the application property. The ID and key are the same.
        /// </summary>
        /// <value>The key of the application property. The ID and key are the same.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the application property.
        /// </summary>
        /// <value>The name of the application property.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The data type of the application property.
        /// </summary>
        /// <value>The data type of the application property.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The new value.
        /// </summary>
        /// <value>The new value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationProperty {\n");
            sb.Append("  AllowedValues: ").Append(AllowedValues).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Example: ").Append(Example).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
