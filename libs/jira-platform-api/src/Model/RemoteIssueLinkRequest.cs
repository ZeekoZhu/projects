/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details of a remote issue link.
    /// </summary>
    [DataContract(Name = "RemoteIssueLinkRequest")]
    public partial class RemoteIssueLinkRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteIssueLinkRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemoteIssueLinkRequest()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteIssueLinkRequest" /> class.
        /// </summary>
        /// <param name="application">Details of the remote application the linked item is in. For example, trello..</param>
        /// <param name="globalId">An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: &#x60;appId&#x3D;456&amp;pageId&#x3D;123&#x60;.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&#39;s Jira ID.  The maximum length is 255 characters..</param>
        /// <param name="varObject">Details of the item linked to. (required).</param>
        /// <param name="relationship">Description of the relationship between the issue and the linked item. If not set, the relationship description \&quot;links to\&quot; is used in Jira..</param>
        public RemoteIssueLinkRequest(Application application = default(Application), string globalId = default(string), RemoteObject varObject = default(RemoteObject), string relationship = default(string))
        {
            // to ensure "varObject" is required (not null)
            if (varObject == null)
            {
                throw new ArgumentNullException("varObject is a required property for RemoteIssueLinkRequest and cannot be null");
            }
            this.VarObject = varObject;
            this.Application = application;
            this.GlobalId = globalId;
            this.Relationship = relationship;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Details of the remote application the linked item is in. For example, trello.
        /// </summary>
        /// <value>Details of the remote application the linked item is in. For example, trello.</value>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public Application Application { get; set; }

        /// <summary>
        /// An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: &#x60;appId&#x3D;456&amp;pageId&#x3D;123&#x60;.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&#39;s Jira ID.  The maximum length is 255 characters.
        /// </summary>
        /// <value>An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: &#x60;appId&#x3D;456&amp;pageId&#x3D;123&#x60;.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&#39;s Jira ID.  The maximum length is 255 characters.</value>
        [DataMember(Name = "globalId", EmitDefaultValue = false)]
        public string GlobalId { get; set; }

        /// <summary>
        /// Details of the item linked to.
        /// </summary>
        /// <value>Details of the item linked to.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public RemoteObject VarObject { get; set; }

        /// <summary>
        /// Description of the relationship between the issue and the linked item. If not set, the relationship description \&quot;links to\&quot; is used in Jira.
        /// </summary>
        /// <value>Description of the relationship between the issue and the linked item. If not set, the relationship description \&quot;links to\&quot; is used in Jira.</value>
        [DataMember(Name = "relationship", EmitDefaultValue = false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemoteIssueLinkRequest {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
