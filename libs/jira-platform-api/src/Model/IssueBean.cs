/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-9aad01a33a3dae75a5b6aedf98c77d2cbd2f865d
 * Contact: ecosystem@atlassian.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Projects.JiraPlatformApi.Client.OpenAPIDateConverter;

namespace Projects.JiraPlatformApi.Model
{
    /// <summary>
    /// Details about an issue.
    /// </summary>
    [DataContract(Name = "IssueBean")]
    public partial class IssueBean : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueBean" /> class.
        /// </summary>
        /// <param name="changelog">changelog.</param>
        /// <param name="editmeta">editmeta.</param>
        /// <param name="fields">fields.</param>
        /// <param name="fieldsToInclude">fieldsToInclude.</param>
        /// <param name="operations">operations.</param>
        public IssueBean(IssueBeanChangelog changelog = default(IssueBeanChangelog), IssueBeanEditmeta editmeta = default(IssueBeanEditmeta), Dictionary<string, Object> fields = default(Dictionary<string, Object>), IncludedFields fieldsToInclude = default(IncludedFields), IssueBeanOperations operations = default(IssueBeanOperations))
        {
            this.Changelog = changelog;
            this.Editmeta = editmeta;
            this.Fields = fields;
            this.FieldsToInclude = fieldsToInclude;
            this.Operations = operations;
        }

        /// <summary>
        /// Gets or Sets Changelog
        /// </summary>
        [DataMember(Name = "changelog", EmitDefaultValue = false)]
        public IssueBeanChangelog Changelog { get; set; }

        /// <summary>
        /// Gets or Sets Editmeta
        /// </summary>
        [DataMember(Name = "editmeta", EmitDefaultValue = false)]
        public IssueBeanEditmeta Editmeta { get; set; }

        /// <summary>
        /// Expand options that include additional issue details in the response.
        /// </summary>
        /// <value>Expand options that include additional issue details in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public string Expand { get; private set; }

        /// <summary>
        /// Returns false as Expand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpand()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Dictionary<string, Object> Fields { get; set; }

        /// <summary>
        /// Gets or Sets FieldsToInclude
        /// </summary>
        [DataMember(Name = "fieldsToInclude", EmitDefaultValue = false)]
        public IncludedFields FieldsToInclude { get; set; }

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        /// <value>The ID of the issue.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// The key of the issue.
        /// </summary>
        /// <value>The key of the issue.</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; private set; }

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return false;
        }
        /// <summary>
        /// The ID and name of each field present on the issue.
        /// </summary>
        /// <value>The ID and name of each field present on the issue.</value>
        [DataMember(Name = "names", EmitDefaultValue = false)]
        public Dictionary<string, string> Names { get; private set; }

        /// <summary>
        /// Returns false as Names should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNames()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name = "operations", EmitDefaultValue = false)]
        public IssueBeanOperations Operations { get; set; }

        /// <summary>
        /// Details of the issue properties identified in the request.
        /// </summary>
        /// <value>Details of the issue properties identified in the request.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, Object> Properties { get; private set; }

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return false;
        }
        /// <summary>
        /// The rendered value of each field present on the issue.
        /// </summary>
        /// <value>The rendered value of each field present on the issue.</value>
        [DataMember(Name = "renderedFields", EmitDefaultValue = false)]
        public Dictionary<string, Object> RenderedFields { get; private set; }

        /// <summary>
        /// Returns false as RenderedFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRenderedFields()
        {
            return false;
        }
        /// <summary>
        /// The schema describing each field present on the issue.
        /// </summary>
        /// <value>The schema describing each field present on the issue.</value>
        [DataMember(Name = "schema", EmitDefaultValue = false)]
        public Dictionary<string, JsonTypeBean> Schema { get; private set; }

        /// <summary>
        /// Returns false as Schema should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSchema()
        {
            return false;
        }
        /// <summary>
        /// The URL of the issue details.
        /// </summary>
        /// <value>The URL of the issue details.</value>
        [DataMember(Name = "self", EmitDefaultValue = false)]
        public string Self { get; private set; }

        /// <summary>
        /// Returns false as Self should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSelf()
        {
            return false;
        }
        /// <summary>
        /// The transitions that can be performed on the issue.
        /// </summary>
        /// <value>The transitions that can be performed on the issue.</value>
        [DataMember(Name = "transitions", EmitDefaultValue = false)]
        public List<IssueTransition> Transitions { get; private set; }

        /// <summary>
        /// Returns false as Transitions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransitions()
        {
            return false;
        }
        /// <summary>
        /// The versions of each field on the issue.
        /// </summary>
        /// <value>The versions of each field on the issue.</value>
        [DataMember(Name = "versionedRepresentations", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, Object>> VersionedRepresentations { get; private set; }

        /// <summary>
        /// Returns false as VersionedRepresentations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVersionedRepresentations()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueBean {\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  Editmeta: ").Append(Editmeta).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  FieldsToInclude: ").Append(FieldsToInclude).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  RenderedFields: ").Append(RenderedFields).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("  VersionedRepresentations: ").Append(VersionedRepresentations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
