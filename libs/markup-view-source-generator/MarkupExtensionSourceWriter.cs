using Microsoft.CodeAnalysis;
using Projects.MarkupViewSourceGenerator.Helper;

namespace Projects.MarkupViewSourceGenerator;

public class MarkupExtensionSourceWriter(GeneratorExecutionContext context)
{
  private readonly ControlInfoExtractor _controlInfoExtractor = new();

  public void GenerateExtensionSource(ConfigInfo configInfo)
  {
    foreach (var controlInfo in configInfo.ControlTypes.Select(controlType =>
               _controlInfoExtractor.Extract(controlType)))
    {
      if (controlInfo.HasDefaultCtor)
      {
        var builderContent = GenerateBuilderExtension(controlInfo);
        context.AddSource($"{controlInfo.ExtensionClassName}_Builder.g.cs",
          builderContent);
      }

      if (controlInfo.Properties.Any())
      {
        var propertyContent = GeneratePropertyExtension(controlInfo);
        context.AddSource($"{controlInfo.ExtensionClassName}_Properties.g.cs",
          propertyContent);
      }

      if (controlInfo.Events.Any())
      {
        var eventContent = GenerateEventExtension(controlInfo);
        context.AddSource($"{controlInfo.ExtensionClassName}_Events.g.cs",
          eventContent);
      }
    }
  }

  private string GenerateBuilderExtension(ControlInfo controlInfo)
  {
    var sw = new SourceWriter();
    sw.AutoGenerated();
    sw.Line($"namespace {controlInfo.DeclaringNamespace};");

    sw.Line()
      .Line(
        $"public static partial class MarkupBuilder");
    sw.CodeBlock(() =>
    {
      var controlClassName = controlInfo.ControlClassName;
      var controlClassNameRef =
        controlClassName.Replace("global::", string.Empty);
      sw.Line()
        .XmlDocSummary(
          $"Creates a new instance of the <see cref=\"T:{controlClassNameRef}\" /> class.")
        .Line(
          $"/// <returns>The new instance of <see cref=\"T:{controlClassNameRef}\" />.</returns>")
        .Line(
          $"public static {controlClassName} {controlInfo.ControlName}() => new {controlClassName}();");


      // build with an out ref
      sw.Line()
        .XmlDocSummary(
          $"Creates a new instance of the <see cref=\"T:{controlClassNameRef}\" /> class.")
        .Line(
          $"/// <param name=\"ref\">The reference of the <see cref=\"T:{controlClassNameRef}\" /> instantiated class.</param>")
        .Line(
          $"/// <returns>The new instance of <see cref=\"T:{controlClassName}\" />.</returns>")
        .Line(
          $"public static {controlClassName} {controlInfo.ControlName}(out {controlClassName} @ref)")
        .CodeBlock(() =>
        {
          sw.Line($"return @ref = new {controlClassName}();");
        });
    });

    return sw.ToString();
  }

  private string GeneratePropertyExtension(ControlInfo controlInfo)
  {
    var sw = new SourceWriter();

    sw.AutoGenerated();
    sw.Line("using System.Reactive;");
    sw.Line("using Avalonia.Data;");
    sw.NamespaceLine(controlInfo.DeclaringNamespace);

    sw.Line()
      .Line(
        $"public static partial class {controlInfo.ExtensionClassName}_Properties")
      .CodeBlock(() =>
      {
        foreach (var property in controlInfo.Properties)
        {
          var controlClass = controlInfo.ControlClassName;
          var controlClassNameRef =
            controlClass.Replace("global::", string.Empty);
          var propField = property.PropertyFieldName;
          var propName = property.Name;
          var propType = property.Type;
          sw.XmlDocSummary(
              $"Sets a binding with an observable for an <see cref=\"F:{controlClassNameRef}.{propField}\" />.")
            .Line("/// <param name=\"obj\">The target object.</param>")
            .Line(
              "/// <param name=\"observable\">The observable with the current value of the property.</param>")
            .Line("/// <param name=\"mode\">The binding mode.</param>")
            .Line("/// <param name=\"priority\">The binding priority.</param>")
            .Line("/// <returns>The target object reference.</returns>")
            .Line(
              $"public static T {propName}<T>(this T obj, IObservable<{propType}> observable, BindingMode mode = BindingMode.TwoWay, BindingPriority priority = BindingPriority.LocalValue) where T: {controlClass}")
            .CodeBlock(() =>
            {
              sw.Line(
                  $"var binding = {controlClass}.{propField}.Bind()")
                .Indent()
                .Line(".WithMode(mode)")
                .Line(".WithPriority(priority);")
                .Unindent()
                .Line("obj[binding] = observable.ToBinding();")
                .Line("return obj;");
            });


          sw.XmlDocSummary(
              $"Sets the value of the <see cref=\"F:{controlClassNameRef}.{propField}\" />.")
            .Line("/// <param name=\"obj\">The target object.</param>")
            .Line("/// <param name=\"value\">The value to set.</param>")
            .Line("/// <returns>The target object reference.</returns>")
            .Line(
              $"public static T {propName}<T>(this T obj, {propType} value) where T: {controlClass}")
            .CodeBlock(() =>
            {
              sw.Line(
                  $"obj[(AvaloniaProperty) {controlClass}.{propField}] = (object) value;")
                .Line("return obj;");
            });


          sw.Line()
            .XmlDocSummary(
              $"Sets a handler with an observable for an <see cref=\"F:{controlClassNameRef}.{propField}\" />.")
            .Line("/// <param name=\"obj\">The target object.</param>")
            .Line(
              "/// <param name=\"handler\">The handler with target object and observable with the current value of the property.</param>")
            .Line("/// <returns>The target object reference.</returns>")
            .Line(
              $"public static T On{propName}<T>(this T obj, Action<T, IObservable<{propType}>> handler) where T: {controlClass}")
            .CodeBlock(() =>
            {
              sw.Line(
                  $"var observable = obj.GetObservable<{propType}>((AvaloniaProperty<{propType}>) {controlClass}.{propField});")
                .Line("handler(obj, observable);")
                .Line("return obj;");
            });


          sw.Line()
            .XmlDocSummary(
              $"Gets an observable for an <see cref=\"F:{controlClassNameRef}.{propField}\" />.")
            .Line("/// <param name=\"obj\">The target object.</param>")
            .Line("/// <returns>")
            .Line(
              "/// An observable which fires immediately with the current value of the property on the")
            .Line(
              "/// object and subsequently each time the property value changes.")
            .Line("/// </returns>")
            .Line(
              $"public static IObservable<{propType}> Observe{propName}<T>(this T obj) where T: {controlClass}")
            .CodeBlock(() =>
            {
              sw.Line(
                $"return obj.GetObservable<{propType}>((AvaloniaProperty<{propType}>) {controlClass}.{propField});");
            });
        }
      });

    return sw.ToString();
  }

  private static string GenerateEventExtension(ControlInfo controlInfo)
  {
    var sw = new SourceWriter();

    sw.AutoGenerated();
    sw.Line("using System.Reactive;");
    sw.Line("using Avalonia.Data;");
    sw.NamespaceLine(controlInfo.DeclaringNamespace);


    sw.Line()
      .Line(
        $"public static partial class {controlInfo.ExtensionClassName}_Events")
      .CodeBlock(() =>
      {
        foreach (var controlEvent in controlInfo.Events)
        {
          var controlClass = controlInfo.ControlClassName;
          var controlClassRef = controlClass.Replace("global::", "");
          var eventFieldName = controlEvent.EventFiledName;
          var eventName = controlEvent.Name;
          var eventArgType = controlEvent.Type;
          sw
            .Lines($$"""
                     /// <summary>
                     /// Registers a handler for the <see cref="F:{{controlClassRef}}.{{eventFieldName}}" /> event on an object of type <see cref="T:{{controlClassRef}}" />.
                     /// </summary>
                     /// <param name="obj">The target object.</param>
                     /// <param name="action">The action to be performed when the event is raised.</param>
                     /// <param name="routes">The routing strategies for the event.</param>
                     /// <typeparam name="T">The type of the target object.</typeparam>
                     /// <returns>The target object.</returns>
                     public static T On{{eventName}}Handler<T>(
                       this T obj,
                       Action<T, {{eventArgType}}> action,
                       RoutingStrategies routes = RoutingStrategies.Bubble)
                       where T : {{controlClass}}
                     {
                        obj.AddHandler<{{eventArgType}}>({{controlClass}}.{{eventFieldName}}, (EventHandler<{{eventArgType}}>) ((_, args) => action(obj, args)), routes, false);
                        return obj;
                     }
                     """)
            .Lines($$"""
                     /// <summary>
                     /// Registers a handler for the <see cref="F:{{controlClassRef}}.{{eventFieldName}}" /> event on an object of type <see cref="T:{{controlClassRef}}" /> and returns an observable for the event.
                     /// </summary>
                     /// <param name="obj">The target object.</param>
                     /// <param name="handler">The handler to be called when the event is raised.</param>
                     /// <param name="routes">The routing strategies for the event.</param>
                     /// <typeparam name="T">The type of the target object.</typeparam>
                     /// <returns>The target object.</returns>
                     public static T On{{eventName}}<T>(
                       this T obj,
                       Action<T, IObservable<{{eventArgType}}>> handler,
                       RoutingStrategies routes = RoutingStrategies.Bubble)
                       where T : {{controlClass}}
                     {
                       IObservable<{{eventArgType}}> observable = obj.GetObservable<{{eventArgType}}>({{controlClass}}.{{eventFieldName}}, routes);
                       handler(obj, observable);
                       return obj;
                     }
                     """)
            .Lines($$"""
                     /// <summary>
                     /// Gets an observable for the <see cref="F:{{controlClassRef}}.{{eventFieldName}}" /> event on an object of type <see cref="T:{{controlClassRef}}" />.
                     /// </summary>
                     /// <param name="obj">The target object.</param>
                     /// <param name="routes">The routing strategies for the event.</param>
                     /// <returns>An observable for the event.</returns>
                     public static IObservable<{{eventArgType}}> ObserveOn{{eventName}}(
                     this {{controlClass}} obj,
                     RoutingStrategies routes = RoutingStrategies.Bubble)
                     {
                     return obj.GetObservable<{{eventArgType}}>({{controlClass}}.{{eventFieldName}}, routes);
                     }
                     """);
        }
      });

    return sw.ToString();
  }
}
