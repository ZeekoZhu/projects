using System.Text;

namespace Projects.MarkupViewSourceGenerator.Helper;

/// <summary>
///   A thin wrapper around StringBuilder to help with writing source code.
/// </summary>
public class SourceWriter(string indentString = "  ")
{
  private int _indentLevel;

  public StringBuilder Builder { get; set; } = new();

  /// <summary>
  /// Writes a comment indicating that the code was auto-generated.
  /// </summary>
  /// <returns></returns>
  public SourceWriter AutoGenerated()
  {
    return Line("// <auto-generated />");
  }

  /// <summary>
  /// Write a namespace line: "namespace Some.Namespace";
  /// </summary>
  /// <param name="ns"></param>
  /// <returns></returns>
  public SourceWriter NamespaceLine(string ns) => Line($"namespace {ns};");

  public SourceWriter Indent()
  {
    _indentLevel++;
    return this;
  }

  public SourceWriter Unindent()
  {
    _indentLevel--;
    return this;
  }

  public SourceWriter Line()
  {
    Builder.AppendLine();
    return this;
  }

  public SourceWriter Lines(string linesContent)
  {
    var lines = linesContent.Trim('\n').Split('\n');
    foreach (var line in lines)
    {
      Line(line);
    }

    return this;
  }

  public SourceWriter Line(string value)
  {
    foreach (var s in Enumerable.Repeat(indentString, _indentLevel))
      Builder.Append(s);

    Builder.AppendLine(value);
    return this;
  }

  public SourceWriter XmlDocSummary(string summaryLine)
  {
    return Line("/// <summary>")
      .Line($"/// {summaryLine}")
      .Line("/// </summary>");
  }

  public SourceWriter Write(string value)
  {
    Builder.Append(value);
    return this;
  }

  public SourceWriter CodeBlock(Action block)
  {
    Line("{");
    Indent();
    block();
    Unindent();
    return Line("}");
  }

  public override string ToString()
  {
    return Builder.ToString();
  }
}
